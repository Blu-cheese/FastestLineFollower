
ENCODER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000701c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  080071c0  080071c0  000081c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007598  08007598  000091f0  2**0
                  CONTENTS
  4 .ARM          00000008  08007598  08007598  00008598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075a0  080075a0  000091f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075a0  080075a0  000085a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080075a4  080075a4  000085a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  080075a8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  200001f0  08007798  000091f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  08007798  000094d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101c7  00000000  00000000  00009220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000256e  00000000  00000000  000193e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  0001b958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c70  00000000  00000000  0001c928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017dd9  00000000  00000000  0001d598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ace  00000000  00000000  00035371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091e7d  00000000  00000000  00048e3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dacbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053d4  00000000  00000000  000dad00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000e00d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080071a4 	.word	0x080071a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	080071a4 	.word	0x080071a4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	@ 0x28
 8000eec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	4b3f      	ldr	r3, [pc, #252]	@ (8001000 <MX_GPIO_Init+0x118>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	4a3e      	ldr	r2, [pc, #248]	@ (8001000 <MX_GPIO_Init+0x118>)
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0e:	4b3c      	ldr	r3, [pc, #240]	@ (8001000 <MX_GPIO_Init+0x118>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	f003 0304 	and.w	r3, r3, #4
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	4b38      	ldr	r3, [pc, #224]	@ (8001000 <MX_GPIO_Init+0x118>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	4a37      	ldr	r2, [pc, #220]	@ (8001000 <MX_GPIO_Init+0x118>)
 8000f24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2a:	4b35      	ldr	r3, [pc, #212]	@ (8001000 <MX_GPIO_Init+0x118>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	4b31      	ldr	r3, [pc, #196]	@ (8001000 <MX_GPIO_Init+0x118>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	4a30      	ldr	r2, [pc, #192]	@ (8001000 <MX_GPIO_Init+0x118>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f46:	4b2e      	ldr	r3, [pc, #184]	@ (8001000 <MX_GPIO_Init+0x118>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	4b2a      	ldr	r3, [pc, #168]	@ (8001000 <MX_GPIO_Init+0x118>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	4a29      	ldr	r2, [pc, #164]	@ (8001000 <MX_GPIO_Init+0x118>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f62:	4b27      	ldr	r3, [pc, #156]	@ (8001000 <MX_GPIO_Init+0x118>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin_Pin|AENANBLE_Pin|BENABLE_Pin, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000f74:	4823      	ldr	r0, [pc, #140]	@ (8001004 <MX_GPIO_Init+0x11c>)
 8000f76:	f001 fc13 	bl	80027a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIp4_GPIO_Port, DIp4_Pin, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f80:	4821      	ldr	r0, [pc, #132]	@ (8001008 <MX_GPIO_Init+0x120>)
 8000f82:	f001 fc0d 	bl	80027a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin_Pin|AENANBLE_Pin|BENABLE_Pin;
 8000f86:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000f8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4819      	ldr	r0, [pc, #100]	@ (8001004 <MX_GPIO_Init+0x11c>)
 8000fa0:	f001 fa62 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DIP2_Pin|SENSOR16_Pin|SENSOR8_Pin|SENSOR7_Pin
 8000fa4:	f649 7330 	movw	r3, #40752	@ 0x9f30
 8000fa8:	617b      	str	r3, [r7, #20]
                          |SENSOR6_Pin|SENSOR5_Pin|SENSOR4_Pin|SENSOR3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4814      	ldr	r0, [pc, #80]	@ (800100c <MX_GPIO_Init+0x124>)
 8000fba:	f001 fa55 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SENSOR11_Pin|SENSOR13_Pin|DP_Pin|SENSOR15_Pin
 8000fbe:	f24f 5337 	movw	r3, #62775	@ 0xf537
 8000fc2:	617b      	str	r3, [r7, #20]
                          |SENSOR14_Pin|SENSOR12_Pin|SENSOR10_Pin|SENSOR9_Pin
                          |SENSOR2_Pin|SENSOR1_Pin|DIP3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	480d      	ldr	r0, [pc, #52]	@ (8001008 <MX_GPIO_Init+0x120>)
 8000fd4:	f001 fa48 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIp4_Pin;
 8000fd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIp4_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	@ (8001008 <MX_GPIO_Init+0x120>)
 8000ff2:	f001 fa39 	bl	8002468 <HAL_GPIO_Init>

}
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	@ 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800
 8001004:	40020800 	.word	0x40020800
 8001008:	40020400 	.word	0x40020400
 800100c:	40020000 	.word	0x40020000

08001010 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001014:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <MX_I2C1_Init+0x50>)
 8001016:	4a13      	ldr	r2, [pc, #76]	@ (8001064 <MX_I2C1_Init+0x54>)
 8001018:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800101a:	4b11      	ldr	r3, [pc, #68]	@ (8001060 <MX_I2C1_Init+0x50>)
 800101c:	4a12      	ldr	r2, [pc, #72]	@ (8001068 <MX_I2C1_Init+0x58>)
 800101e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001020:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <MX_I2C1_Init+0x50>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001026:	4b0e      	ldr	r3, [pc, #56]	@ (8001060 <MX_I2C1_Init+0x50>)
 8001028:	2200      	movs	r2, #0
 800102a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800102c:	4b0c      	ldr	r3, [pc, #48]	@ (8001060 <MX_I2C1_Init+0x50>)
 800102e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001032:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001034:	4b0a      	ldr	r3, [pc, #40]	@ (8001060 <MX_I2C1_Init+0x50>)
 8001036:	2200      	movs	r2, #0
 8001038:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800103a:	4b09      	ldr	r3, [pc, #36]	@ (8001060 <MX_I2C1_Init+0x50>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001040:	4b07      	ldr	r3, [pc, #28]	@ (8001060 <MX_I2C1_Init+0x50>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001046:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <MX_I2C1_Init+0x50>)
 8001048:	2200      	movs	r2, #0
 800104a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800104c:	4804      	ldr	r0, [pc, #16]	@ (8001060 <MX_I2C1_Init+0x50>)
 800104e:	f001 fbc1 	bl	80027d4 <HAL_I2C_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001058:	f000 fd84 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}
 8001060:	2000020c 	.word	0x2000020c
 8001064:	40005400 	.word	0x40005400
 8001068:	000186a0 	.word	0x000186a0

0800106c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	@ 0x28
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a19      	ldr	r2, [pc, #100]	@ (80010f0 <HAL_I2C_MspInit+0x84>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d12b      	bne.n	80010e6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <HAL_I2C_MspInit+0x88>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	4a17      	ldr	r2, [pc, #92]	@ (80010f4 <HAL_I2C_MspInit+0x88>)
 8001098:	f043 0302 	orr.w	r3, r3, #2
 800109c:	6313      	str	r3, [r2, #48]	@ 0x30
 800109e:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <HAL_I2C_MspInit+0x88>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010aa:	23c0      	movs	r3, #192	@ 0xc0
 80010ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ae:	2312      	movs	r3, #18
 80010b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b6:	2303      	movs	r3, #3
 80010b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010ba:	2304      	movs	r3, #4
 80010bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	480c      	ldr	r0, [pc, #48]	@ (80010f8 <HAL_I2C_MspInit+0x8c>)
 80010c6:	f001 f9cf 	bl	8002468 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <HAL_I2C_MspInit+0x88>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d2:	4a08      	ldr	r2, [pc, #32]	@ (80010f4 <HAL_I2C_MspInit+0x88>)
 80010d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010da:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <HAL_I2C_MspInit+0x88>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010e6:	bf00      	nop
 80010e8:	3728      	adds	r7, #40	@ 0x28
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40005400 	.word	0x40005400
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40020400 	.word	0x40020400

080010fc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001104:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001108:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b00      	cmp	r3, #0
 8001112:	d013      	beq.n	800113c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001114:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001118:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800111c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001120:	2b00      	cmp	r3, #0
 8001122:	d00b      	beq.n	800113c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001124:	e000      	b.n	8001128 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001126:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001128:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d0f9      	beq.n	8001126 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001132:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800113c:	687b      	ldr	r3, [r7, #4]
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
	int _write(int file, char *ptr , int len)
		{
 800114a:	b580      	push	{r7, lr}
 800114c:	b086      	sub	sp, #24
 800114e:	af00      	add	r7, sp, #0
 8001150:	60f8      	str	r0, [r7, #12]
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
			int DataIdx;
			for(DataIdx=0;DataIdx<len; DataIdx++){
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	e009      	b.n	8001170 <_write+0x26>
				ITM_SendChar(*ptr++);
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	1c5a      	adds	r2, r3, #1
 8001160:	60ba      	str	r2, [r7, #8]
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ffc9 	bl	80010fc <ITM_SendChar>
			for(DataIdx=0;DataIdx<len; DataIdx++){
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	3301      	adds	r3, #1
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	429a      	cmp	r2, r3
 8001176:	dbf1      	blt.n	800115c <_write+0x12>
			}return len;
 8001178:	687b      	ldr	r3, [r7, #4]
		}
 800117a:	4618      	mov	r0, r3
 800117c:	3718      	adds	r7, #24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <Set_Pin_Output>:



	void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
	{
 8001182:	b580      	push	{r7, lr}
 8001184:	b088      	sub	sp, #32
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	460b      	mov	r3, r1
 800118c:	807b      	strh	r3, [r7, #2]
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Pin = GPIO_Pin;
 800119e:	887b      	ldrh	r3, [r7, #2]
 80011a0:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a2:	2301      	movs	r3, #1
 80011a4:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80011aa:	f107 030c 	add.w	r3, r7, #12
 80011ae:	4619      	mov	r1, r3
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f001 f959 	bl	8002468 <HAL_GPIO_Init>
	}
 80011b6:	bf00      	nop
 80011b8:	3720      	adds	r7, #32
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <Set_Pin_Input>:

	void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
	{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b088      	sub	sp, #32
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	460b      	mov	r3, r1
 80011c8:	807b      	strh	r3, [r7, #2]
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Pin = GPIO_Pin;
 80011da:	887b      	ldrh	r3, [r7, #2]
 80011dc:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	4619      	mov	r1, r3
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f001 f93b 	bl	8002468 <HAL_GPIO_Init>
	}
 80011f2:	bf00      	nop
 80011f4:	3720      	adds	r7, #32
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <motor_control>:

	void motor_control (double pos_right, double pos_left)
	{
 80011fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011fe:	b089      	sub	sp, #36	@ 0x24
 8001200:	af02      	add	r7, sp, #8
 8001202:	ed87 0b04 	vstr	d0, [r7, #16]
 8001206:	ed87 1b02 	vstr	d1, [r7, #8]
		if (pos_left < 0 )
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	f04f 0300 	mov.w	r3, #0
 8001212:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001216:	f7ff fc69 	bl	8000aec <__aeabi_dcmplt>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d014      	beq.n	800124a <motor_control+0x4e>
		{
			HAL_GPIO_WritePin(AENANBLE_GPIO_Port, AENANBLE_Pin, 1);
 8001220:	2201      	movs	r2, #1
 8001222:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001226:	4836      	ldr	r0, [pc, #216]	@ (8001300 <motor_control+0x104>)
 8001228:	f001 faba 	bl	80027a0 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_2, -1*pos_left);  //run left motor in reverese
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	4b32      	ldr	r3, [pc, #200]	@ (8001304 <motor_control+0x108>)
 800123a:	681e      	ldr	r6, [r3, #0]
 800123c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001240:	f7ff fcba 	bl	8000bb8 <__aeabi_d2uiz>
 8001244:	4603      	mov	r3, r0
 8001246:	63b3      	str	r3, [r6, #56]	@ 0x38
 8001248:	e017      	b.n	800127a <motor_control+0x7e>
		}
		else
		{
			HAL_GPIO_WritePin(AENANBLE_GPIO_Port, AENANBLE_Pin, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001250:	482b      	ldr	r0, [pc, #172]	@ (8001300 <motor_control+0x104>)
 8001252:	f001 faa5 	bl	80027a0 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_2, ARR*pos_left); // run left motor forward
 8001256:	2301      	movs	r3, #1
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff f96b 	bl	8000534 <__aeabi_i2d>
 800125e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001262:	f7ff f9d1 	bl	8000608 <__aeabi_dmul>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4926      	ldr	r1, [pc, #152]	@ (8001304 <motor_control+0x108>)
 800126c:	680e      	ldr	r6, [r1, #0]
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	f7ff fca1 	bl	8000bb8 <__aeabi_d2uiz>
 8001276:	4603      	mov	r3, r0
 8001278:	63b3      	str	r3, [r6, #56]	@ 0x38

		}
		if (pos_right < 0 )
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	f04f 0300 	mov.w	r3, #0
 8001282:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001286:	f7ff fc31 	bl	8000aec <__aeabi_dcmplt>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d012      	beq.n	80012b6 <motor_control+0xba>
		{
			HAL_GPIO_WritePin(BENABLE_GPIO_Port, BENABLE_Pin, 1); //run right motor reverse
 8001290:	2201      	movs	r2, #1
 8001292:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001296:	481a      	ldr	r0, [pc, #104]	@ (8001300 <motor_control+0x104>)
 8001298:	f001 fa82 	bl	80027a0 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_1, -1*pos_right);
 800129c:	693c      	ldr	r4, [r7, #16]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80012a4:	4b17      	ldr	r3, [pc, #92]	@ (8001304 <motor_control+0x108>)
 80012a6:	681e      	ldr	r6, [r3, #0]
 80012a8:	4620      	mov	r0, r4
 80012aa:	4629      	mov	r1, r5
 80012ac:	f7ff fc84 	bl	8000bb8 <__aeabi_d2uiz>
 80012b0:	4603      	mov	r3, r0
 80012b2:	6373      	str	r3, [r6, #52]	@ 0x34
 80012b4:	e017      	b.n	80012e6 <motor_control+0xea>
		}
		else
		{
			HAL_GPIO_WritePin(BENABLE_GPIO_Port, BENABLE_Pin, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012bc:	4810      	ldr	r0, [pc, #64]	@ (8001300 <motor_control+0x104>)
 80012be:	f001 fa6f 	bl	80027a0 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_1, ARR*pos_right); // run right motor forward
 80012c2:	2301      	movs	r3, #1
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff f935 	bl	8000534 <__aeabi_i2d>
 80012ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012ce:	f7ff f99b 	bl	8000608 <__aeabi_dmul>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	490b      	ldr	r1, [pc, #44]	@ (8001304 <motor_control+0x108>)
 80012d8:	680c      	ldr	r4, [r1, #0]
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	f7ff fc6b 	bl	8000bb8 <__aeabi_d2uiz>
 80012e2:	4603      	mov	r3, r0
 80012e4:	6363      	str	r3, [r4, #52]	@ 0x34
			//printf("motor control: %lf %lf",pos_left,pos_right);

		}
		printf("Motor : %lf %lf", pos_left, pos_right);
 80012e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012ea:	e9cd 2300 	strd	r2, r3, [sp]
 80012ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012f2:	4805      	ldr	r0, [pc, #20]	@ (8001308 <motor_control+0x10c>)
 80012f4:	f003 ff44 	bl	8005180 <iprintf>

	}
 80012f8:	bf00      	nop
 80012fa:	371c      	adds	r7, #28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001300:	40020800 	.word	0x40020800
 8001304:	200002b0 	.word	0x200002b0
 8001308:	080071c0 	.word	0x080071c0

0800130c <QTR16_read>:



	int QTR16_read() {
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
	    //uint32_t sensor_read = 0x00000000;
	    int pos = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
	    int active = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
	   // int actives;
	    //int last_idle = 0;
	    //int position;


		Set_Pin_Output(SENSOR1_GPIO_Port, SENSOR1_Pin);
 800131a:	2120      	movs	r1, #32
 800131c:	48c0      	ldr	r0, [pc, #768]	@ (8001620 <QTR16_read+0x314>)
 800131e:	f7ff ff30 	bl	8001182 <Set_Pin_Output>
		Set_Pin_Output(SENSOR2_GPIO_Port, SENSOR2_Pin);
 8001322:	2110      	movs	r1, #16
 8001324:	48be      	ldr	r0, [pc, #760]	@ (8001620 <QTR16_read+0x314>)
 8001326:	f7ff ff2c 	bl	8001182 <Set_Pin_Output>
		Set_Pin_Output(SENSOR3_GPIO_Port, SENSOR3_Pin);
 800132a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800132e:	48bd      	ldr	r0, [pc, #756]	@ (8001624 <QTR16_read+0x318>)
 8001330:	f7ff ff27 	bl	8001182 <Set_Pin_Output>
		Set_Pin_Output(SENSOR4_GPIO_Port, SENSOR4_Pin);
 8001334:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001338:	48ba      	ldr	r0, [pc, #744]	@ (8001624 <QTR16_read+0x318>)
 800133a:	f7ff ff22 	bl	8001182 <Set_Pin_Output>
		Set_Pin_Output(SENSOR5_GPIO_Port, SENSOR5_Pin);
 800133e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001342:	48b8      	ldr	r0, [pc, #736]	@ (8001624 <QTR16_read+0x318>)
 8001344:	f7ff ff1d 	bl	8001182 <Set_Pin_Output>
		Set_Pin_Output(SENSOR6_GPIO_Port, SENSOR6_Pin);
 8001348:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800134c:	48b5      	ldr	r0, [pc, #724]	@ (8001624 <QTR16_read+0x318>)
 800134e:	f7ff ff18 	bl	8001182 <Set_Pin_Output>
		Set_Pin_Output(SENSOR7_GPIO_Port, SENSOR7_Pin);
 8001352:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001356:	48b3      	ldr	r0, [pc, #716]	@ (8001624 <QTR16_read+0x318>)
 8001358:	f7ff ff13 	bl	8001182 <Set_Pin_Output>
		Set_Pin_Output(SENSOR8_GPIO_Port, SENSOR8_Pin);
 800135c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001360:	48b0      	ldr	r0, [pc, #704]	@ (8001624 <QTR16_read+0x318>)
 8001362:	f7ff ff0e 	bl	8001182 <Set_Pin_Output>
		Set_Pin_Output(SENSOR9_GPIO_Port, SENSOR9_Pin);
 8001366:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800136a:	48ad      	ldr	r0, [pc, #692]	@ (8001620 <QTR16_read+0x314>)
 800136c:	f7ff ff09 	bl	8001182 <Set_Pin_Output>
		Set_Pin_Output(SENSOR10_GPIO_Port, SENSOR10_Pin);
 8001370:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001374:	48aa      	ldr	r0, [pc, #680]	@ (8001620 <QTR16_read+0x314>)
 8001376:	f7ff ff04 	bl	8001182 <Set_Pin_Output>
		Set_Pin_Output(SENSOR11_GPIO_Port, SENSOR11_Pin);
 800137a:	2101      	movs	r1, #1
 800137c:	48a8      	ldr	r0, [pc, #672]	@ (8001620 <QTR16_read+0x314>)
 800137e:	f7ff ff00 	bl	8001182 <Set_Pin_Output>
		Set_Pin_Output(SENSOR12_GPIO_Port, SENSOR12_Pin);
 8001382:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001386:	48a6      	ldr	r0, [pc, #664]	@ (8001620 <QTR16_read+0x314>)
 8001388:	f7ff fefb 	bl	8001182 <Set_Pin_Output>
		Set_Pin_Output(SENSOR13_GPIO_Port, SENSOR13_Pin);
 800138c:	2102      	movs	r1, #2
 800138e:	48a4      	ldr	r0, [pc, #656]	@ (8001620 <QTR16_read+0x314>)
 8001390:	f7ff fef7 	bl	8001182 <Set_Pin_Output>
		Set_Pin_Output(SENSOR14_GPIO_Port, SENSOR14_Pin);
 8001394:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001398:	48a1      	ldr	r0, [pc, #644]	@ (8001620 <QTR16_read+0x314>)
 800139a:	f7ff fef2 	bl	8001182 <Set_Pin_Output>
		Set_Pin_Output(SENSOR15_GPIO_Port, SENSOR15_Pin);
 800139e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013a2:	489f      	ldr	r0, [pc, #636]	@ (8001620 <QTR16_read+0x314>)
 80013a4:	f7ff feed 	bl	8001182 <Set_Pin_Output>
		Set_Pin_Output(SENSOR16_GPIO_Port, SENSOR16_Pin);
 80013a8:	2120      	movs	r1, #32
 80013aa:	489e      	ldr	r0, [pc, #632]	@ (8001624 <QTR16_read+0x318>)
 80013ac:	f7ff fee9 	bl	8001182 <Set_Pin_Output>


		HAL_GPIO_WritePin(SENSOR1_GPIO_Port, SENSOR1_Pin,1);
 80013b0:	2201      	movs	r2, #1
 80013b2:	2120      	movs	r1, #32
 80013b4:	489a      	ldr	r0, [pc, #616]	@ (8001620 <QTR16_read+0x314>)
 80013b6:	f001 f9f3 	bl	80027a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR2_GPIO_Port, SENSOR2_Pin,1);
 80013ba:	2201      	movs	r2, #1
 80013bc:	2110      	movs	r1, #16
 80013be:	4898      	ldr	r0, [pc, #608]	@ (8001620 <QTR16_read+0x314>)
 80013c0:	f001 f9ee 	bl	80027a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR3_GPIO_Port, SENSOR3_Pin,1);
 80013c4:	2201      	movs	r2, #1
 80013c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013ca:	4896      	ldr	r0, [pc, #600]	@ (8001624 <QTR16_read+0x318>)
 80013cc:	f001 f9e8 	bl	80027a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR4_GPIO_Port, SENSOR4_Pin,1);
 80013d0:	2201      	movs	r2, #1
 80013d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013d6:	4893      	ldr	r0, [pc, #588]	@ (8001624 <QTR16_read+0x318>)
 80013d8:	f001 f9e2 	bl	80027a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR5_GPIO_Port, SENSOR5_Pin,1);
 80013dc:	2201      	movs	r2, #1
 80013de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013e2:	4890      	ldr	r0, [pc, #576]	@ (8001624 <QTR16_read+0x318>)
 80013e4:	f001 f9dc 	bl	80027a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR6_GPIO_Port, SENSOR6_Pin,1);
 80013e8:	2201      	movs	r2, #1
 80013ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013ee:	488d      	ldr	r0, [pc, #564]	@ (8001624 <QTR16_read+0x318>)
 80013f0:	f001 f9d6 	bl	80027a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR7_GPIO_Port, SENSOR7_Pin,1);
 80013f4:	2201      	movs	r2, #1
 80013f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013fa:	488a      	ldr	r0, [pc, #552]	@ (8001624 <QTR16_read+0x318>)
 80013fc:	f001 f9d0 	bl	80027a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR8_GPIO_Port, SENSOR8_Pin,1);
 8001400:	2201      	movs	r2, #1
 8001402:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001406:	4887      	ldr	r0, [pc, #540]	@ (8001624 <QTR16_read+0x318>)
 8001408:	f001 f9ca 	bl	80027a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR9_GPIO_Port, SENSOR9_Pin,1);
 800140c:	2201      	movs	r2, #1
 800140e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001412:	4883      	ldr	r0, [pc, #524]	@ (8001620 <QTR16_read+0x314>)
 8001414:	f001 f9c4 	bl	80027a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR10_GPIO_Port, SENSOR10_Pin,1);
 8001418:	2201      	movs	r2, #1
 800141a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800141e:	4880      	ldr	r0, [pc, #512]	@ (8001620 <QTR16_read+0x314>)
 8001420:	f001 f9be 	bl	80027a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR11_GPIO_Port, SENSOR11_Pin,1);
 8001424:	2201      	movs	r2, #1
 8001426:	2101      	movs	r1, #1
 8001428:	487d      	ldr	r0, [pc, #500]	@ (8001620 <QTR16_read+0x314>)
 800142a:	f001 f9b9 	bl	80027a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR12_GPIO_Port, SENSOR12_Pin,1);
 800142e:	2201      	movs	r2, #1
 8001430:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001434:	487a      	ldr	r0, [pc, #488]	@ (8001620 <QTR16_read+0x314>)
 8001436:	f001 f9b3 	bl	80027a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR13_GPIO_Port, SENSOR13_Pin,1);
 800143a:	2201      	movs	r2, #1
 800143c:	2102      	movs	r1, #2
 800143e:	4878      	ldr	r0, [pc, #480]	@ (8001620 <QTR16_read+0x314>)
 8001440:	f001 f9ae 	bl	80027a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR14_GPIO_Port, SENSOR14_Pin,1);
 8001444:	2201      	movs	r2, #1
 8001446:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800144a:	4875      	ldr	r0, [pc, #468]	@ (8001620 <QTR16_read+0x314>)
 800144c:	f001 f9a8 	bl	80027a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR15_GPIO_Port, SENSOR15_Pin,1);
 8001450:	2201      	movs	r2, #1
 8001452:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001456:	4872      	ldr	r0, [pc, #456]	@ (8001620 <QTR16_read+0x314>)
 8001458:	f001 f9a2 	bl	80027a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR16_GPIO_Port, SENSOR16_Pin,1);
 800145c:	2201      	movs	r2, #1
 800145e:	2120      	movs	r1, #32
 8001460:	4870      	ldr	r0, [pc, #448]	@ (8001624 <QTR16_read+0x318>)
 8001462:	f001 f99d 	bl	80027a0 <HAL_GPIO_WritePin>


		DELAY_US(20);
 8001466:	4b70      	ldr	r3, [pc, #448]	@ (8001628 <QTR16_read+0x31c>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	4b6f      	ldr	r3, [pc, #444]	@ (800162c <QTR16_read+0x320>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a6f      	ldr	r2, [pc, #444]	@ (8001630 <QTR16_read+0x324>)
 8001472:	fba2 2303 	umull	r2, r3, r2, r3
 8001476:	0c9a      	lsrs	r2, r3, #18
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4619      	mov	r1, r3
 8001482:	4b6a      	ldr	r3, [pc, #424]	@ (800162c <QTR16_read+0x320>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a6a      	ldr	r2, [pc, #424]	@ (8001630 <QTR16_read+0x324>)
 8001488:	fba2 2303 	umull	r2, r3, r2, r3
 800148c:	0c9b      	lsrs	r3, r3, #18
 800148e:	085b      	lsrs	r3, r3, #1
 8001490:	1acb      	subs	r3, r1, r3
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	4b64      	ldr	r3, [pc, #400]	@ (8001628 <QTR16_read+0x31c>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d8f8      	bhi.n	8001494 <QTR16_read+0x188>

		Set_Pin_Input(SENSOR1_GPIO_Port, SENSOR1_Pin);
 80014a2:	2120      	movs	r1, #32
 80014a4:	485e      	ldr	r0, [pc, #376]	@ (8001620 <QTR16_read+0x314>)
 80014a6:	f7ff fe8a 	bl	80011be <Set_Pin_Input>
		Set_Pin_Input(SENSOR2_GPIO_Port, SENSOR2_Pin);
 80014aa:	2110      	movs	r1, #16
 80014ac:	485c      	ldr	r0, [pc, #368]	@ (8001620 <QTR16_read+0x314>)
 80014ae:	f7ff fe86 	bl	80011be <Set_Pin_Input>
		Set_Pin_Input(SENSOR3_GPIO_Port, SENSOR3_Pin);
 80014b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014b6:	485b      	ldr	r0, [pc, #364]	@ (8001624 <QTR16_read+0x318>)
 80014b8:	f7ff fe81 	bl	80011be <Set_Pin_Input>
		Set_Pin_Input(SENSOR4_GPIO_Port, SENSOR4_Pin);
 80014bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014c0:	4858      	ldr	r0, [pc, #352]	@ (8001624 <QTR16_read+0x318>)
 80014c2:	f7ff fe7c 	bl	80011be <Set_Pin_Input>
		Set_Pin_Input(SENSOR5_GPIO_Port, SENSOR5_Pin);
 80014c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014ca:	4856      	ldr	r0, [pc, #344]	@ (8001624 <QTR16_read+0x318>)
 80014cc:	f7ff fe77 	bl	80011be <Set_Pin_Input>
		Set_Pin_Input(SENSOR6_GPIO_Port, SENSOR6_Pin);
 80014d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014d4:	4853      	ldr	r0, [pc, #332]	@ (8001624 <QTR16_read+0x318>)
 80014d6:	f7ff fe72 	bl	80011be <Set_Pin_Input>
		Set_Pin_Input(SENSOR7_GPIO_Port, SENSOR7_Pin);
 80014da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014de:	4851      	ldr	r0, [pc, #324]	@ (8001624 <QTR16_read+0x318>)
 80014e0:	f7ff fe6d 	bl	80011be <Set_Pin_Input>
		Set_Pin_Input(SENSOR8_GPIO_Port, SENSOR8_Pin);
 80014e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014e8:	484e      	ldr	r0, [pc, #312]	@ (8001624 <QTR16_read+0x318>)
 80014ea:	f7ff fe68 	bl	80011be <Set_Pin_Input>
		Set_Pin_Input(SENSOR9_GPIO_Port, SENSOR9_Pin);
 80014ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014f2:	484b      	ldr	r0, [pc, #300]	@ (8001620 <QTR16_read+0x314>)
 80014f4:	f7ff fe63 	bl	80011be <Set_Pin_Input>
		Set_Pin_Input(SENSOR10_GPIO_Port, SENSOR10_Pin);
 80014f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80014fc:	4848      	ldr	r0, [pc, #288]	@ (8001620 <QTR16_read+0x314>)
 80014fe:	f7ff fe5e 	bl	80011be <Set_Pin_Input>
		Set_Pin_Input(SENSOR11_GPIO_Port, SENSOR11_Pin);
 8001502:	2101      	movs	r1, #1
 8001504:	4846      	ldr	r0, [pc, #280]	@ (8001620 <QTR16_read+0x314>)
 8001506:	f7ff fe5a 	bl	80011be <Set_Pin_Input>
		Set_Pin_Input(SENSOR12_GPIO_Port, SENSOR12_Pin);
 800150a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800150e:	4844      	ldr	r0, [pc, #272]	@ (8001620 <QTR16_read+0x314>)
 8001510:	f7ff fe55 	bl	80011be <Set_Pin_Input>
		Set_Pin_Input(SENSOR13_GPIO_Port, SENSOR13_Pin);
 8001514:	2102      	movs	r1, #2
 8001516:	4842      	ldr	r0, [pc, #264]	@ (8001620 <QTR16_read+0x314>)
 8001518:	f7ff fe51 	bl	80011be <Set_Pin_Input>
		Set_Pin_Input(SENSOR14_GPIO_Port, SENSOR14_Pin);
 800151c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001520:	483f      	ldr	r0, [pc, #252]	@ (8001620 <QTR16_read+0x314>)
 8001522:	f7ff fe4c 	bl	80011be <Set_Pin_Input>
		Set_Pin_Input(SENSOR15_GPIO_Port, SENSOR15_Pin);
 8001526:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800152a:	483d      	ldr	r0, [pc, #244]	@ (8001620 <QTR16_read+0x314>)
 800152c:	f7ff fe47 	bl	80011be <Set_Pin_Input>
		Set_Pin_Input(SENSOR16_GPIO_Port, SENSOR16_Pin);
 8001530:	2120      	movs	r1, #32
 8001532:	483c      	ldr	r0, [pc, #240]	@ (8001624 <QTR16_read+0x318>)
 8001534:	f7ff fe43 	bl	80011be <Set_Pin_Input>



		// Threshold
		DELAY_US(4500);
 8001538:	4b3b      	ldr	r3, [pc, #236]	@ (8001628 <QTR16_read+0x31c>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	4b3b      	ldr	r3, [pc, #236]	@ (800162c <QTR16_read+0x320>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a3b      	ldr	r2, [pc, #236]	@ (8001630 <QTR16_read+0x324>)
 8001544:	fba2 2303 	umull	r2, r3, r2, r3
 8001548:	0c9b      	lsrs	r3, r3, #18
 800154a:	f241 1294 	movw	r2, #4500	@ 0x1194
 800154e:	fb03 f202 	mul.w	r2, r3, r2
 8001552:	4b36      	ldr	r3, [pc, #216]	@ (800162c <QTR16_read+0x320>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4936      	ldr	r1, [pc, #216]	@ (8001630 <QTR16_read+0x324>)
 8001558:	fba1 1303 	umull	r1, r3, r1, r3
 800155c:	0c9b      	lsrs	r3, r3, #18
 800155e:	085b      	lsrs	r3, r3, #1
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	4b30      	ldr	r3, [pc, #192]	@ (8001628 <QTR16_read+0x31c>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	429a      	cmp	r2, r3
 8001570:	d8f8      	bhi.n	8001564 <QTR16_read+0x258>
		//DELAY_US(25);
		/*for(int i=0;i<=SENSOR_DELAY;i++)
			DELAY_US(500); */

		 printf("Hello");
 8001572:	4830      	ldr	r0, [pc, #192]	@ (8001634 <QTR16_read+0x328>)
 8001574:	f003 fe04 	bl	8005180 <iprintf>
	        pos += 3200;
	        active++;
	        printf("4");
	    }
	    */
	    if (HAL_GPIO_ReadPin(SENSOR5_GPIO_Port, SENSOR5_Pin)) {
 8001578:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800157c:	4829      	ldr	r0, [pc, #164]	@ (8001624 <QTR16_read+0x318>)
 800157e:	f001 f8f7 	bl	8002770 <HAL_GPIO_ReadPin>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d00c      	beq.n	80015a2 <QTR16_read+0x296>
	        //sensor_read |= 0x00000010;
	        pos += 1000;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800158e:	617b      	str	r3, [r7, #20]
	        active++;
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	3301      	adds	r3, #1
 8001594:	613b      	str	r3, [r7, #16]
	        last_end=1;
 8001596:	4b28      	ldr	r3, [pc, #160]	@ (8001638 <QTR16_read+0x32c>)
 8001598:	2201      	movs	r2, #1
 800159a:	601a      	str	r2, [r3, #0]
	        printf("5");
 800159c:	2035      	movs	r0, #53	@ 0x35
 800159e:	f003 fe01 	bl	80051a4 <putchar>
	    }
	    if (HAL_GPIO_ReadPin(SENSOR6_GPIO_Port, SENSOR6_Pin)) {
 80015a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015a6:	481f      	ldr	r0, [pc, #124]	@ (8001624 <QTR16_read+0x318>)
 80015a8:	f001 f8e2 	bl	8002770 <HAL_GPIO_ReadPin>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d009      	beq.n	80015c6 <QTR16_read+0x2ba>
	       // sensor_read |= 0x00000020;
	        pos += 2000;
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80015b8:	617b      	str	r3, [r7, #20]
	        active++;
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	3301      	adds	r3, #1
 80015be:	613b      	str	r3, [r7, #16]
	        printf("6");
 80015c0:	2036      	movs	r0, #54	@ 0x36
 80015c2:	f003 fdef 	bl	80051a4 <putchar>
	    }
	    if (HAL_GPIO_ReadPin(SENSOR7_GPIO_Port, SENSOR7_Pin)) {
 80015c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015ca:	4816      	ldr	r0, [pc, #88]	@ (8001624 <QTR16_read+0x318>)
 80015cc:	f001 f8d0 	bl	8002770 <HAL_GPIO_ReadPin>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d009      	beq.n	80015ea <QTR16_read+0x2de>
	       // sensor_read |= 0x00000040;
	        pos += 3000;
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 80015dc:	617b      	str	r3, [r7, #20]
	        active++;
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	3301      	adds	r3, #1
 80015e2:	613b      	str	r3, [r7, #16]
	        printf("7");
 80015e4:	2037      	movs	r0, #55	@ 0x37
 80015e6:	f003 fddd 	bl	80051a4 <putchar>
	    }
	    if (HAL_GPIO_ReadPin(SENSOR8_GPIO_Port, SENSOR8_Pin)) {
 80015ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015ee:	480d      	ldr	r0, [pc, #52]	@ (8001624 <QTR16_read+0x318>)
 80015f0:	f001 f8be 	bl	8002770 <HAL_GPIO_ReadPin>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d009      	beq.n	800160e <QTR16_read+0x302>
	      //  sensor_read |= 0x00000080;
	        pos += 4000;
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f503 637a 	add.w	r3, r3, #4000	@ 0xfa0
 8001600:	617b      	str	r3, [r7, #20]
	        active++;
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	3301      	adds	r3, #1
 8001606:	613b      	str	r3, [r7, #16]
	        printf("8");
 8001608:	2038      	movs	r0, #56	@ 0x38
 800160a:	f003 fdcb 	bl	80051a4 <putchar>
	    }
	    if (HAL_GPIO_ReadPin(SENSOR9_GPIO_Port, SENSOR9_Pin)) {
 800160e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001612:	4803      	ldr	r0, [pc, #12]	@ (8001620 <QTR16_read+0x314>)
 8001614:	f001 f8ac 	bl	8002770 <HAL_GPIO_ReadPin>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d019      	beq.n	8001652 <QTR16_read+0x346>
 800161e:	e00d      	b.n	800163c <QTR16_read+0x330>
 8001620:	40020400 	.word	0x40020400
 8001624:	40020000 	.word	0x40020000
 8001628:	e000e010 	.word	0xe000e010
 800162c:	2000001c 	.word	0x2000001c
 8001630:	431bde83 	.word	0x431bde83
 8001634:	080071d0 	.word	0x080071d0
 8001638:	200002a0 	.word	0x200002a0
	       // sensor_read |= 0x00000100;
	        pos += 5000;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8001642:	3308      	adds	r3, #8
 8001644:	617b      	str	r3, [r7, #20]
	        active++;
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	3301      	adds	r3, #1
 800164a:	613b      	str	r3, [r7, #16]
	        printf("9");
 800164c:	2039      	movs	r0, #57	@ 0x39
 800164e:	f003 fda9 	bl	80051a4 <putchar>
	    }
	    if (HAL_GPIO_ReadPin(SENSOR10_GPIO_Port, SENSOR10_Pin)) {
 8001652:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001656:	482a      	ldr	r0, [pc, #168]	@ (8001700 <QTR16_read+0x3f4>)
 8001658:	f001 f88a 	bl	8002770 <HAL_GPIO_ReadPin>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00a      	beq.n	8001678 <QTR16_read+0x36c>
	      //  sensor_read |= 0x00000200;
	        pos += 6000;
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f503 53bb 	add.w	r3, r3, #5984	@ 0x1760
 8001668:	3310      	adds	r3, #16
 800166a:	617b      	str	r3, [r7, #20]
	        active++;
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	3301      	adds	r3, #1
 8001670:	613b      	str	r3, [r7, #16]
	        printf("10");
 8001672:	4824      	ldr	r0, [pc, #144]	@ (8001704 <QTR16_read+0x3f8>)
 8001674:	f003 fd84 	bl	8005180 <iprintf>
	    }
	    if (HAL_GPIO_ReadPin(SENSOR11_GPIO_Port, SENSOR11_Pin)) {
 8001678:	2101      	movs	r1, #1
 800167a:	4821      	ldr	r0, [pc, #132]	@ (8001700 <QTR16_read+0x3f4>)
 800167c:	f001 f878 	bl	8002770 <HAL_GPIO_ReadPin>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00a      	beq.n	800169c <QTR16_read+0x390>
	      //  sensor_read |= 0x00000400;
	        pos += 7000;
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	f503 53da 	add.w	r3, r3, #6976	@ 0x1b40
 800168c:	3318      	adds	r3, #24
 800168e:	617b      	str	r3, [r7, #20]
	        active++;
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	3301      	adds	r3, #1
 8001694:	613b      	str	r3, [r7, #16]
	        printf("11");
 8001696:	481c      	ldr	r0, [pc, #112]	@ (8001708 <QTR16_read+0x3fc>)
 8001698:	f003 fd72 	bl	8005180 <iprintf>
	    }
	    if (HAL_GPIO_ReadPin(SENSOR12_GPIO_Port, SENSOR12_Pin)) {
 800169c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016a0:	4817      	ldr	r0, [pc, #92]	@ (8001700 <QTR16_read+0x3f4>)
 80016a2:	f001 f865 	bl	8002770 <HAL_GPIO_ReadPin>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00c      	beq.n	80016c6 <QTR16_read+0x3ba>
	      //  sensor_read |= 0x00000800;
	        pos += 8000;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	f503 53fa 	add.w	r3, r3, #8000	@ 0x1f40
 80016b2:	617b      	str	r3, [r7, #20]
	        active++;
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	3301      	adds	r3, #1
 80016b8:	613b      	str	r3, [r7, #16]
	        last_end=0;
 80016ba:	4b14      	ldr	r3, [pc, #80]	@ (800170c <QTR16_read+0x400>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
	        printf("12");
 80016c0:	4813      	ldr	r0, [pc, #76]	@ (8001710 <QTR16_read+0x404>)
 80016c2:	f003 fd5d 	bl	8005180 <iprintf>
	        last_end = 0;
	        printf("16");
	    }
	*/
	    // Calculate the average position
	    actives = active;
 80016c6:	4a13      	ldr	r2, [pc, #76]	@ (8001714 <QTR16_read+0x408>)
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	6013      	str	r3, [r2, #0]
	     // Handle division by zero
	    //position = pos/active;
	    if (actives == 0){
 80016cc:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <QTR16_read+0x408>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d107      	bne.n	80016e4 <QTR16_read+0x3d8>
	        last_idle++;
 80016d4:	4b10      	ldr	r3, [pc, #64]	@ (8001718 <QTR16_read+0x40c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	3301      	adds	r3, #1
 80016da:	4a0f      	ldr	r2, [pc, #60]	@ (8001718 <QTR16_read+0x40c>)
 80016dc:	6013      	str	r3, [r2, #0]
	    	return -1;
 80016de:	f04f 33ff 	mov.w	r3, #4294967295
 80016e2:	e009      	b.n	80016f8 <QTR16_read+0x3ec>
	    }else
	    {
	        last_idle = 0;
 80016e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <QTR16_read+0x40c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
	    }
	    printf("helloo\n");
 80016ea:	480c      	ldr	r0, [pc, #48]	@ (800171c <QTR16_read+0x410>)
 80016ec:	f003 fdb8 	bl	8005260 <puts>

	   // HAL_Delay(10);

	    return   pos / active ;
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	fb92 f3f3 	sdiv	r3, r2, r3
	    //return 0;



	}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40020400 	.word	0x40020400
 8001704:	080071d8 	.word	0x080071d8
 8001708:	080071dc 	.word	0x080071dc
 800170c:	200002a0 	.word	0x200002a0
 8001710:	080071e0 	.word	0x080071e0
 8001714:	200002a8 	.word	0x200002a8
 8001718:	200002a4 	.word	0x200002a4
 800171c:	080071e4 	.word	0x080071e4

08001720 <sharp_turn>:


	void sharp_turn () {
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0

			if (last_idle < 10)   //last idle increments while no sensor reads a line and causes bot to turn to find line
 8001724:	4b1e      	ldr	r3, [pc, #120]	@ (80017a0 <sharp_turn+0x80>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b09      	cmp	r3, #9
 800172a:	dc11      	bgt.n	8001750 <sharp_turn+0x30>
			{						// set to handle curves
				if (last_end == 0) //last end tells which side of sensor array last saw the line
 800172c:	4b1d      	ldr	r3, [pc, #116]	@ (80017a4 <sharp_turn+0x84>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d106      	bne.n	8001742 <sharp_turn+0x22>
					motor_control(200, 500);
 8001734:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 8001780 <sharp_turn+0x60>
 8001738:	ed9f 0b13 	vldr	d0, [pc, #76]	@ 8001788 <sharp_turn+0x68>
 800173c:	f7ff fd5e 	bl	80011fc <motor_control>
 8001740:	e017      	b.n	8001772 <sharp_turn+0x52>
				else
					motor_control(500, 200);
 8001742:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 8001788 <sharp_turn+0x68>
 8001746:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8001780 <sharp_turn+0x60>
 800174a:	f7ff fd57 	bl	80011fc <motor_control>
 800174e:	e010      	b.n	8001772 <sharp_turn+0x52>
				//tune the values to handle the curves
			}
			else //set to handle sharp turns
			{
				if (last_end == 0)
 8001750:	4b14      	ldr	r3, [pc, #80]	@ (80017a4 <sharp_turn+0x84>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d106      	bne.n	8001766 <sharp_turn+0x46>
					motor_control(-230, 1000);// tune the values to handle the sharp turns
 8001758:	ed9f 1b0d 	vldr	d1, [pc, #52]	@ 8001790 <sharp_turn+0x70>
 800175c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8001798 <sharp_turn+0x78>
 8001760:	f7ff fd4c 	bl	80011fc <motor_control>
 8001764:	e005      	b.n	8001772 <sharp_turn+0x52>
				else
					motor_control(1000, -230);
 8001766:	ed9f 1b0c 	vldr	d1, [pc, #48]	@ 8001798 <sharp_turn+0x78>
 800176a:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 8001790 <sharp_turn+0x70>
 800176e:	f7ff fd45 	bl	80011fc <motor_control>
			}
			printf("Sharp turn");
 8001772:	480d      	ldr	r0, [pc, #52]	@ (80017a8 <sharp_turn+0x88>)
 8001774:	f003 fd04 	bl	8005180 <iprintf>
		}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	f3af 8000 	nop.w
 8001780:	00000000 	.word	0x00000000
 8001784:	407f4000 	.word	0x407f4000
 8001788:	00000000 	.word	0x00000000
 800178c:	40690000 	.word	0x40690000
 8001790:	00000000 	.word	0x00000000
 8001794:	408f4000 	.word	0x408f4000
 8001798:	00000000 	.word	0x00000000
 800179c:	c06cc000 	.word	0xc06cc000
 80017a0:	200002a4 	.word	0x200002a4
 80017a4:	200002a0 	.word	0x200002a0
 80017a8:	080071ec 	.word	0x080071ec

080017ac <forward_brake>:

	void forward_brake(int pos_right, int pos_left)
	{
 80017ac:	b5b0      	push	{r4, r5, r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
		if (actives == 0)
 80017b6:	4b0d      	ldr	r3, [pc, #52]	@ (80017ec <forward_brake+0x40>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d102      	bne.n	80017c4 <forward_brake+0x18>
			sharp_turn();
 80017be:	f7ff ffaf 	bl	8001720 <sharp_turn>
		else
		  motor_control(pos_right, pos_left);
	}
 80017c2:	e00f      	b.n	80017e4 <forward_brake+0x38>
		  motor_control(pos_right, pos_left);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7fe feb5 	bl	8000534 <__aeabi_i2d>
 80017ca:	4604      	mov	r4, r0
 80017cc:	460d      	mov	r5, r1
 80017ce:	6838      	ldr	r0, [r7, #0]
 80017d0:	f7fe feb0 	bl	8000534 <__aeabi_i2d>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	ec43 2b11 	vmov	d1, r2, r3
 80017dc:	ec45 4b10 	vmov	d0, r4, r5
 80017e0:	f7ff fd0c 	bl	80011fc <motor_control>
	}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bdb0      	pop	{r4, r5, r7, pc}
 80017ec:	200002a8 	.word	0x200002a8

080017f0 <errors_sum>:
	int errors_sum (int index, int abs)
	{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
	  int sum = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
	  for (int i = 0; i < index; i++)
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	e01a      	b.n	800183a <errors_sum+0x4a>
	  {
	    if (abs == 1 && errors[i] < 0)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d10d      	bne.n	8001826 <errors_sum+0x36>
 800180a:	4a11      	ldr	r2, [pc, #68]	@ (8001850 <errors_sum+0x60>)
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001812:	2b00      	cmp	r3, #0
 8001814:	da07      	bge.n	8001826 <errors_sum+0x36>
	      sum += -errors[i];
 8001816:	4a0e      	ldr	r2, [pc, #56]	@ (8001850 <errors_sum+0x60>)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	e006      	b.n	8001834 <errors_sum+0x44>
	    else
	      sum += errors[i];
 8001826:	4a0a      	ldr	r2, [pc, #40]	@ (8001850 <errors_sum+0x60>)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	4413      	add	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]
	  for (int i = 0; i < index; i++)
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	3301      	adds	r3, #1
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	429a      	cmp	r2, r3
 8001840:	dbe0      	blt.n	8001804 <errors_sum+0x14>
	  }
	  return sum;
 8001842:	68fb      	ldr	r3, [r7, #12]
	}
 8001844:	4618      	mov	r0, r3
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	20000278 	.word	0x20000278

08001854 <past_errors>:
	void past_errors (int error)
		{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
		  for (int i = 9; i > 0; i--)
 800185c:	2309      	movs	r3, #9
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	e00b      	b.n	800187a <past_errors+0x26>
			  errors[i] = errors[i-1];
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	3b01      	subs	r3, #1
 8001866:	4a0b      	ldr	r2, [pc, #44]	@ (8001894 <past_errors+0x40>)
 8001868:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800186c:	4909      	ldr	r1, [pc, #36]	@ (8001894 <past_errors+0x40>)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  for (int i = 9; i > 0; i--)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	3b01      	subs	r3, #1
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2b00      	cmp	r3, #0
 800187e:	dcf0      	bgt.n	8001862 <past_errors+0xe>
		  errors[0] = error;
 8001880:	4a04      	ldr	r2, [pc, #16]	@ (8001894 <past_errors+0x40>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6013      	str	r3, [r2, #0]
		}
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20000278 	.word	0x20000278

08001898 <PID_control>:
		  sum += errors[i];
	  }
	  return sum;
	}//*/

	void PID_control() {
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
		uint32_t position = QTR16_read();
 800189e:	f7ff fd35 	bl	800130c <QTR16_read>
 80018a2:	4603      	mov	r3, r0
 80018a4:	60fb      	str	r3, [r7, #12]
	  int error = (4500) - position;  // needs to be changed for 16 array?
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f5c3 538c 	rsb	r3, r3, #4480	@ 0x1180
 80018ac:	3314      	adds	r3, #20
 80018ae:	60bb      	str	r3, [r7, #8]
		past_errors(error);
 80018b0:	68b8      	ldr	r0, [r7, #8]
 80018b2:	f7ff ffcf 	bl	8001854 <past_errors>



	  P = error;
 80018b6:	4a46      	ldr	r2, [pc, #280]	@ (80019d0 <PID_control+0x138>)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	6013      	str	r3, [r2, #0]
	  I = //errors_sum(50, 0);
	  D = error - lastError;
 80018bc:	4b45      	ldr	r3, [pc, #276]	@ (80019d4 <PID_control+0x13c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68ba      	ldr	r2, [r7, #8]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	4a44      	ldr	r2, [pc, #272]	@ (80019d8 <PID_control+0x140>)
 80018c6:	6013      	str	r3, [r2, #0]
	  I = //errors_sum(50, 0);
 80018c8:	4b43      	ldr	r3, [pc, #268]	@ (80019d8 <PID_control+0x140>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a43      	ldr	r2, [pc, #268]	@ (80019dc <PID_control+0x144>)
 80018ce:	6013      	str	r3, [r2, #0]
	  R = errors_sum(2, 1);
 80018d0:	2101      	movs	r1, #1
 80018d2:	2002      	movs	r0, #2
 80018d4:	f7ff ff8c 	bl	80017f0 <errors_sum>
 80018d8:	4603      	mov	r3, r0
 80018da:	4a41      	ldr	r2, [pc, #260]	@ (80019e0 <PID_control+0x148>)
 80018dc:	6013      	str	r3, [r2, #0]
	  lastError = error;
 80018de:	4a3d      	ldr	r2, [pc, #244]	@ (80019d4 <PID_control+0x13c>)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	6013      	str	r3, [r2, #0]


	  int motorspeed = P*Kp + I*Ki + D*Kd;
 80018e4:	4b3a      	ldr	r3, [pc, #232]	@ (80019d0 <PID_control+0x138>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	ee07 3a90 	vmov	s15, r3
 80018ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018f0:	4b3c      	ldr	r3, [pc, #240]	@ (80019e4 <PID_control+0x14c>)
 80018f2:	edd3 7a00 	vldr	s15, [r3]
 80018f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018fa:	4b38      	ldr	r3, [pc, #224]	@ (80019dc <PID_control+0x144>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	ee07 3a90 	vmov	s15, r3
 8001902:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001906:	4b38      	ldr	r3, [pc, #224]	@ (80019e8 <PID_control+0x150>)
 8001908:	edd3 7a00 	vldr	s15, [r3]
 800190c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001910:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001914:	4b30      	ldr	r3, [pc, #192]	@ (80019d8 <PID_control+0x140>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	ee07 3a90 	vmov	s15, r3
 800191c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001920:	4b32      	ldr	r3, [pc, #200]	@ (80019ec <PID_control+0x154>)
 8001922:	edd3 7a00 	vldr	s15, [r3]
 8001926:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800192a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800192e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001932:	ee17 3a90 	vmov	r3, s15
 8001936:	607b      	str	r3, [r7, #4]

	  int motorspeedl = basespeedl + motorspeed - R*Kr;
 8001938:	4b2d      	ldr	r3, [pc, #180]	@ (80019f0 <PID_control+0x158>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4413      	add	r3, r2
 8001940:	ee07 3a90 	vmov	s15, r3
 8001944:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001948:	4b25      	ldr	r3, [pc, #148]	@ (80019e0 <PID_control+0x148>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	ee07 3a90 	vmov	s15, r3
 8001950:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001954:	4b27      	ldr	r3, [pc, #156]	@ (80019f4 <PID_control+0x15c>)
 8001956:	edd3 7a00 	vldr	s15, [r3]
 800195a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800195e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001962:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001966:	ee17 3a90 	vmov	r3, s15
 800196a:	617b      	str	r3, [r7, #20]
	  int motorspeedr = basespeedr - motorspeed - R*Kr;
 800196c:	4b22      	ldr	r3, [pc, #136]	@ (80019f8 <PID_control+0x160>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	ee07 3a90 	vmov	s15, r3
 8001978:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800197c:	4b18      	ldr	r3, [pc, #96]	@ (80019e0 <PID_control+0x148>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	ee07 3a90 	vmov	s15, r3
 8001984:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001988:	4b1a      	ldr	r3, [pc, #104]	@ (80019f4 <PID_control+0x15c>)
 800198a:	edd3 7a00 	vldr	s15, [r3]
 800198e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001992:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001996:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800199a:	ee17 3a90 	vmov	r3, s15
 800199e:	613b      	str	r3, [r7, #16]

	  if (motorspeedl > maxspeedl){   //implement antiwindup for potential speed increase and acuracy?
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	4b16      	ldr	r3, [pc, #88]	@ (80019fc <PID_control+0x164>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d902      	bls.n	80019b0 <PID_control+0x118>
		motorspeedl = maxspeedl;
 80019aa:	4b14      	ldr	r3, [pc, #80]	@ (80019fc <PID_control+0x164>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	617b      	str	r3, [r7, #20]
	  }
	  if (motorspeedr > maxspeedr){
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4b13      	ldr	r3, [pc, #76]	@ (8001a00 <PID_control+0x168>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d902      	bls.n	80019c0 <PID_control+0x128>
		motorspeedr = maxspeedr;
 80019ba:	4b11      	ldr	r3, [pc, #68]	@ (8001a00 <PID_control+0x168>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	613b      	str	r3, [r7, #16]
	  }
	  //printf("Motor SPEEDS : %d %d", motorspeedl, motorspeedr);

		forward_brake(motorspeedr, motorspeedl);
 80019c0:	6979      	ldr	r1, [r7, #20]
 80019c2:	6938      	ldr	r0, [r7, #16]
 80019c4:	f7ff fef2 	bl	80017ac <forward_brake>
	}
 80019c8:	bf00      	nop
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000264 	.word	0x20000264
 80019d4:	20000274 	.word	0x20000274
 80019d8:	2000026c 	.word	0x2000026c
 80019dc:	20000268 	.word	0x20000268
 80019e0:	20000270 	.word	0x20000270
 80019e4:	20000000 	.word	0x20000000
 80019e8:	20000260 	.word	0x20000260
 80019ec:	20000004 	.word	0x20000004
 80019f0:	20000018 	.word	0x20000018
 80019f4:	20000008 	.word	0x20000008
 80019f8:	20000014 	.word	0x20000014
 80019fc:	20000010 	.word	0x20000010
 8001a00:	2000000c 	.word	0x2000000c

08001a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a0a:	f000 fbd5 	bl	80021b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a0e:	f000 f83f 	bl	8001a90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a12:	f7ff fa69 	bl	8000ee8 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001a16:	f000 fa3f 	bl	8001e98 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001a1a:	f000 f9bd 	bl	8001d98 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001a1e:	f000 fb2f 	bl	8002080 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001a22:	f7ff faf5 	bl	8001010 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001a26:	213c      	movs	r1, #60	@ 0x3c
 8001a28:	4814      	ldr	r0, [pc, #80]	@ (8001a7c <main+0x78>)
 8001a2a:	f001 fe6d 	bl	8003708 <HAL_TIM_Encoder_Start>
 // HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4813      	ldr	r0, [pc, #76]	@ (8001a80 <main+0x7c>)
 8001a32:	f001 fd13 	bl	800345c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001a36:	2104      	movs	r1, #4
 8001a38:	4811      	ldr	r0, [pc, #68]	@ (8001a80 <main+0x7c>)
 8001a3a:	f001 fd0f 	bl	800345c <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 //QTR16_read();
	  PID_control();
 8001a3e:	f7ff ff2b 	bl	8001898 <PID_control>
	  DELAY_US(200);
 8001a42:	4b10      	ldr	r3, [pc, #64]	@ (8001a84 <main+0x80>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	4b0f      	ldr	r3, [pc, #60]	@ (8001a88 <main+0x84>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0f      	ldr	r2, [pc, #60]	@ (8001a8c <main+0x88>)
 8001a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a52:	0c9b      	lsrs	r3, r3, #18
 8001a54:	22c8      	movs	r2, #200	@ 0xc8
 8001a56:	fb03 f202 	mul.w	r2, r3, r2
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a88 <main+0x84>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	490b      	ldr	r1, [pc, #44]	@ (8001a8c <main+0x88>)
 8001a60:	fba1 1303 	umull	r1, r3, r1, r3
 8001a64:	0c9b      	lsrs	r3, r3, #18
 8001a66:	085b      	lsrs	r3, r3, #1
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	4b05      	ldr	r3, [pc, #20]	@ (8001a84 <main+0x80>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d8f8      	bhi.n	8001a6c <main+0x68>
	  PID_control();
 8001a7a:	e7e0      	b.n	8001a3e <main+0x3a>
 8001a7c:	200002f8 	.word	0x200002f8
 8001a80:	200002b0 	.word	0x200002b0
 8001a84:	e000e010 	.word	0xe000e010
 8001a88:	2000001c 	.word	0x2000001c
 8001a8c:	431bde83 	.word	0x431bde83

08001a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b094      	sub	sp, #80	@ 0x50
 8001a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a96:	f107 0320 	add.w	r3, r7, #32
 8001a9a:	2230      	movs	r2, #48	@ 0x30
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f003 fcbe 	bl	8005420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa4:	f107 030c 	add.w	r3, r7, #12
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	4b28      	ldr	r3, [pc, #160]	@ (8001b5c <SystemClock_Config+0xcc>)
 8001aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abc:	4a27      	ldr	r2, [pc, #156]	@ (8001b5c <SystemClock_Config+0xcc>)
 8001abe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ac4:	4b25      	ldr	r3, [pc, #148]	@ (8001b5c <SystemClock_Config+0xcc>)
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	4b22      	ldr	r3, [pc, #136]	@ (8001b60 <SystemClock_Config+0xd0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001adc:	4a20      	ldr	r2, [pc, #128]	@ (8001b60 <SystemClock_Config+0xd0>)
 8001ade:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b60 <SystemClock_Config+0xd0>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001af0:	2301      	movs	r3, #1
 8001af2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001af4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001af8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001afa:	2302      	movs	r3, #2
 8001afc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001afe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001b04:	2319      	movs	r3, #25
 8001b06:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b08:	23a8      	movs	r3, #168	@ 0xa8
 8001b0a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b10:	2304      	movs	r3, #4
 8001b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b14:	f107 0320 	add.w	r3, r7, #32
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f000 ff9f 	bl	8002a5c <HAL_RCC_OscConfig>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001b24:	f000 f81e 	bl	8001b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b28:	230f      	movs	r3, #15
 8001b2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b3e:	f107 030c 	add.w	r3, r7, #12
 8001b42:	2102      	movs	r1, #2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f001 fa01 	bl	8002f4c <HAL_RCC_ClockConfig>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001b50:	f000 f808 	bl	8001b64 <Error_Handler>
  }
}
 8001b54:	bf00      	nop
 8001b56:	3750      	adds	r7, #80	@ 0x50
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40007000 	.word	0x40007000

08001b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b68:	b672      	cpsid	i
}
 8001b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b6c:	bf00      	nop
 8001b6e:	e7fd      	b.n	8001b6c <Error_Handler+0x8>

08001b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
 8001b7a:	4b10      	ldr	r3, [pc, #64]	@ (8001bbc <HAL_MspInit+0x4c>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7e:	4a0f      	ldr	r2, [pc, #60]	@ (8001bbc <HAL_MspInit+0x4c>)
 8001b80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b86:	4b0d      	ldr	r3, [pc, #52]	@ (8001bbc <HAL_MspInit+0x4c>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	603b      	str	r3, [r7, #0]
 8001b96:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <HAL_MspInit+0x4c>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9a:	4a08      	ldr	r2, [pc, #32]	@ (8001bbc <HAL_MspInit+0x4c>)
 8001b9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ba2:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <HAL_MspInit+0x4c>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001baa:	603b      	str	r3, [r7, #0]
 8001bac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800

08001bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bc4:	bf00      	nop
 8001bc6:	e7fd      	b.n	8001bc4 <NMI_Handler+0x4>

08001bc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <HardFault_Handler+0x4>

08001bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <MemManage_Handler+0x4>

08001bd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bdc:	bf00      	nop
 8001bde:	e7fd      	b.n	8001bdc <BusFault_Handler+0x4>

08001be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be4:	bf00      	nop
 8001be6:	e7fd      	b.n	8001be4 <UsageFault_Handler+0x4>

08001be8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c16:	f000 fb21 	bl	800225c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0
  return 1;
 8001c22:	2301      	movs	r3, #1
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <_kill>:

int _kill(int pid, int sig)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c38:	f003 fc44 	bl	80054c4 <__errno>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2216      	movs	r2, #22
 8001c40:	601a      	str	r2, [r3, #0]
  return -1;
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <_exit>:

void _exit (int status)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c56:	f04f 31ff 	mov.w	r1, #4294967295
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff ffe7 	bl	8001c2e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c60:	bf00      	nop
 8001c62:	e7fd      	b.n	8001c60 <_exit+0x12>

08001c64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	e00a      	b.n	8001c8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c76:	f3af 8000 	nop.w
 8001c7a:	4601      	mov	r1, r0
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	60ba      	str	r2, [r7, #8]
 8001c82:	b2ca      	uxtb	r2, r1
 8001c84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	dbf0      	blt.n	8001c76 <_read+0x12>
  }

  return len;
 8001c94:	687b      	ldr	r3, [r7, #4]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <_close>:
  }
  return len;
}

int _close(int file)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ca6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cc6:	605a      	str	r2, [r3, #4]
  return 0;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <_isatty>:

int _isatty(int file)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cde:	2301      	movs	r3, #1
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d10:	4a14      	ldr	r2, [pc, #80]	@ (8001d64 <_sbrk+0x5c>)
 8001d12:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <_sbrk+0x60>)
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d1c:	4b13      	ldr	r3, [pc, #76]	@ (8001d6c <_sbrk+0x64>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d102      	bne.n	8001d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d24:	4b11      	ldr	r3, [pc, #68]	@ (8001d6c <_sbrk+0x64>)
 8001d26:	4a12      	ldr	r2, [pc, #72]	@ (8001d70 <_sbrk+0x68>)
 8001d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d2a:	4b10      	ldr	r3, [pc, #64]	@ (8001d6c <_sbrk+0x64>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d207      	bcs.n	8001d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d38:	f003 fbc4 	bl	80054c4 <__errno>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	220c      	movs	r2, #12
 8001d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d42:	f04f 33ff 	mov.w	r3, #4294967295
 8001d46:	e009      	b.n	8001d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d48:	4b08      	ldr	r3, [pc, #32]	@ (8001d6c <_sbrk+0x64>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d4e:	4b07      	ldr	r3, [pc, #28]	@ (8001d6c <_sbrk+0x64>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	4a05      	ldr	r2, [pc, #20]	@ (8001d6c <_sbrk+0x64>)
 8001d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20010000 	.word	0x20010000
 8001d68:	00000400 	.word	0x00000400
 8001d6c:	200002ac 	.word	0x200002ac
 8001d70:	200004d8 	.word	0x200004d8

08001d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d78:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <SystemInit+0x20>)
 8001d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d7e:	4a05      	ldr	r2, [pc, #20]	@ (8001d94 <SystemInit+0x20>)
 8001d80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08e      	sub	sp, #56	@ 0x38
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
 8001da8:	609a      	str	r2, [r3, #8]
 8001daa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dac:	f107 0320 	add.w	r3, r7, #32
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001db6:	1d3b      	adds	r3, r7, #4
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
 8001dc4:	615a      	str	r2, [r3, #20]
 8001dc6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dc8:	4b32      	ldr	r3, [pc, #200]	@ (8001e94 <MX_TIM2_Init+0xfc>)
 8001dca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001dce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001dd0:	4b30      	ldr	r3, [pc, #192]	@ (8001e94 <MX_TIM2_Init+0xfc>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd6:	4b2f      	ldr	r3, [pc, #188]	@ (8001e94 <MX_TIM2_Init+0xfc>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1023;
 8001ddc:	4b2d      	ldr	r3, [pc, #180]	@ (8001e94 <MX_TIM2_Init+0xfc>)
 8001dde:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8001de2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de4:	4b2b      	ldr	r3, [pc, #172]	@ (8001e94 <MX_TIM2_Init+0xfc>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dea:	4b2a      	ldr	r3, [pc, #168]	@ (8001e94 <MX_TIM2_Init+0xfc>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001df0:	4828      	ldr	r0, [pc, #160]	@ (8001e94 <MX_TIM2_Init+0xfc>)
 8001df2:	f001 fa8b 	bl	800330c <HAL_TIM_Base_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001dfc:	f7ff feb2 	bl	8001b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e04:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4821      	ldr	r0, [pc, #132]	@ (8001e94 <MX_TIM2_Init+0xfc>)
 8001e0e:	f001 fdcb 	bl	80039a8 <HAL_TIM_ConfigClockSource>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001e18:	f7ff fea4 	bl	8001b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e1c:	481d      	ldr	r0, [pc, #116]	@ (8001e94 <MX_TIM2_Init+0xfc>)
 8001e1e:	f001 fac4 	bl	80033aa <HAL_TIM_PWM_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001e28:	f7ff fe9c 	bl	8001b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e34:	f107 0320 	add.w	r3, r7, #32
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4816      	ldr	r0, [pc, #88]	@ (8001e94 <MX_TIM2_Init+0xfc>)
 8001e3c:	f002 f954 	bl	80040e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001e46:	f7ff fe8d 	bl	8001b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e4a:	2360      	movs	r3, #96	@ 0x60
 8001e4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e5a:	1d3b      	adds	r3, r7, #4
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	4619      	mov	r1, r3
 8001e60:	480c      	ldr	r0, [pc, #48]	@ (8001e94 <MX_TIM2_Init+0xfc>)
 8001e62:	f001 fcdf 	bl	8003824 <HAL_TIM_PWM_ConfigChannel>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001e6c:	f7ff fe7a 	bl	8001b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e70:	1d3b      	adds	r3, r7, #4
 8001e72:	2204      	movs	r2, #4
 8001e74:	4619      	mov	r1, r3
 8001e76:	4807      	ldr	r0, [pc, #28]	@ (8001e94 <MX_TIM2_Init+0xfc>)
 8001e78:	f001 fcd4 	bl	8003824 <HAL_TIM_PWM_ConfigChannel>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001e82:	f7ff fe6f 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e86:	4803      	ldr	r0, [pc, #12]	@ (8001e94 <MX_TIM2_Init+0xfc>)
 8001e88:	f000 f8c2 	bl	8002010 <HAL_TIM_MspPostInit>

}
 8001e8c:	bf00      	nop
 8001e8e:	3738      	adds	r7, #56	@ 0x38
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	200002b0 	.word	0x200002b0

08001e98 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08c      	sub	sp, #48	@ 0x30
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e9e:	f107 030c 	add.w	r3, r7, #12
 8001ea2:	2224      	movs	r2, #36	@ 0x24
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f003 faba 	bl	8005420 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eac:	1d3b      	adds	r3, r7, #4
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001eb4:	4b20      	ldr	r3, [pc, #128]	@ (8001f38 <MX_TIM3_Init+0xa0>)
 8001eb6:	4a21      	ldr	r2, [pc, #132]	@ (8001f3c <MX_TIM3_Init+0xa4>)
 8001eb8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001eba:	4b1f      	ldr	r3, [pc, #124]	@ (8001f38 <MX_TIM3_Init+0xa0>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f38 <MX_TIM3_Init+0xa0>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f38 <MX_TIM3_Init+0xa0>)
 8001ec8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ecc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ece:	4b1a      	ldr	r3, [pc, #104]	@ (8001f38 <MX_TIM3_Init+0xa0>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ed4:	4b18      	ldr	r3, [pc, #96]	@ (8001f38 <MX_TIM3_Init+0xa0>)
 8001ed6:	2280      	movs	r2, #128	@ 0x80
 8001ed8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001eda:	2303      	movs	r3, #3
 8001edc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001eea:	230a      	movs	r3, #10
 8001eec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001efe:	f107 030c 	add.w	r3, r7, #12
 8001f02:	4619      	mov	r1, r3
 8001f04:	480c      	ldr	r0, [pc, #48]	@ (8001f38 <MX_TIM3_Init+0xa0>)
 8001f06:	f001 fb59 	bl	80035bc <HAL_TIM_Encoder_Init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001f10:	f7ff fe28 	bl	8001b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f14:	2300      	movs	r3, #0
 8001f16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4805      	ldr	r0, [pc, #20]	@ (8001f38 <MX_TIM3_Init+0xa0>)
 8001f22:	f002 f8e1 	bl	80040e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001f2c:	f7ff fe1a 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f30:	bf00      	nop
 8001f32:	3730      	adds	r7, #48	@ 0x30
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	200002f8 	.word	0x200002f8
 8001f3c:	40000400 	.word	0x40000400

08001f40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f50:	d10d      	bne.n	8001f6e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <HAL_TIM_Base_MspInit+0x3c>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5a:	4a08      	ldr	r2, [pc, #32]	@ (8001f7c <HAL_TIM_Base_MspInit+0x3c>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f62:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <HAL_TIM_Base_MspInit+0x3c>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001f6e:	bf00      	nop
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800

08001f80 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08a      	sub	sp, #40	@ 0x28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a19      	ldr	r2, [pc, #100]	@ (8002004 <HAL_TIM_Encoder_MspInit+0x84>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d12b      	bne.n	8001ffa <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	4b18      	ldr	r3, [pc, #96]	@ (8002008 <HAL_TIM_Encoder_MspInit+0x88>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	4a17      	ldr	r2, [pc, #92]	@ (8002008 <HAL_TIM_Encoder_MspInit+0x88>)
 8001fac:	f043 0302 	orr.w	r3, r3, #2
 8001fb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fb2:	4b15      	ldr	r3, [pc, #84]	@ (8002008 <HAL_TIM_Encoder_MspInit+0x88>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	4b11      	ldr	r3, [pc, #68]	@ (8002008 <HAL_TIM_Encoder_MspInit+0x88>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	4a10      	ldr	r2, [pc, #64]	@ (8002008 <HAL_TIM_Encoder_MspInit+0x88>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fce:	4b0e      	ldr	r3, [pc, #56]	@ (8002008 <HAL_TIM_Encoder_MspInit+0x88>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = LC1_Pin|LC2_Pin;
 8001fda:	23c0      	movs	r3, #192	@ 0xc0
 8001fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fea:	2302      	movs	r3, #2
 8001fec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fee:	f107 0314 	add.w	r3, r7, #20
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4805      	ldr	r0, [pc, #20]	@ (800200c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001ff6:	f000 fa37 	bl	8002468 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001ffa:	bf00      	nop
 8001ffc:	3728      	adds	r7, #40	@ 0x28
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40000400 	.word	0x40000400
 8002008:	40023800 	.word	0x40023800
 800200c:	40020000 	.word	0x40020000

08002010 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 030c 	add.w	r3, r7, #12
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002030:	d11d      	bne.n	800206e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	4b10      	ldr	r3, [pc, #64]	@ (8002078 <HAL_TIM_MspPostInit+0x68>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203a:	4a0f      	ldr	r2, [pc, #60]	@ (8002078 <HAL_TIM_MspPostInit+0x68>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	6313      	str	r3, [r2, #48]	@ 0x30
 8002042:	4b0d      	ldr	r3, [pc, #52]	@ (8002078 <HAL_TIM_MspPostInit+0x68>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = APWM_Pin|BPWM_Pin;
 800204e:	2303      	movs	r3, #3
 8002050:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002052:	2302      	movs	r3, #2
 8002054:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205a:	2300      	movs	r3, #0
 800205c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800205e:	2301      	movs	r3, #1
 8002060:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002062:	f107 030c 	add.w	r3, r7, #12
 8002066:	4619      	mov	r1, r3
 8002068:	4804      	ldr	r0, [pc, #16]	@ (800207c <HAL_TIM_MspPostInit+0x6c>)
 800206a:	f000 f9fd 	bl	8002468 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800206e:	bf00      	nop
 8002070:	3720      	adds	r7, #32
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800
 800207c:	40020000 	.word	0x40020000

08002080 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002084:	4b11      	ldr	r3, [pc, #68]	@ (80020cc <MX_USART2_UART_Init+0x4c>)
 8002086:	4a12      	ldr	r2, [pc, #72]	@ (80020d0 <MX_USART2_UART_Init+0x50>)
 8002088:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800208a:	4b10      	ldr	r3, [pc, #64]	@ (80020cc <MX_USART2_UART_Init+0x4c>)
 800208c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002090:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002092:	4b0e      	ldr	r3, [pc, #56]	@ (80020cc <MX_USART2_UART_Init+0x4c>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002098:	4b0c      	ldr	r3, [pc, #48]	@ (80020cc <MX_USART2_UART_Init+0x4c>)
 800209a:	2200      	movs	r2, #0
 800209c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800209e:	4b0b      	ldr	r3, [pc, #44]	@ (80020cc <MX_USART2_UART_Init+0x4c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020a4:	4b09      	ldr	r3, [pc, #36]	@ (80020cc <MX_USART2_UART_Init+0x4c>)
 80020a6:	220c      	movs	r2, #12
 80020a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020aa:	4b08      	ldr	r3, [pc, #32]	@ (80020cc <MX_USART2_UART_Init+0x4c>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b0:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <MX_USART2_UART_Init+0x4c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020b6:	4805      	ldr	r0, [pc, #20]	@ (80020cc <MX_USART2_UART_Init+0x4c>)
 80020b8:	f002 f884 	bl	80041c4 <HAL_UART_Init>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020c2:	f7ff fd4f 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000340 	.word	0x20000340
 80020d0:	40004400 	.word	0x40004400

080020d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08a      	sub	sp, #40	@ 0x28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a19      	ldr	r2, [pc, #100]	@ (8002158 <HAL_UART_MspInit+0x84>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d12b      	bne.n	800214e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	4b18      	ldr	r3, [pc, #96]	@ (800215c <HAL_UART_MspInit+0x88>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fe:	4a17      	ldr	r2, [pc, #92]	@ (800215c <HAL_UART_MspInit+0x88>)
 8002100:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002104:	6413      	str	r3, [r2, #64]	@ 0x40
 8002106:	4b15      	ldr	r3, [pc, #84]	@ (800215c <HAL_UART_MspInit+0x88>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	4b11      	ldr	r3, [pc, #68]	@ (800215c <HAL_UART_MspInit+0x88>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	4a10      	ldr	r2, [pc, #64]	@ (800215c <HAL_UART_MspInit+0x88>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	6313      	str	r3, [r2, #48]	@ 0x30
 8002122:	4b0e      	ldr	r3, [pc, #56]	@ (800215c <HAL_UART_MspInit+0x88>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800212e:	230c      	movs	r3, #12
 8002130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213a:	2303      	movs	r3, #3
 800213c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800213e:	2307      	movs	r3, #7
 8002140:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002142:	f107 0314 	add.w	r3, r7, #20
 8002146:	4619      	mov	r1, r3
 8002148:	4805      	ldr	r0, [pc, #20]	@ (8002160 <HAL_UART_MspInit+0x8c>)
 800214a:	f000 f98d 	bl	8002468 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800214e:	bf00      	nop
 8002150:	3728      	adds	r7, #40	@ 0x28
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40004400 	.word	0x40004400
 800215c:	40023800 	.word	0x40023800
 8002160:	40020000 	.word	0x40020000

08002164 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
 Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8002164:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800219c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002168:	f7ff fe04 	bl	8001d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800216c:	480c      	ldr	r0, [pc, #48]	@ (80021a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800216e:	490d      	ldr	r1, [pc, #52]	@ (80021a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002170:	4a0d      	ldr	r2, [pc, #52]	@ (80021a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002174:	e002      	b.n	800217c <LoopCopyDataInit>

08002176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800217a:	3304      	adds	r3, #4

0800217c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800217c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800217e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002180:	d3f9      	bcc.n	8002176 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002182:	4a0a      	ldr	r2, [pc, #40]	@ (80021ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002184:	4c0a      	ldr	r4, [pc, #40]	@ (80021b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002188:	e001      	b.n	800218e <LoopFillZerobss>

0800218a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800218a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800218c:	3204      	adds	r2, #4

0800218e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800218e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002190:	d3fb      	bcc.n	800218a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002192:	f003 f99d 	bl	80054d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002196:	f7ff fc35 	bl	8001a04 <main>
  bx  lr    
 800219a:	4770      	bx	lr
 Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 800219c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80021a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021a4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80021a8:	080075a8 	.word	0x080075a8
  ldr r2, =_sbss
 80021ac:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80021b0:	200004d8 	.word	0x200004d8

080021b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021b4:	e7fe      	b.n	80021b4 <ADC_IRQHandler>
	...

080021b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021bc:	4b0e      	ldr	r3, [pc, #56]	@ (80021f8 <HAL_Init+0x40>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a0d      	ldr	r2, [pc, #52]	@ (80021f8 <HAL_Init+0x40>)
 80021c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021c8:	4b0b      	ldr	r3, [pc, #44]	@ (80021f8 <HAL_Init+0x40>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a0a      	ldr	r2, [pc, #40]	@ (80021f8 <HAL_Init+0x40>)
 80021ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021d4:	4b08      	ldr	r3, [pc, #32]	@ (80021f8 <HAL_Init+0x40>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a07      	ldr	r2, [pc, #28]	@ (80021f8 <HAL_Init+0x40>)
 80021da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e0:	2003      	movs	r0, #3
 80021e2:	f000 f90d 	bl	8002400 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021e6:	200f      	movs	r0, #15
 80021e8:	f000 f808 	bl	80021fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021ec:	f7ff fcc0 	bl	8001b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40023c00 	.word	0x40023c00

080021fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002204:	4b12      	ldr	r3, [pc, #72]	@ (8002250 <HAL_InitTick+0x54>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b12      	ldr	r3, [pc, #72]	@ (8002254 <HAL_InitTick+0x58>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4619      	mov	r1, r3
 800220e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002212:	fbb3 f3f1 	udiv	r3, r3, r1
 8002216:	fbb2 f3f3 	udiv	r3, r2, r3
 800221a:	4618      	mov	r0, r3
 800221c:	f000 f917 	bl	800244e <HAL_SYSTICK_Config>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e00e      	b.n	8002248 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b0f      	cmp	r3, #15
 800222e:	d80a      	bhi.n	8002246 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002230:	2200      	movs	r2, #0
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
 8002238:	f000 f8ed 	bl	8002416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800223c:	4a06      	ldr	r2, [pc, #24]	@ (8002258 <HAL_InitTick+0x5c>)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	e000      	b.n	8002248 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	2000001c 	.word	0x2000001c
 8002254:	20000024 	.word	0x20000024
 8002258:	20000020 	.word	0x20000020

0800225c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002260:	4b06      	ldr	r3, [pc, #24]	@ (800227c <HAL_IncTick+0x20>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	4b06      	ldr	r3, [pc, #24]	@ (8002280 <HAL_IncTick+0x24>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4413      	add	r3, r2
 800226c:	4a04      	ldr	r2, [pc, #16]	@ (8002280 <HAL_IncTick+0x24>)
 800226e:	6013      	str	r3, [r2, #0]
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	20000024 	.word	0x20000024
 8002280:	20000388 	.word	0x20000388

08002284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return uwTick;
 8002288:	4b03      	ldr	r3, [pc, #12]	@ (8002298 <HAL_GetTick+0x14>)
 800228a:	681b      	ldr	r3, [r3, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	20000388 	.word	0x20000388

0800229c <__NVIC_SetPriorityGrouping>:
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022ac:	4b0c      	ldr	r3, [pc, #48]	@ (80022e0 <__NVIC_SetPriorityGrouping+0x44>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022b8:	4013      	ands	r3, r2
 80022ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ce:	4a04      	ldr	r2, [pc, #16]	@ (80022e0 <__NVIC_SetPriorityGrouping+0x44>)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	60d3      	str	r3, [r2, #12]
}
 80022d4:	bf00      	nop
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <__NVIC_GetPriorityGrouping>:
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e8:	4b04      	ldr	r3, [pc, #16]	@ (80022fc <__NVIC_GetPriorityGrouping+0x18>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	0a1b      	lsrs	r3, r3, #8
 80022ee:	f003 0307 	and.w	r3, r3, #7
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <__NVIC_SetPriority>:
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	6039      	str	r1, [r7, #0]
 800230a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800230c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002310:	2b00      	cmp	r3, #0
 8002312:	db0a      	blt.n	800232a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	b2da      	uxtb	r2, r3
 8002318:	490c      	ldr	r1, [pc, #48]	@ (800234c <__NVIC_SetPriority+0x4c>)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	0112      	lsls	r2, r2, #4
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	440b      	add	r3, r1
 8002324:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002328:	e00a      	b.n	8002340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	b2da      	uxtb	r2, r3
 800232e:	4908      	ldr	r1, [pc, #32]	@ (8002350 <__NVIC_SetPriority+0x50>)
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	3b04      	subs	r3, #4
 8002338:	0112      	lsls	r2, r2, #4
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	440b      	add	r3, r1
 800233e:	761a      	strb	r2, [r3, #24]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000e100 	.word	0xe000e100
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <NVIC_EncodePriority>:
{
 8002354:	b480      	push	{r7}
 8002356:	b089      	sub	sp, #36	@ 0x24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f1c3 0307 	rsb	r3, r3, #7
 800236e:	2b04      	cmp	r3, #4
 8002370:	bf28      	it	cs
 8002372:	2304      	movcs	r3, #4
 8002374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3304      	adds	r3, #4
 800237a:	2b06      	cmp	r3, #6
 800237c:	d902      	bls.n	8002384 <NVIC_EncodePriority+0x30>
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3b03      	subs	r3, #3
 8002382:	e000      	b.n	8002386 <NVIC_EncodePriority+0x32>
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	f04f 32ff 	mov.w	r2, #4294967295
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43da      	mvns	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	401a      	ands	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800239c:	f04f 31ff 	mov.w	r1, #4294967295
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	43d9      	mvns	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	4313      	orrs	r3, r2
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3724      	adds	r7, #36	@ 0x24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <SysTick_Config>:
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023cc:	d301      	bcc.n	80023d2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80023ce:	2301      	movs	r3, #1
 80023d0:	e00f      	b.n	80023f2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023d2:	4a0a      	ldr	r2, [pc, #40]	@ (80023fc <SysTick_Config+0x40>)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023da:	210f      	movs	r1, #15
 80023dc:	f04f 30ff 	mov.w	r0, #4294967295
 80023e0:	f7ff ff8e 	bl	8002300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e4:	4b05      	ldr	r3, [pc, #20]	@ (80023fc <SysTick_Config+0x40>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ea:	4b04      	ldr	r3, [pc, #16]	@ (80023fc <SysTick_Config+0x40>)
 80023ec:	2207      	movs	r2, #7
 80023ee:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	e000e010 	.word	0xe000e010

08002400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff ff47 	bl	800229c <__NVIC_SetPriorityGrouping>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002416:	b580      	push	{r7, lr}
 8002418:	b086      	sub	sp, #24
 800241a:	af00      	add	r7, sp, #0
 800241c:	4603      	mov	r3, r0
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002428:	f7ff ff5c 	bl	80022e4 <__NVIC_GetPriorityGrouping>
 800242c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68b9      	ldr	r1, [r7, #8]
 8002432:	6978      	ldr	r0, [r7, #20]
 8002434:	f7ff ff8e 	bl	8002354 <NVIC_EncodePriority>
 8002438:	4602      	mov	r2, r0
 800243a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243e:	4611      	mov	r1, r2
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff5d 	bl	8002300 <__NVIC_SetPriority>
}
 8002446:	bf00      	nop
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff ffb0 	bl	80023bc <SysTick_Config>
 800245c:	4603      	mov	r3, r0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002468:	b480      	push	{r7}
 800246a:	b089      	sub	sp, #36	@ 0x24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002476:	2300      	movs	r3, #0
 8002478:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800247a:	2300      	movs	r3, #0
 800247c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
 8002482:	e159      	b.n	8002738 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002484:	2201      	movs	r2, #1
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	4013      	ands	r3, r2
 8002496:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	429a      	cmp	r2, r3
 800249e:	f040 8148 	bne.w	8002732 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d005      	beq.n	80024ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d130      	bne.n	800251c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	2203      	movs	r2, #3
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024f0:	2201      	movs	r2, #1
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	f003 0201 	and.w	r2, r3, #1
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	2b03      	cmp	r3, #3
 8002526:	d017      	beq.n	8002558 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	2203      	movs	r2, #3
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d123      	bne.n	80025ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	08da      	lsrs	r2, r3, #3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3208      	adds	r2, #8
 800256c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002570:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	220f      	movs	r2, #15
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	08da      	lsrs	r2, r3, #3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3208      	adds	r2, #8
 80025a6:	69b9      	ldr	r1, [r7, #24]
 80025a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	2203      	movs	r2, #3
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 0203 	and.w	r2, r3, #3
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80a2 	beq.w	8002732 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	4b57      	ldr	r3, [pc, #348]	@ (8002750 <HAL_GPIO_Init+0x2e8>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f6:	4a56      	ldr	r2, [pc, #344]	@ (8002750 <HAL_GPIO_Init+0x2e8>)
 80025f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80025fe:	4b54      	ldr	r3, [pc, #336]	@ (8002750 <HAL_GPIO_Init+0x2e8>)
 8002600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002602:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800260a:	4a52      	ldr	r2, [pc, #328]	@ (8002754 <HAL_GPIO_Init+0x2ec>)
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	089b      	lsrs	r3, r3, #2
 8002610:	3302      	adds	r3, #2
 8002612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	220f      	movs	r2, #15
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a49      	ldr	r2, [pc, #292]	@ (8002758 <HAL_GPIO_Init+0x2f0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d019      	beq.n	800266a <HAL_GPIO_Init+0x202>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a48      	ldr	r2, [pc, #288]	@ (800275c <HAL_GPIO_Init+0x2f4>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d013      	beq.n	8002666 <HAL_GPIO_Init+0x1fe>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a47      	ldr	r2, [pc, #284]	@ (8002760 <HAL_GPIO_Init+0x2f8>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d00d      	beq.n	8002662 <HAL_GPIO_Init+0x1fa>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a46      	ldr	r2, [pc, #280]	@ (8002764 <HAL_GPIO_Init+0x2fc>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d007      	beq.n	800265e <HAL_GPIO_Init+0x1f6>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a45      	ldr	r2, [pc, #276]	@ (8002768 <HAL_GPIO_Init+0x300>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d101      	bne.n	800265a <HAL_GPIO_Init+0x1f2>
 8002656:	2304      	movs	r3, #4
 8002658:	e008      	b.n	800266c <HAL_GPIO_Init+0x204>
 800265a:	2307      	movs	r3, #7
 800265c:	e006      	b.n	800266c <HAL_GPIO_Init+0x204>
 800265e:	2303      	movs	r3, #3
 8002660:	e004      	b.n	800266c <HAL_GPIO_Init+0x204>
 8002662:	2302      	movs	r3, #2
 8002664:	e002      	b.n	800266c <HAL_GPIO_Init+0x204>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <HAL_GPIO_Init+0x204>
 800266a:	2300      	movs	r3, #0
 800266c:	69fa      	ldr	r2, [r7, #28]
 800266e:	f002 0203 	and.w	r2, r2, #3
 8002672:	0092      	lsls	r2, r2, #2
 8002674:	4093      	lsls	r3, r2
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800267c:	4935      	ldr	r1, [pc, #212]	@ (8002754 <HAL_GPIO_Init+0x2ec>)
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	089b      	lsrs	r3, r3, #2
 8002682:	3302      	adds	r3, #2
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800268a:	4b38      	ldr	r3, [pc, #224]	@ (800276c <HAL_GPIO_Init+0x304>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ae:	4a2f      	ldr	r2, [pc, #188]	@ (800276c <HAL_GPIO_Init+0x304>)
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026b4:	4b2d      	ldr	r3, [pc, #180]	@ (800276c <HAL_GPIO_Init+0x304>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026d8:	4a24      	ldr	r2, [pc, #144]	@ (800276c <HAL_GPIO_Init+0x304>)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026de:	4b23      	ldr	r3, [pc, #140]	@ (800276c <HAL_GPIO_Init+0x304>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002702:	4a1a      	ldr	r2, [pc, #104]	@ (800276c <HAL_GPIO_Init+0x304>)
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002708:	4b18      	ldr	r3, [pc, #96]	@ (800276c <HAL_GPIO_Init+0x304>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800272c:	4a0f      	ldr	r2, [pc, #60]	@ (800276c <HAL_GPIO_Init+0x304>)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3301      	adds	r3, #1
 8002736:	61fb      	str	r3, [r7, #28]
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	2b0f      	cmp	r3, #15
 800273c:	f67f aea2 	bls.w	8002484 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002740:	bf00      	nop
 8002742:	bf00      	nop
 8002744:	3724      	adds	r7, #36	@ 0x24
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40023800 	.word	0x40023800
 8002754:	40013800 	.word	0x40013800
 8002758:	40020000 	.word	0x40020000
 800275c:	40020400 	.word	0x40020400
 8002760:	40020800 	.word	0x40020800
 8002764:	40020c00 	.word	0x40020c00
 8002768:	40021000 	.word	0x40021000
 800276c:	40013c00 	.word	0x40013c00

08002770 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	887b      	ldrh	r3, [r7, #2]
 8002782:	4013      	ands	r3, r2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002788:	2301      	movs	r3, #1
 800278a:	73fb      	strb	r3, [r7, #15]
 800278c:	e001      	b.n	8002792 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800278e:	2300      	movs	r3, #0
 8002790:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002792:	7bfb      	ldrb	r3, [r7, #15]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	807b      	strh	r3, [r7, #2]
 80027ac:	4613      	mov	r3, r2
 80027ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027b0:	787b      	ldrb	r3, [r7, #1]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027b6:	887a      	ldrh	r2, [r7, #2]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027bc:	e003      	b.n	80027c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027be:	887b      	ldrh	r3, [r7, #2]
 80027c0:	041a      	lsls	r2, r3, #16
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	619a      	str	r2, [r3, #24]
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
	...

080027d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e12b      	b.n	8002a3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d106      	bne.n	8002800 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7fe fc36 	bl	800106c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2224      	movs	r2, #36	@ 0x24
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0201 	bic.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002826:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002836:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002838:	f000 fd40 	bl	80032bc <HAL_RCC_GetPCLK1Freq>
 800283c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4a81      	ldr	r2, [pc, #516]	@ (8002a48 <HAL_I2C_Init+0x274>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d807      	bhi.n	8002858 <HAL_I2C_Init+0x84>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4a80      	ldr	r2, [pc, #512]	@ (8002a4c <HAL_I2C_Init+0x278>)
 800284c:	4293      	cmp	r3, r2
 800284e:	bf94      	ite	ls
 8002850:	2301      	movls	r3, #1
 8002852:	2300      	movhi	r3, #0
 8002854:	b2db      	uxtb	r3, r3
 8002856:	e006      	b.n	8002866 <HAL_I2C_Init+0x92>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4a7d      	ldr	r2, [pc, #500]	@ (8002a50 <HAL_I2C_Init+0x27c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	bf94      	ite	ls
 8002860:	2301      	movls	r3, #1
 8002862:	2300      	movhi	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e0e7      	b.n	8002a3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4a78      	ldr	r2, [pc, #480]	@ (8002a54 <HAL_I2C_Init+0x280>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	0c9b      	lsrs	r3, r3, #18
 8002878:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	430a      	orrs	r2, r1
 800288c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	4a6a      	ldr	r2, [pc, #424]	@ (8002a48 <HAL_I2C_Init+0x274>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d802      	bhi.n	80028a8 <HAL_I2C_Init+0xd4>
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	3301      	adds	r3, #1
 80028a6:	e009      	b.n	80028bc <HAL_I2C_Init+0xe8>
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80028ae:	fb02 f303 	mul.w	r3, r2, r3
 80028b2:	4a69      	ldr	r2, [pc, #420]	@ (8002a58 <HAL_I2C_Init+0x284>)
 80028b4:	fba2 2303 	umull	r2, r3, r2, r3
 80028b8:	099b      	lsrs	r3, r3, #6
 80028ba:	3301      	adds	r3, #1
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	430b      	orrs	r3, r1
 80028c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80028ce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	495c      	ldr	r1, [pc, #368]	@ (8002a48 <HAL_I2C_Init+0x274>)
 80028d8:	428b      	cmp	r3, r1
 80028da:	d819      	bhi.n	8002910 <HAL_I2C_Init+0x13c>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	1e59      	subs	r1, r3, #1
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80028ea:	1c59      	adds	r1, r3, #1
 80028ec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80028f0:	400b      	ands	r3, r1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00a      	beq.n	800290c <HAL_I2C_Init+0x138>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	1e59      	subs	r1, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	fbb1 f3f3 	udiv	r3, r1, r3
 8002904:	3301      	adds	r3, #1
 8002906:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800290a:	e051      	b.n	80029b0 <HAL_I2C_Init+0x1dc>
 800290c:	2304      	movs	r3, #4
 800290e:	e04f      	b.n	80029b0 <HAL_I2C_Init+0x1dc>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d111      	bne.n	800293c <HAL_I2C_Init+0x168>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	1e58      	subs	r0, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6859      	ldr	r1, [r3, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	440b      	add	r3, r1
 8002926:	fbb0 f3f3 	udiv	r3, r0, r3
 800292a:	3301      	adds	r3, #1
 800292c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002930:	2b00      	cmp	r3, #0
 8002932:	bf0c      	ite	eq
 8002934:	2301      	moveq	r3, #1
 8002936:	2300      	movne	r3, #0
 8002938:	b2db      	uxtb	r3, r3
 800293a:	e012      	b.n	8002962 <HAL_I2C_Init+0x18e>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	1e58      	subs	r0, r3, #1
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6859      	ldr	r1, [r3, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	0099      	lsls	r1, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002952:	3301      	adds	r3, #1
 8002954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002958:	2b00      	cmp	r3, #0
 800295a:	bf0c      	ite	eq
 800295c:	2301      	moveq	r3, #1
 800295e:	2300      	movne	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_I2C_Init+0x196>
 8002966:	2301      	movs	r3, #1
 8002968:	e022      	b.n	80029b0 <HAL_I2C_Init+0x1dc>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10e      	bne.n	8002990 <HAL_I2C_Init+0x1bc>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1e58      	subs	r0, r3, #1
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6859      	ldr	r1, [r3, #4]
 800297a:	460b      	mov	r3, r1
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	440b      	add	r3, r1
 8002980:	fbb0 f3f3 	udiv	r3, r0, r3
 8002984:	3301      	adds	r3, #1
 8002986:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800298a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800298e:	e00f      	b.n	80029b0 <HAL_I2C_Init+0x1dc>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	1e58      	subs	r0, r3, #1
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	0099      	lsls	r1, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029a6:	3301      	adds	r3, #1
 80029a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	6809      	ldr	r1, [r1, #0]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69da      	ldr	r2, [r3, #28]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80029de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6911      	ldr	r1, [r2, #16]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68d2      	ldr	r2, [r2, #12]
 80029ea:	4311      	orrs	r1, r2
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	430b      	orrs	r3, r1
 80029f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695a      	ldr	r2, [r3, #20]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	000186a0 	.word	0x000186a0
 8002a4c:	001e847f 	.word	0x001e847f
 8002a50:	003d08ff 	.word	0x003d08ff
 8002a54:	431bde83 	.word	0x431bde83
 8002a58:	10624dd3 	.word	0x10624dd3

08002a5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e267      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d075      	beq.n	8002b66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a7a:	4b88      	ldr	r3, [pc, #544]	@ (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d00c      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a86:	4b85      	ldr	r3, [pc, #532]	@ (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d112      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a92:	4b82      	ldr	r3, [pc, #520]	@ (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a9e:	d10b      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa0:	4b7e      	ldr	r3, [pc, #504]	@ (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d05b      	beq.n	8002b64 <HAL_RCC_OscConfig+0x108>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d157      	bne.n	8002b64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e242      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ac0:	d106      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x74>
 8002ac2:	4b76      	ldr	r3, [pc, #472]	@ (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a75      	ldr	r2, [pc, #468]	@ (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e01d      	b.n	8002b0c <HAL_RCC_OscConfig+0xb0>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ad8:	d10c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x98>
 8002ada:	4b70      	ldr	r3, [pc, #448]	@ (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a6f      	ldr	r2, [pc, #444]	@ (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002ae0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	4b6d      	ldr	r3, [pc, #436]	@ (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a6c      	ldr	r2, [pc, #432]	@ (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	e00b      	b.n	8002b0c <HAL_RCC_OscConfig+0xb0>
 8002af4:	4b69      	ldr	r3, [pc, #420]	@ (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a68      	ldr	r2, [pc, #416]	@ (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002afa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	4b66      	ldr	r3, [pc, #408]	@ (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a65      	ldr	r2, [pc, #404]	@ (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002b06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d013      	beq.n	8002b3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b14:	f7ff fbb6 	bl	8002284 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b1c:	f7ff fbb2 	bl	8002284 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b64      	cmp	r3, #100	@ 0x64
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e207      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2e:	4b5b      	ldr	r3, [pc, #364]	@ (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCC_OscConfig+0xc0>
 8002b3a:	e014      	b.n	8002b66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7ff fba2 	bl	8002284 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b44:	f7ff fb9e 	bl	8002284 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b64      	cmp	r3, #100	@ 0x64
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e1f3      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b56:	4b51      	ldr	r3, [pc, #324]	@ (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCC_OscConfig+0xe8>
 8002b62:	e000      	b.n	8002b66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d063      	beq.n	8002c3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b72:	4b4a      	ldr	r3, [pc, #296]	@ (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00b      	beq.n	8002b96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b7e:	4b47      	ldr	r3, [pc, #284]	@ (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d11c      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b8a:	4b44      	ldr	r3, [pc, #272]	@ (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d116      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b96:	4b41      	ldr	r3, [pc, #260]	@ (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d005      	beq.n	8002bae <HAL_RCC_OscConfig+0x152>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d001      	beq.n	8002bae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e1c7      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bae:	4b3b      	ldr	r3, [pc, #236]	@ (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4937      	ldr	r1, [pc, #220]	@ (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bc2:	e03a      	b.n	8002c3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d020      	beq.n	8002c0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bcc:	4b34      	ldr	r3, [pc, #208]	@ (8002ca0 <HAL_RCC_OscConfig+0x244>)
 8002bce:	2201      	movs	r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd2:	f7ff fb57 	bl	8002284 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bda:	f7ff fb53 	bl	8002284 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e1a8      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bec:	4b2b      	ldr	r3, [pc, #172]	@ (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0f0      	beq.n	8002bda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf8:	4b28      	ldr	r3, [pc, #160]	@ (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	4925      	ldr	r1, [pc, #148]	@ (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	600b      	str	r3, [r1, #0]
 8002c0c:	e015      	b.n	8002c3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c0e:	4b24      	ldr	r3, [pc, #144]	@ (8002ca0 <HAL_RCC_OscConfig+0x244>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c14:	f7ff fb36 	bl	8002284 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c1c:	f7ff fb32 	bl	8002284 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e187      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c2e:	4b1b      	ldr	r3, [pc, #108]	@ (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d036      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d016      	beq.n	8002c7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c4e:	4b15      	ldr	r3, [pc, #84]	@ (8002ca4 <HAL_RCC_OscConfig+0x248>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c54:	f7ff fb16 	bl	8002284 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c5c:	f7ff fb12 	bl	8002284 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e167      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002c70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f0      	beq.n	8002c5c <HAL_RCC_OscConfig+0x200>
 8002c7a:	e01b      	b.n	8002cb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c7c:	4b09      	ldr	r3, [pc, #36]	@ (8002ca4 <HAL_RCC_OscConfig+0x248>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c82:	f7ff faff 	bl	8002284 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c88:	e00e      	b.n	8002ca8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c8a:	f7ff fafb 	bl	8002284 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d907      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e150      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	42470000 	.word	0x42470000
 8002ca4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca8:	4b88      	ldr	r3, [pc, #544]	@ (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002caa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1ea      	bne.n	8002c8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 8097 	beq.w	8002df0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cc6:	4b81      	ldr	r3, [pc, #516]	@ (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10f      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	4b7d      	ldr	r3, [pc, #500]	@ (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	4a7c      	ldr	r2, [pc, #496]	@ (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ce2:	4b7a      	ldr	r3, [pc, #488]	@ (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cea:	60bb      	str	r3, [r7, #8]
 8002cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf2:	4b77      	ldr	r3, [pc, #476]	@ (8002ed0 <HAL_RCC_OscConfig+0x474>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d118      	bne.n	8002d30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cfe:	4b74      	ldr	r3, [pc, #464]	@ (8002ed0 <HAL_RCC_OscConfig+0x474>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a73      	ldr	r2, [pc, #460]	@ (8002ed0 <HAL_RCC_OscConfig+0x474>)
 8002d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d0a:	f7ff fabb 	bl	8002284 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d12:	f7ff fab7 	bl	8002284 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e10c      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d24:	4b6a      	ldr	r3, [pc, #424]	@ (8002ed0 <HAL_RCC_OscConfig+0x474>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0f0      	beq.n	8002d12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d106      	bne.n	8002d46 <HAL_RCC_OscConfig+0x2ea>
 8002d38:	4b64      	ldr	r3, [pc, #400]	@ (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d3c:	4a63      	ldr	r2, [pc, #396]	@ (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d44:	e01c      	b.n	8002d80 <HAL_RCC_OscConfig+0x324>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b05      	cmp	r3, #5
 8002d4c:	d10c      	bne.n	8002d68 <HAL_RCC_OscConfig+0x30c>
 8002d4e:	4b5f      	ldr	r3, [pc, #380]	@ (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d52:	4a5e      	ldr	r2, [pc, #376]	@ (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002d54:	f043 0304 	orr.w	r3, r3, #4
 8002d58:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d5a:	4b5c      	ldr	r3, [pc, #368]	@ (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d5e:	4a5b      	ldr	r2, [pc, #364]	@ (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d66:	e00b      	b.n	8002d80 <HAL_RCC_OscConfig+0x324>
 8002d68:	4b58      	ldr	r3, [pc, #352]	@ (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d6c:	4a57      	ldr	r2, [pc, #348]	@ (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002d6e:	f023 0301 	bic.w	r3, r3, #1
 8002d72:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d74:	4b55      	ldr	r3, [pc, #340]	@ (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d78:	4a54      	ldr	r2, [pc, #336]	@ (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002d7a:	f023 0304 	bic.w	r3, r3, #4
 8002d7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d015      	beq.n	8002db4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d88:	f7ff fa7c 	bl	8002284 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8e:	e00a      	b.n	8002da6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d90:	f7ff fa78 	bl	8002284 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e0cb      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da6:	4b49      	ldr	r3, [pc, #292]	@ (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0ee      	beq.n	8002d90 <HAL_RCC_OscConfig+0x334>
 8002db2:	e014      	b.n	8002dde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db4:	f7ff fa66 	bl	8002284 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dba:	e00a      	b.n	8002dd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dbc:	f7ff fa62 	bl	8002284 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e0b5      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd2:	4b3e      	ldr	r3, [pc, #248]	@ (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1ee      	bne.n	8002dbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dde:	7dfb      	ldrb	r3, [r7, #23]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d105      	bne.n	8002df0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de4:	4b39      	ldr	r3, [pc, #228]	@ (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de8:	4a38      	ldr	r2, [pc, #224]	@ (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002dea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 80a1 	beq.w	8002f3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dfa:	4b34      	ldr	r3, [pc, #208]	@ (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d05c      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d141      	bne.n	8002e92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0e:	4b31      	ldr	r3, [pc, #196]	@ (8002ed4 <HAL_RCC_OscConfig+0x478>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e14:	f7ff fa36 	bl	8002284 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e1c:	f7ff fa32 	bl	8002284 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e087      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2e:	4b27      	ldr	r3, [pc, #156]	@ (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69da      	ldr	r2, [r3, #28]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e48:	019b      	lsls	r3, r3, #6
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e50:	085b      	lsrs	r3, r3, #1
 8002e52:	3b01      	subs	r3, #1
 8002e54:	041b      	lsls	r3, r3, #16
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5c:	061b      	lsls	r3, r3, #24
 8002e5e:	491b      	ldr	r1, [pc, #108]	@ (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e64:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed4 <HAL_RCC_OscConfig+0x478>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6a:	f7ff fa0b 	bl	8002284 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e72:	f7ff fa07 	bl	8002284 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e05c      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e84:	4b11      	ldr	r3, [pc, #68]	@ (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0f0      	beq.n	8002e72 <HAL_RCC_OscConfig+0x416>
 8002e90:	e054      	b.n	8002f3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e92:	4b10      	ldr	r3, [pc, #64]	@ (8002ed4 <HAL_RCC_OscConfig+0x478>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e98:	f7ff f9f4 	bl	8002284 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea0:	f7ff f9f0 	bl	8002284 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e045      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb2:	4b06      	ldr	r3, [pc, #24]	@ (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x444>
 8002ebe:	e03d      	b.n	8002f3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d107      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e038      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	40007000 	.word	0x40007000
 8002ed4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f48 <HAL_RCC_OscConfig+0x4ec>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d028      	beq.n	8002f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d121      	bne.n	8002f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d11a      	bne.n	8002f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f08:	4013      	ands	r3, r2
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d111      	bne.n	8002f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1e:	085b      	lsrs	r3, r3, #1
 8002f20:	3b01      	subs	r3, #1
 8002f22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d107      	bne.n	8002f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d001      	beq.n	8002f3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e000      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40023800 	.word	0x40023800

08002f4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0cc      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f60:	4b68      	ldr	r3, [pc, #416]	@ (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d90c      	bls.n	8002f88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6e:	4b65      	ldr	r3, [pc, #404]	@ (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f76:	4b63      	ldr	r3, [pc, #396]	@ (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d001      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0b8      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d020      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d005      	beq.n	8002fac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fa0:	4b59      	ldr	r3, [pc, #356]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	4a58      	ldr	r2, [pc, #352]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002faa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0308 	and.w	r3, r3, #8
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fb8:	4b53      	ldr	r3, [pc, #332]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	4a52      	ldr	r2, [pc, #328]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002fc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc4:	4b50      	ldr	r3, [pc, #320]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	494d      	ldr	r1, [pc, #308]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d044      	beq.n	800306c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d107      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fea:	4b47      	ldr	r3, [pc, #284]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d119      	bne.n	800302a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e07f      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d003      	beq.n	800300a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003006:	2b03      	cmp	r3, #3
 8003008:	d107      	bne.n	800301a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300a:	4b3f      	ldr	r3, [pc, #252]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d109      	bne.n	800302a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e06f      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301a:	4b3b      	ldr	r3, [pc, #236]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e067      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800302a:	4b37      	ldr	r3, [pc, #220]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f023 0203 	bic.w	r2, r3, #3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	4934      	ldr	r1, [pc, #208]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8003038:	4313      	orrs	r3, r2
 800303a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800303c:	f7ff f922 	bl	8002284 <HAL_GetTick>
 8003040:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003042:	e00a      	b.n	800305a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003044:	f7ff f91e 	bl	8002284 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003052:	4293      	cmp	r3, r2
 8003054:	d901      	bls.n	800305a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e04f      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305a:	4b2b      	ldr	r3, [pc, #172]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 020c 	and.w	r2, r3, #12
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	429a      	cmp	r2, r3
 800306a:	d1eb      	bne.n	8003044 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800306c:	4b25      	ldr	r3, [pc, #148]	@ (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d20c      	bcs.n	8003094 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307a:	4b22      	ldr	r3, [pc, #136]	@ (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003082:	4b20      	ldr	r3, [pc, #128]	@ (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d001      	beq.n	8003094 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e032      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d008      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030a0:	4b19      	ldr	r3, [pc, #100]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	4916      	ldr	r1, [pc, #88]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d009      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030be:	4b12      	ldr	r3, [pc, #72]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	490e      	ldr	r1, [pc, #56]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030d2:	f000 f821 	bl	8003118 <HAL_RCC_GetSysClockFreq>
 80030d6:	4602      	mov	r2, r0
 80030d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	091b      	lsrs	r3, r3, #4
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	490a      	ldr	r1, [pc, #40]	@ (800310c <HAL_RCC_ClockConfig+0x1c0>)
 80030e4:	5ccb      	ldrb	r3, [r1, r3]
 80030e6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ea:	4a09      	ldr	r2, [pc, #36]	@ (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 80030ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030ee:	4b09      	ldr	r3, [pc, #36]	@ (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff f882 	bl	80021fc <HAL_InitTick>

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40023c00 	.word	0x40023c00
 8003108:	40023800 	.word	0x40023800
 800310c:	08007210 	.word	0x08007210
 8003110:	2000001c 	.word	0x2000001c
 8003114:	20000020 	.word	0x20000020

08003118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800311c:	b090      	sub	sp, #64	@ 0x40
 800311e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	637b      	str	r3, [r7, #52]	@ 0x34
 8003124:	2300      	movs	r3, #0
 8003126:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003128:	2300      	movs	r3, #0
 800312a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003130:	4b59      	ldr	r3, [pc, #356]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x180>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 030c 	and.w	r3, r3, #12
 8003138:	2b08      	cmp	r3, #8
 800313a:	d00d      	beq.n	8003158 <HAL_RCC_GetSysClockFreq+0x40>
 800313c:	2b08      	cmp	r3, #8
 800313e:	f200 80a1 	bhi.w	8003284 <HAL_RCC_GetSysClockFreq+0x16c>
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <HAL_RCC_GetSysClockFreq+0x34>
 8003146:	2b04      	cmp	r3, #4
 8003148:	d003      	beq.n	8003152 <HAL_RCC_GetSysClockFreq+0x3a>
 800314a:	e09b      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800314c:	4b53      	ldr	r3, [pc, #332]	@ (800329c <HAL_RCC_GetSysClockFreq+0x184>)
 800314e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003150:	e09b      	b.n	800328a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003152:	4b53      	ldr	r3, [pc, #332]	@ (80032a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003154:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003156:	e098      	b.n	800328a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003158:	4b4f      	ldr	r3, [pc, #316]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x180>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003160:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003162:	4b4d      	ldr	r3, [pc, #308]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x180>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d028      	beq.n	80031c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800316e:	4b4a      	ldr	r3, [pc, #296]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x180>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	099b      	lsrs	r3, r3, #6
 8003174:	2200      	movs	r2, #0
 8003176:	623b      	str	r3, [r7, #32]
 8003178:	627a      	str	r2, [r7, #36]	@ 0x24
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003180:	2100      	movs	r1, #0
 8003182:	4b47      	ldr	r3, [pc, #284]	@ (80032a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003184:	fb03 f201 	mul.w	r2, r3, r1
 8003188:	2300      	movs	r3, #0
 800318a:	fb00 f303 	mul.w	r3, r0, r3
 800318e:	4413      	add	r3, r2
 8003190:	4a43      	ldr	r2, [pc, #268]	@ (80032a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003192:	fba0 1202 	umull	r1, r2, r0, r2
 8003196:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003198:	460a      	mov	r2, r1
 800319a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800319c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800319e:	4413      	add	r3, r2
 80031a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031a4:	2200      	movs	r2, #0
 80031a6:	61bb      	str	r3, [r7, #24]
 80031a8:	61fa      	str	r2, [r7, #28]
 80031aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80031b2:	f7fd fd21 	bl	8000bf8 <__aeabi_uldivmod>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	4613      	mov	r3, r2
 80031bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031be:	e053      	b.n	8003268 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031c0:	4b35      	ldr	r3, [pc, #212]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x180>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	099b      	lsrs	r3, r3, #6
 80031c6:	2200      	movs	r2, #0
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	617a      	str	r2, [r7, #20]
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80031d2:	f04f 0b00 	mov.w	fp, #0
 80031d6:	4652      	mov	r2, sl
 80031d8:	465b      	mov	r3, fp
 80031da:	f04f 0000 	mov.w	r0, #0
 80031de:	f04f 0100 	mov.w	r1, #0
 80031e2:	0159      	lsls	r1, r3, #5
 80031e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031e8:	0150      	lsls	r0, r2, #5
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	ebb2 080a 	subs.w	r8, r2, sl
 80031f2:	eb63 090b 	sbc.w	r9, r3, fp
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003202:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003206:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800320a:	ebb2 0408 	subs.w	r4, r2, r8
 800320e:	eb63 0509 	sbc.w	r5, r3, r9
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	00eb      	lsls	r3, r5, #3
 800321c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003220:	00e2      	lsls	r2, r4, #3
 8003222:	4614      	mov	r4, r2
 8003224:	461d      	mov	r5, r3
 8003226:	eb14 030a 	adds.w	r3, r4, sl
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	eb45 030b 	adc.w	r3, r5, fp
 8003230:	607b      	str	r3, [r7, #4]
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	f04f 0300 	mov.w	r3, #0
 800323a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800323e:	4629      	mov	r1, r5
 8003240:	028b      	lsls	r3, r1, #10
 8003242:	4621      	mov	r1, r4
 8003244:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003248:	4621      	mov	r1, r4
 800324a:	028a      	lsls	r2, r1, #10
 800324c:	4610      	mov	r0, r2
 800324e:	4619      	mov	r1, r3
 8003250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003252:	2200      	movs	r2, #0
 8003254:	60bb      	str	r3, [r7, #8]
 8003256:	60fa      	str	r2, [r7, #12]
 8003258:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800325c:	f7fd fccc 	bl	8000bf8 <__aeabi_uldivmod>
 8003260:	4602      	mov	r2, r0
 8003262:	460b      	mov	r3, r1
 8003264:	4613      	mov	r3, r2
 8003266:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003268:	4b0b      	ldr	r3, [pc, #44]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x180>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	0c1b      	lsrs	r3, r3, #16
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	3301      	adds	r3, #1
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003278:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800327a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800327c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003280:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003282:	e002      	b.n	800328a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003284:	4b05      	ldr	r3, [pc, #20]	@ (800329c <HAL_RCC_GetSysClockFreq+0x184>)
 8003286:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003288:	bf00      	nop
    }
  }
  return sysclockfreq;
 800328a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800328c:	4618      	mov	r0, r3
 800328e:	3740      	adds	r7, #64	@ 0x40
 8003290:	46bd      	mov	sp, r7
 8003292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003296:	bf00      	nop
 8003298:	40023800 	.word	0x40023800
 800329c:	00f42400 	.word	0x00f42400
 80032a0:	017d7840 	.word	0x017d7840

080032a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032a8:	4b03      	ldr	r3, [pc, #12]	@ (80032b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032aa:	681b      	ldr	r3, [r3, #0]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	2000001c 	.word	0x2000001c

080032bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032c0:	f7ff fff0 	bl	80032a4 <HAL_RCC_GetHCLKFreq>
 80032c4:	4602      	mov	r2, r0
 80032c6:	4b05      	ldr	r3, [pc, #20]	@ (80032dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	0a9b      	lsrs	r3, r3, #10
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	4903      	ldr	r1, [pc, #12]	@ (80032e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032d2:	5ccb      	ldrb	r3, [r1, r3]
 80032d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d8:	4618      	mov	r0, r3
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40023800 	.word	0x40023800
 80032e0:	08007220 	.word	0x08007220

080032e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032e8:	f7ff ffdc 	bl	80032a4 <HAL_RCC_GetHCLKFreq>
 80032ec:	4602      	mov	r2, r0
 80032ee:	4b05      	ldr	r3, [pc, #20]	@ (8003304 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	0b5b      	lsrs	r3, r3, #13
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	4903      	ldr	r1, [pc, #12]	@ (8003308 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032fa:	5ccb      	ldrb	r3, [r1, r3]
 80032fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003300:	4618      	mov	r0, r3
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40023800 	.word	0x40023800
 8003308:	08007220 	.word	0x08007220

0800330c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e041      	b.n	80033a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7fe fe04 	bl	8001f40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3304      	adds	r3, #4
 8003348:	4619      	mov	r1, r3
 800334a:	4610      	mov	r0, r2
 800334c:	f000 fbf4 	bl	8003b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b082      	sub	sp, #8
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e041      	b.n	8003440 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d106      	bne.n	80033d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f839 	bl	8003448 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2202      	movs	r2, #2
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	3304      	adds	r3, #4
 80033e6:	4619      	mov	r1, r3
 80033e8:	4610      	mov	r0, r2
 80033ea:	f000 fba5 	bl	8003b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d109      	bne.n	8003480 <HAL_TIM_PWM_Start+0x24>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b01      	cmp	r3, #1
 8003476:	bf14      	ite	ne
 8003478:	2301      	movne	r3, #1
 800347a:	2300      	moveq	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	e022      	b.n	80034c6 <HAL_TIM_PWM_Start+0x6a>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	2b04      	cmp	r3, #4
 8003484:	d109      	bne.n	800349a <HAL_TIM_PWM_Start+0x3e>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b01      	cmp	r3, #1
 8003490:	bf14      	ite	ne
 8003492:	2301      	movne	r3, #1
 8003494:	2300      	moveq	r3, #0
 8003496:	b2db      	uxtb	r3, r3
 8003498:	e015      	b.n	80034c6 <HAL_TIM_PWM_Start+0x6a>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b08      	cmp	r3, #8
 800349e:	d109      	bne.n	80034b4 <HAL_TIM_PWM_Start+0x58>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	bf14      	ite	ne
 80034ac:	2301      	movne	r3, #1
 80034ae:	2300      	moveq	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	e008      	b.n	80034c6 <HAL_TIM_PWM_Start+0x6a>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b01      	cmp	r3, #1
 80034be:	bf14      	ite	ne
 80034c0:	2301      	movne	r3, #1
 80034c2:	2300      	moveq	r3, #0
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e068      	b.n	80035a0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d104      	bne.n	80034de <HAL_TIM_PWM_Start+0x82>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034dc:	e013      	b.n	8003506 <HAL_TIM_PWM_Start+0xaa>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	d104      	bne.n	80034ee <HAL_TIM_PWM_Start+0x92>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034ec:	e00b      	b.n	8003506 <HAL_TIM_PWM_Start+0xaa>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d104      	bne.n	80034fe <HAL_TIM_PWM_Start+0xa2>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034fc:	e003      	b.n	8003506 <HAL_TIM_PWM_Start+0xaa>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2202      	movs	r2, #2
 8003502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2201      	movs	r2, #1
 800350c:	6839      	ldr	r1, [r7, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f000 fdc4 	bl	800409c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a23      	ldr	r2, [pc, #140]	@ (80035a8 <HAL_TIM_PWM_Start+0x14c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d107      	bne.n	800352e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800352c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a1d      	ldr	r2, [pc, #116]	@ (80035a8 <HAL_TIM_PWM_Start+0x14c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d018      	beq.n	800356a <HAL_TIM_PWM_Start+0x10e>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003540:	d013      	beq.n	800356a <HAL_TIM_PWM_Start+0x10e>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a19      	ldr	r2, [pc, #100]	@ (80035ac <HAL_TIM_PWM_Start+0x150>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d00e      	beq.n	800356a <HAL_TIM_PWM_Start+0x10e>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a17      	ldr	r2, [pc, #92]	@ (80035b0 <HAL_TIM_PWM_Start+0x154>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d009      	beq.n	800356a <HAL_TIM_PWM_Start+0x10e>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a16      	ldr	r2, [pc, #88]	@ (80035b4 <HAL_TIM_PWM_Start+0x158>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d004      	beq.n	800356a <HAL_TIM_PWM_Start+0x10e>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a14      	ldr	r2, [pc, #80]	@ (80035b8 <HAL_TIM_PWM_Start+0x15c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d111      	bne.n	800358e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2b06      	cmp	r3, #6
 800357a:	d010      	beq.n	800359e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0201 	orr.w	r2, r2, #1
 800358a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800358c:	e007      	b.n	800359e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f042 0201 	orr.w	r2, r2, #1
 800359c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40010000 	.word	0x40010000
 80035ac:	40000400 	.word	0x40000400
 80035b0:	40000800 	.word	0x40000800
 80035b4:	40000c00 	.word	0x40000c00
 80035b8:	40014000 	.word	0x40014000

080035bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e097      	b.n	8003700 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d106      	bne.n	80035ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7fe fccb 	bl	8001f80 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2202      	movs	r2, #2
 80035ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6812      	ldr	r2, [r2, #0]
 80035fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003600:	f023 0307 	bic.w	r3, r3, #7
 8003604:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3304      	adds	r3, #4
 800360e:	4619      	mov	r1, r3
 8003610:	4610      	mov	r0, r2
 8003612:	f000 fa91 	bl	8003b38 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4313      	orrs	r3, r2
 8003636:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800363e:	f023 0303 	bic.w	r3, r3, #3
 8003642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	021b      	lsls	r3, r3, #8
 800364e:	4313      	orrs	r3, r2
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800365c:	f023 030c 	bic.w	r3, r3, #12
 8003660:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003668:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800366c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	021b      	lsls	r3, r3, #8
 8003678:	4313      	orrs	r3, r2
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	4313      	orrs	r3, r2
 800367e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	011a      	lsls	r2, r3, #4
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	031b      	lsls	r3, r3, #12
 800368c:	4313      	orrs	r3, r2
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	4313      	orrs	r3, r2
 8003692:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800369a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80036a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	4313      	orrs	r3, r2
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003718:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003720:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003728:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003730:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d110      	bne.n	800375a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d102      	bne.n	8003744 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800373e:	7b7b      	ldrb	r3, [r7, #13]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d001      	beq.n	8003748 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e069      	b.n	800381c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003758:	e031      	b.n	80037be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b04      	cmp	r3, #4
 800375e:	d110      	bne.n	8003782 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003760:	7bbb      	ldrb	r3, [r7, #14]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d102      	bne.n	800376c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003766:	7b3b      	ldrb	r3, [r7, #12]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d001      	beq.n	8003770 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e055      	b.n	800381c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003780:	e01d      	b.n	80037be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003782:	7bfb      	ldrb	r3, [r7, #15]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d108      	bne.n	800379a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003788:	7bbb      	ldrb	r3, [r7, #14]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d105      	bne.n	800379a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800378e:	7b7b      	ldrb	r3, [r7, #13]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d102      	bne.n	800379a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003794:	7b3b      	ldrb	r3, [r7, #12]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d001      	beq.n	800379e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e03e      	b.n	800381c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2202      	movs	r2, #2
 80037a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2202      	movs	r2, #2
 80037aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2202      	movs	r2, #2
 80037b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2202      	movs	r2, #2
 80037ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_TIM_Encoder_Start+0xc4>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d008      	beq.n	80037dc <HAL_TIM_Encoder_Start+0xd4>
 80037ca:	e00f      	b.n	80037ec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2201      	movs	r2, #1
 80037d2:	2100      	movs	r1, #0
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 fc61 	bl	800409c <TIM_CCxChannelCmd>
      break;
 80037da:	e016      	b.n	800380a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2201      	movs	r2, #1
 80037e2:	2104      	movs	r1, #4
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 fc59 	bl	800409c <TIM_CCxChannelCmd>
      break;
 80037ea:	e00e      	b.n	800380a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2201      	movs	r2, #1
 80037f2:	2100      	movs	r1, #0
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 fc51 	bl	800409c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2201      	movs	r2, #1
 8003800:	2104      	movs	r1, #4
 8003802:	4618      	mov	r0, r3
 8003804:	f000 fc4a 	bl	800409c <TIM_CCxChannelCmd>
      break;
 8003808:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f042 0201 	orr.w	r2, r2, #1
 8003818:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003830:	2300      	movs	r3, #0
 8003832:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800383a:	2b01      	cmp	r3, #1
 800383c:	d101      	bne.n	8003842 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800383e:	2302      	movs	r3, #2
 8003840:	e0ae      	b.n	80039a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b0c      	cmp	r3, #12
 800384e:	f200 809f 	bhi.w	8003990 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003852:	a201      	add	r2, pc, #4	@ (adr r2, 8003858 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003858:	0800388d 	.word	0x0800388d
 800385c:	08003991 	.word	0x08003991
 8003860:	08003991 	.word	0x08003991
 8003864:	08003991 	.word	0x08003991
 8003868:	080038cd 	.word	0x080038cd
 800386c:	08003991 	.word	0x08003991
 8003870:	08003991 	.word	0x08003991
 8003874:	08003991 	.word	0x08003991
 8003878:	0800390f 	.word	0x0800390f
 800387c:	08003991 	.word	0x08003991
 8003880:	08003991 	.word	0x08003991
 8003884:	08003991 	.word	0x08003991
 8003888:	0800394f 	.word	0x0800394f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68b9      	ldr	r1, [r7, #8]
 8003892:	4618      	mov	r0, r3
 8003894:	f000 f9dc 	bl	8003c50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699a      	ldr	r2, [r3, #24]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0208 	orr.w	r2, r2, #8
 80038a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699a      	ldr	r2, [r3, #24]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 0204 	bic.w	r2, r2, #4
 80038b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6999      	ldr	r1, [r3, #24]
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	691a      	ldr	r2, [r3, #16]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	619a      	str	r2, [r3, #24]
      break;
 80038ca:	e064      	b.n	8003996 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68b9      	ldr	r1, [r7, #8]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 fa22 	bl	8003d1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699a      	ldr	r2, [r3, #24]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699a      	ldr	r2, [r3, #24]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6999      	ldr	r1, [r3, #24]
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	021a      	lsls	r2, r3, #8
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	619a      	str	r2, [r3, #24]
      break;
 800390c:	e043      	b.n	8003996 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68b9      	ldr	r1, [r7, #8]
 8003914:	4618      	mov	r0, r3
 8003916:	f000 fa6d 	bl	8003df4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	69da      	ldr	r2, [r3, #28]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0208 	orr.w	r2, r2, #8
 8003928:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	69da      	ldr	r2, [r3, #28]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0204 	bic.w	r2, r2, #4
 8003938:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	69d9      	ldr	r1, [r3, #28]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	61da      	str	r2, [r3, #28]
      break;
 800394c:	e023      	b.n	8003996 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68b9      	ldr	r1, [r7, #8]
 8003954:	4618      	mov	r0, r3
 8003956:	f000 fab7 	bl	8003ec8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	69da      	ldr	r2, [r3, #28]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003968:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	69da      	ldr	r2, [r3, #28]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003978:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69d9      	ldr	r1, [r3, #28]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	021a      	lsls	r2, r3, #8
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	61da      	str	r2, [r3, #28]
      break;
 800398e:	e002      	b.n	8003996 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	75fb      	strb	r3, [r7, #23]
      break;
 8003994:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800399e:	7dfb      	ldrb	r3, [r7, #23]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_TIM_ConfigClockSource+0x1c>
 80039c0:	2302      	movs	r3, #2
 80039c2:	e0b4      	b.n	8003b2e <HAL_TIM_ConfigClockSource+0x186>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2202      	movs	r2, #2
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80039e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039fc:	d03e      	beq.n	8003a7c <HAL_TIM_ConfigClockSource+0xd4>
 80039fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a02:	f200 8087 	bhi.w	8003b14 <HAL_TIM_ConfigClockSource+0x16c>
 8003a06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a0a:	f000 8086 	beq.w	8003b1a <HAL_TIM_ConfigClockSource+0x172>
 8003a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a12:	d87f      	bhi.n	8003b14 <HAL_TIM_ConfigClockSource+0x16c>
 8003a14:	2b70      	cmp	r3, #112	@ 0x70
 8003a16:	d01a      	beq.n	8003a4e <HAL_TIM_ConfigClockSource+0xa6>
 8003a18:	2b70      	cmp	r3, #112	@ 0x70
 8003a1a:	d87b      	bhi.n	8003b14 <HAL_TIM_ConfigClockSource+0x16c>
 8003a1c:	2b60      	cmp	r3, #96	@ 0x60
 8003a1e:	d050      	beq.n	8003ac2 <HAL_TIM_ConfigClockSource+0x11a>
 8003a20:	2b60      	cmp	r3, #96	@ 0x60
 8003a22:	d877      	bhi.n	8003b14 <HAL_TIM_ConfigClockSource+0x16c>
 8003a24:	2b50      	cmp	r3, #80	@ 0x50
 8003a26:	d03c      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0xfa>
 8003a28:	2b50      	cmp	r3, #80	@ 0x50
 8003a2a:	d873      	bhi.n	8003b14 <HAL_TIM_ConfigClockSource+0x16c>
 8003a2c:	2b40      	cmp	r3, #64	@ 0x40
 8003a2e:	d058      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0x13a>
 8003a30:	2b40      	cmp	r3, #64	@ 0x40
 8003a32:	d86f      	bhi.n	8003b14 <HAL_TIM_ConfigClockSource+0x16c>
 8003a34:	2b30      	cmp	r3, #48	@ 0x30
 8003a36:	d064      	beq.n	8003b02 <HAL_TIM_ConfigClockSource+0x15a>
 8003a38:	2b30      	cmp	r3, #48	@ 0x30
 8003a3a:	d86b      	bhi.n	8003b14 <HAL_TIM_ConfigClockSource+0x16c>
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d060      	beq.n	8003b02 <HAL_TIM_ConfigClockSource+0x15a>
 8003a40:	2b20      	cmp	r3, #32
 8003a42:	d867      	bhi.n	8003b14 <HAL_TIM_ConfigClockSource+0x16c>
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d05c      	beq.n	8003b02 <HAL_TIM_ConfigClockSource+0x15a>
 8003a48:	2b10      	cmp	r3, #16
 8003a4a:	d05a      	beq.n	8003b02 <HAL_TIM_ConfigClockSource+0x15a>
 8003a4c:	e062      	b.n	8003b14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a5e:	f000 fafd 	bl	800405c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003a70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	609a      	str	r2, [r3, #8]
      break;
 8003a7a:	e04f      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a8c:	f000 fae6 	bl	800405c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a9e:	609a      	str	r2, [r3, #8]
      break;
 8003aa0:	e03c      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f000 fa5a 	bl	8003f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2150      	movs	r1, #80	@ 0x50
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 fab3 	bl	8004026 <TIM_ITRx_SetConfig>
      break;
 8003ac0:	e02c      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f000 fa79 	bl	8003fc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2160      	movs	r1, #96	@ 0x60
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 faa3 	bl	8004026 <TIM_ITRx_SetConfig>
      break;
 8003ae0:	e01c      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aee:	461a      	mov	r2, r3
 8003af0:	f000 fa3a 	bl	8003f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2140      	movs	r1, #64	@ 0x40
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 fa93 	bl	8004026 <TIM_ITRx_SetConfig>
      break;
 8003b00:	e00c      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	f000 fa8a 	bl	8004026 <TIM_ITRx_SetConfig>
      break;
 8003b12:	e003      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	73fb      	strb	r3, [r7, #15]
      break;
 8003b18:	e000      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a3a      	ldr	r2, [pc, #232]	@ (8003c34 <TIM_Base_SetConfig+0xfc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d00f      	beq.n	8003b70 <TIM_Base_SetConfig+0x38>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b56:	d00b      	beq.n	8003b70 <TIM_Base_SetConfig+0x38>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a37      	ldr	r2, [pc, #220]	@ (8003c38 <TIM_Base_SetConfig+0x100>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d007      	beq.n	8003b70 <TIM_Base_SetConfig+0x38>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a36      	ldr	r2, [pc, #216]	@ (8003c3c <TIM_Base_SetConfig+0x104>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d003      	beq.n	8003b70 <TIM_Base_SetConfig+0x38>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a35      	ldr	r2, [pc, #212]	@ (8003c40 <TIM_Base_SetConfig+0x108>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d108      	bne.n	8003b82 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a2b      	ldr	r2, [pc, #172]	@ (8003c34 <TIM_Base_SetConfig+0xfc>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d01b      	beq.n	8003bc2 <TIM_Base_SetConfig+0x8a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b90:	d017      	beq.n	8003bc2 <TIM_Base_SetConfig+0x8a>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a28      	ldr	r2, [pc, #160]	@ (8003c38 <TIM_Base_SetConfig+0x100>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d013      	beq.n	8003bc2 <TIM_Base_SetConfig+0x8a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a27      	ldr	r2, [pc, #156]	@ (8003c3c <TIM_Base_SetConfig+0x104>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d00f      	beq.n	8003bc2 <TIM_Base_SetConfig+0x8a>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a26      	ldr	r2, [pc, #152]	@ (8003c40 <TIM_Base_SetConfig+0x108>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00b      	beq.n	8003bc2 <TIM_Base_SetConfig+0x8a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a25      	ldr	r2, [pc, #148]	@ (8003c44 <TIM_Base_SetConfig+0x10c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d007      	beq.n	8003bc2 <TIM_Base_SetConfig+0x8a>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a24      	ldr	r2, [pc, #144]	@ (8003c48 <TIM_Base_SetConfig+0x110>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d003      	beq.n	8003bc2 <TIM_Base_SetConfig+0x8a>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a23      	ldr	r2, [pc, #140]	@ (8003c4c <TIM_Base_SetConfig+0x114>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d108      	bne.n	8003bd4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a0e      	ldr	r2, [pc, #56]	@ (8003c34 <TIM_Base_SetConfig+0xfc>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d103      	bne.n	8003c08 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d105      	bne.n	8003c26 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f023 0201 	bic.w	r2, r3, #1
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	611a      	str	r2, [r3, #16]
  }
}
 8003c26:	bf00      	nop
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	40010000 	.word	0x40010000
 8003c38:	40000400 	.word	0x40000400
 8003c3c:	40000800 	.word	0x40000800
 8003c40:	40000c00 	.word	0x40000c00
 8003c44:	40014000 	.word	0x40014000
 8003c48:	40014400 	.word	0x40014400
 8003c4c:	40014800 	.word	0x40014800

08003c50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	f023 0201 	bic.w	r2, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f023 0303 	bic.w	r3, r3, #3
 8003c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f023 0302 	bic.w	r3, r3, #2
 8003c98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a1c      	ldr	r2, [pc, #112]	@ (8003d18 <TIM_OC1_SetConfig+0xc8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d10c      	bne.n	8003cc6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f023 0308 	bic.w	r3, r3, #8
 8003cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f023 0304 	bic.w	r3, r3, #4
 8003cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a13      	ldr	r2, [pc, #76]	@ (8003d18 <TIM_OC1_SetConfig+0xc8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d111      	bne.n	8003cf2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	621a      	str	r2, [r3, #32]
}
 8003d0c:	bf00      	nop
 8003d0e:	371c      	adds	r7, #28
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	40010000 	.word	0x40010000

08003d1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b087      	sub	sp, #28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	f023 0210 	bic.w	r2, r3, #16
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	021b      	lsls	r3, r3, #8
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f023 0320 	bic.w	r3, r3, #32
 8003d66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a1e      	ldr	r2, [pc, #120]	@ (8003df0 <TIM_OC2_SetConfig+0xd4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d10d      	bne.n	8003d98 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a15      	ldr	r2, [pc, #84]	@ (8003df0 <TIM_OC2_SetConfig+0xd4>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d113      	bne.n	8003dc8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003da6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003dae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	621a      	str	r2, [r3, #32]
}
 8003de2:	bf00      	nop
 8003de4:	371c      	adds	r7, #28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	40010000 	.word	0x40010000

08003df4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f023 0303 	bic.w	r3, r3, #3
 8003e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	021b      	lsls	r3, r3, #8
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ec4 <TIM_OC3_SetConfig+0xd0>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d10d      	bne.n	8003e6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	021b      	lsls	r3, r3, #8
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a14      	ldr	r2, [pc, #80]	@ (8003ec4 <TIM_OC3_SetConfig+0xd0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d113      	bne.n	8003e9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	621a      	str	r2, [r3, #32]
}
 8003eb8:	bf00      	nop
 8003eba:	371c      	adds	r7, #28
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	40010000 	.word	0x40010000

08003ec8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	021b      	lsls	r3, r3, #8
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	031b      	lsls	r3, r3, #12
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a10      	ldr	r2, [pc, #64]	@ (8003f64 <TIM_OC4_SetConfig+0x9c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d109      	bne.n	8003f3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	019b      	lsls	r3, r3, #6
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	621a      	str	r2, [r3, #32]
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40010000 	.word	0x40010000

08003f68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	f023 0201 	bic.w	r2, r3, #1
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f023 030a 	bic.w	r3, r3, #10
 8003fa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	621a      	str	r2, [r3, #32]
}
 8003fba:	bf00      	nop
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b087      	sub	sp, #28
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	f023 0210 	bic.w	r2, r3, #16
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ff0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	031b      	lsls	r3, r3, #12
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004002:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	4313      	orrs	r3, r2
 800400c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	621a      	str	r2, [r3, #32]
}
 800401a:	bf00      	nop
 800401c:	371c      	adds	r7, #28
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004026:	b480      	push	{r7}
 8004028:	b085      	sub	sp, #20
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800403c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	f043 0307 	orr.w	r3, r3, #7
 8004048:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	609a      	str	r2, [r3, #8]
}
 8004050:	bf00      	nop
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800405c:	b480      	push	{r7}
 800405e:	b087      	sub	sp, #28
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
 8004068:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004076:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	021a      	lsls	r2, r3, #8
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	431a      	orrs	r2, r3
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4313      	orrs	r3, r2
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	4313      	orrs	r3, r2
 8004088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	609a      	str	r2, [r3, #8]
}
 8004090:	bf00      	nop
 8004092:	371c      	adds	r7, #28
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f003 031f 	and.w	r3, r3, #31
 80040ae:	2201      	movs	r2, #1
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a1a      	ldr	r2, [r3, #32]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	43db      	mvns	r3, r3
 80040be:	401a      	ands	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6a1a      	ldr	r2, [r3, #32]
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f003 031f 	and.w	r3, r3, #31
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	fa01 f303 	lsl.w	r3, r1, r3
 80040d4:	431a      	orrs	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	621a      	str	r2, [r3, #32]
}
 80040da:	bf00      	nop
 80040dc:	371c      	adds	r7, #28
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
	...

080040e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d101      	bne.n	8004100 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040fc:	2302      	movs	r3, #2
 80040fe:	e050      	b.n	80041a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004126:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	4313      	orrs	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a1c      	ldr	r2, [pc, #112]	@ (80041b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d018      	beq.n	8004176 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800414c:	d013      	beq.n	8004176 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a18      	ldr	r2, [pc, #96]	@ (80041b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d00e      	beq.n	8004176 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a16      	ldr	r2, [pc, #88]	@ (80041b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d009      	beq.n	8004176 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a15      	ldr	r2, [pc, #84]	@ (80041bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d004      	beq.n	8004176 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a13      	ldr	r2, [pc, #76]	@ (80041c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d10c      	bne.n	8004190 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800417c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	4313      	orrs	r3, r2
 8004186:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40010000 	.word	0x40010000
 80041b4:	40000400 	.word	0x40000400
 80041b8:	40000800 	.word	0x40000800
 80041bc:	40000c00 	.word	0x40000c00
 80041c0:	40014000 	.word	0x40014000

080041c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e042      	b.n	800425c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d106      	bne.n	80041f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fd ff72 	bl	80020d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2224      	movs	r2, #36	@ 0x24
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004206:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 f82b 	bl	8004264 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800421c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695a      	ldr	r2, [r3, #20]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800422c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800423c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004268:	b0c0      	sub	sp, #256	@ 0x100
 800426a:	af00      	add	r7, sp, #0
 800426c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800427c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004280:	68d9      	ldr	r1, [r3, #12]
 8004282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	ea40 0301 	orr.w	r3, r0, r1
 800428c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800428e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	431a      	orrs	r2, r3
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	431a      	orrs	r2, r3
 80042a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80042bc:	f021 010c 	bic.w	r1, r1, #12
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80042ca:	430b      	orrs	r3, r1
 80042cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80042da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042de:	6999      	ldr	r1, [r3, #24]
 80042e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	ea40 0301 	orr.w	r3, r0, r1
 80042ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	4b8f      	ldr	r3, [pc, #572]	@ (8004530 <UART_SetConfig+0x2cc>)
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d005      	beq.n	8004304 <UART_SetConfig+0xa0>
 80042f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	4b8d      	ldr	r3, [pc, #564]	@ (8004534 <UART_SetConfig+0x2d0>)
 8004300:	429a      	cmp	r2, r3
 8004302:	d104      	bne.n	800430e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004304:	f7fe ffee 	bl	80032e4 <HAL_RCC_GetPCLK2Freq>
 8004308:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800430c:	e003      	b.n	8004316 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800430e:	f7fe ffd5 	bl	80032bc <HAL_RCC_GetPCLK1Freq>
 8004312:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004320:	f040 810c 	bne.w	800453c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004328:	2200      	movs	r2, #0
 800432a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800432e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004332:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004336:	4622      	mov	r2, r4
 8004338:	462b      	mov	r3, r5
 800433a:	1891      	adds	r1, r2, r2
 800433c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800433e:	415b      	adcs	r3, r3
 8004340:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004342:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004346:	4621      	mov	r1, r4
 8004348:	eb12 0801 	adds.w	r8, r2, r1
 800434c:	4629      	mov	r1, r5
 800434e:	eb43 0901 	adc.w	r9, r3, r1
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800435e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004362:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004366:	4690      	mov	r8, r2
 8004368:	4699      	mov	r9, r3
 800436a:	4623      	mov	r3, r4
 800436c:	eb18 0303 	adds.w	r3, r8, r3
 8004370:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004374:	462b      	mov	r3, r5
 8004376:	eb49 0303 	adc.w	r3, r9, r3
 800437a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800437e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800438a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800438e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004392:	460b      	mov	r3, r1
 8004394:	18db      	adds	r3, r3, r3
 8004396:	653b      	str	r3, [r7, #80]	@ 0x50
 8004398:	4613      	mov	r3, r2
 800439a:	eb42 0303 	adc.w	r3, r2, r3
 800439e:	657b      	str	r3, [r7, #84]	@ 0x54
 80043a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80043a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80043a8:	f7fc fc26 	bl	8000bf8 <__aeabi_uldivmod>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4b61      	ldr	r3, [pc, #388]	@ (8004538 <UART_SetConfig+0x2d4>)
 80043b2:	fba3 2302 	umull	r2, r3, r3, r2
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	011c      	lsls	r4, r3, #4
 80043ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043be:	2200      	movs	r2, #0
 80043c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80043c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80043cc:	4642      	mov	r2, r8
 80043ce:	464b      	mov	r3, r9
 80043d0:	1891      	adds	r1, r2, r2
 80043d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80043d4:	415b      	adcs	r3, r3
 80043d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80043dc:	4641      	mov	r1, r8
 80043de:	eb12 0a01 	adds.w	sl, r2, r1
 80043e2:	4649      	mov	r1, r9
 80043e4:	eb43 0b01 	adc.w	fp, r3, r1
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043fc:	4692      	mov	sl, r2
 80043fe:	469b      	mov	fp, r3
 8004400:	4643      	mov	r3, r8
 8004402:	eb1a 0303 	adds.w	r3, sl, r3
 8004406:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800440a:	464b      	mov	r3, r9
 800440c:	eb4b 0303 	adc.w	r3, fp, r3
 8004410:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004420:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004424:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004428:	460b      	mov	r3, r1
 800442a:	18db      	adds	r3, r3, r3
 800442c:	643b      	str	r3, [r7, #64]	@ 0x40
 800442e:	4613      	mov	r3, r2
 8004430:	eb42 0303 	adc.w	r3, r2, r3
 8004434:	647b      	str	r3, [r7, #68]	@ 0x44
 8004436:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800443a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800443e:	f7fc fbdb 	bl	8000bf8 <__aeabi_uldivmod>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	4611      	mov	r1, r2
 8004448:	4b3b      	ldr	r3, [pc, #236]	@ (8004538 <UART_SetConfig+0x2d4>)
 800444a:	fba3 2301 	umull	r2, r3, r3, r1
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	2264      	movs	r2, #100	@ 0x64
 8004452:	fb02 f303 	mul.w	r3, r2, r3
 8004456:	1acb      	subs	r3, r1, r3
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800445e:	4b36      	ldr	r3, [pc, #216]	@ (8004538 <UART_SetConfig+0x2d4>)
 8004460:	fba3 2302 	umull	r2, r3, r3, r2
 8004464:	095b      	lsrs	r3, r3, #5
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800446c:	441c      	add	r4, r3
 800446e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004472:	2200      	movs	r2, #0
 8004474:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004478:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800447c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004480:	4642      	mov	r2, r8
 8004482:	464b      	mov	r3, r9
 8004484:	1891      	adds	r1, r2, r2
 8004486:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004488:	415b      	adcs	r3, r3
 800448a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800448c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004490:	4641      	mov	r1, r8
 8004492:	1851      	adds	r1, r2, r1
 8004494:	6339      	str	r1, [r7, #48]	@ 0x30
 8004496:	4649      	mov	r1, r9
 8004498:	414b      	adcs	r3, r1
 800449a:	637b      	str	r3, [r7, #52]	@ 0x34
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	f04f 0300 	mov.w	r3, #0
 80044a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80044a8:	4659      	mov	r1, fp
 80044aa:	00cb      	lsls	r3, r1, #3
 80044ac:	4651      	mov	r1, sl
 80044ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044b2:	4651      	mov	r1, sl
 80044b4:	00ca      	lsls	r2, r1, #3
 80044b6:	4610      	mov	r0, r2
 80044b8:	4619      	mov	r1, r3
 80044ba:	4603      	mov	r3, r0
 80044bc:	4642      	mov	r2, r8
 80044be:	189b      	adds	r3, r3, r2
 80044c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044c4:	464b      	mov	r3, r9
 80044c6:	460a      	mov	r2, r1
 80044c8:	eb42 0303 	adc.w	r3, r2, r3
 80044cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80044dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80044e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80044e4:	460b      	mov	r3, r1
 80044e6:	18db      	adds	r3, r3, r3
 80044e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044ea:	4613      	mov	r3, r2
 80044ec:	eb42 0303 	adc.w	r3, r2, r3
 80044f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80044fa:	f7fc fb7d 	bl	8000bf8 <__aeabi_uldivmod>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	4b0d      	ldr	r3, [pc, #52]	@ (8004538 <UART_SetConfig+0x2d4>)
 8004504:	fba3 1302 	umull	r1, r3, r3, r2
 8004508:	095b      	lsrs	r3, r3, #5
 800450a:	2164      	movs	r1, #100	@ 0x64
 800450c:	fb01 f303 	mul.w	r3, r1, r3
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	3332      	adds	r3, #50	@ 0x32
 8004516:	4a08      	ldr	r2, [pc, #32]	@ (8004538 <UART_SetConfig+0x2d4>)
 8004518:	fba2 2303 	umull	r2, r3, r2, r3
 800451c:	095b      	lsrs	r3, r3, #5
 800451e:	f003 0207 	and.w	r2, r3, #7
 8004522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4422      	add	r2, r4
 800452a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800452c:	e106      	b.n	800473c <UART_SetConfig+0x4d8>
 800452e:	bf00      	nop
 8004530:	40011000 	.word	0x40011000
 8004534:	40011400 	.word	0x40011400
 8004538:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800453c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004540:	2200      	movs	r2, #0
 8004542:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004546:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800454a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800454e:	4642      	mov	r2, r8
 8004550:	464b      	mov	r3, r9
 8004552:	1891      	adds	r1, r2, r2
 8004554:	6239      	str	r1, [r7, #32]
 8004556:	415b      	adcs	r3, r3
 8004558:	627b      	str	r3, [r7, #36]	@ 0x24
 800455a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800455e:	4641      	mov	r1, r8
 8004560:	1854      	adds	r4, r2, r1
 8004562:	4649      	mov	r1, r9
 8004564:	eb43 0501 	adc.w	r5, r3, r1
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	00eb      	lsls	r3, r5, #3
 8004572:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004576:	00e2      	lsls	r2, r4, #3
 8004578:	4614      	mov	r4, r2
 800457a:	461d      	mov	r5, r3
 800457c:	4643      	mov	r3, r8
 800457e:	18e3      	adds	r3, r4, r3
 8004580:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004584:	464b      	mov	r3, r9
 8004586:	eb45 0303 	adc.w	r3, r5, r3
 800458a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800458e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800459a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800459e:	f04f 0200 	mov.w	r2, #0
 80045a2:	f04f 0300 	mov.w	r3, #0
 80045a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80045aa:	4629      	mov	r1, r5
 80045ac:	008b      	lsls	r3, r1, #2
 80045ae:	4621      	mov	r1, r4
 80045b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045b4:	4621      	mov	r1, r4
 80045b6:	008a      	lsls	r2, r1, #2
 80045b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80045bc:	f7fc fb1c 	bl	8000bf8 <__aeabi_uldivmod>
 80045c0:	4602      	mov	r2, r0
 80045c2:	460b      	mov	r3, r1
 80045c4:	4b60      	ldr	r3, [pc, #384]	@ (8004748 <UART_SetConfig+0x4e4>)
 80045c6:	fba3 2302 	umull	r2, r3, r3, r2
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	011c      	lsls	r4, r3, #4
 80045ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045d2:	2200      	movs	r2, #0
 80045d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80045d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80045dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80045e0:	4642      	mov	r2, r8
 80045e2:	464b      	mov	r3, r9
 80045e4:	1891      	adds	r1, r2, r2
 80045e6:	61b9      	str	r1, [r7, #24]
 80045e8:	415b      	adcs	r3, r3
 80045ea:	61fb      	str	r3, [r7, #28]
 80045ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045f0:	4641      	mov	r1, r8
 80045f2:	1851      	adds	r1, r2, r1
 80045f4:	6139      	str	r1, [r7, #16]
 80045f6:	4649      	mov	r1, r9
 80045f8:	414b      	adcs	r3, r1
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004608:	4659      	mov	r1, fp
 800460a:	00cb      	lsls	r3, r1, #3
 800460c:	4651      	mov	r1, sl
 800460e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004612:	4651      	mov	r1, sl
 8004614:	00ca      	lsls	r2, r1, #3
 8004616:	4610      	mov	r0, r2
 8004618:	4619      	mov	r1, r3
 800461a:	4603      	mov	r3, r0
 800461c:	4642      	mov	r2, r8
 800461e:	189b      	adds	r3, r3, r2
 8004620:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004624:	464b      	mov	r3, r9
 8004626:	460a      	mov	r2, r1
 8004628:	eb42 0303 	adc.w	r3, r2, r3
 800462c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	67bb      	str	r3, [r7, #120]	@ 0x78
 800463a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004648:	4649      	mov	r1, r9
 800464a:	008b      	lsls	r3, r1, #2
 800464c:	4641      	mov	r1, r8
 800464e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004652:	4641      	mov	r1, r8
 8004654:	008a      	lsls	r2, r1, #2
 8004656:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800465a:	f7fc facd 	bl	8000bf8 <__aeabi_uldivmod>
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	4611      	mov	r1, r2
 8004664:	4b38      	ldr	r3, [pc, #224]	@ (8004748 <UART_SetConfig+0x4e4>)
 8004666:	fba3 2301 	umull	r2, r3, r3, r1
 800466a:	095b      	lsrs	r3, r3, #5
 800466c:	2264      	movs	r2, #100	@ 0x64
 800466e:	fb02 f303 	mul.w	r3, r2, r3
 8004672:	1acb      	subs	r3, r1, r3
 8004674:	011b      	lsls	r3, r3, #4
 8004676:	3332      	adds	r3, #50	@ 0x32
 8004678:	4a33      	ldr	r2, [pc, #204]	@ (8004748 <UART_SetConfig+0x4e4>)
 800467a:	fba2 2303 	umull	r2, r3, r2, r3
 800467e:	095b      	lsrs	r3, r3, #5
 8004680:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004684:	441c      	add	r4, r3
 8004686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800468a:	2200      	movs	r2, #0
 800468c:	673b      	str	r3, [r7, #112]	@ 0x70
 800468e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004690:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004694:	4642      	mov	r2, r8
 8004696:	464b      	mov	r3, r9
 8004698:	1891      	adds	r1, r2, r2
 800469a:	60b9      	str	r1, [r7, #8]
 800469c:	415b      	adcs	r3, r3
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046a4:	4641      	mov	r1, r8
 80046a6:	1851      	adds	r1, r2, r1
 80046a8:	6039      	str	r1, [r7, #0]
 80046aa:	4649      	mov	r1, r9
 80046ac:	414b      	adcs	r3, r1
 80046ae:	607b      	str	r3, [r7, #4]
 80046b0:	f04f 0200 	mov.w	r2, #0
 80046b4:	f04f 0300 	mov.w	r3, #0
 80046b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046bc:	4659      	mov	r1, fp
 80046be:	00cb      	lsls	r3, r1, #3
 80046c0:	4651      	mov	r1, sl
 80046c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046c6:	4651      	mov	r1, sl
 80046c8:	00ca      	lsls	r2, r1, #3
 80046ca:	4610      	mov	r0, r2
 80046cc:	4619      	mov	r1, r3
 80046ce:	4603      	mov	r3, r0
 80046d0:	4642      	mov	r2, r8
 80046d2:	189b      	adds	r3, r3, r2
 80046d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046d6:	464b      	mov	r3, r9
 80046d8:	460a      	mov	r2, r1
 80046da:	eb42 0303 	adc.w	r3, r2, r3
 80046de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80046ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	f04f 0300 	mov.w	r3, #0
 80046f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80046f8:	4649      	mov	r1, r9
 80046fa:	008b      	lsls	r3, r1, #2
 80046fc:	4641      	mov	r1, r8
 80046fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004702:	4641      	mov	r1, r8
 8004704:	008a      	lsls	r2, r1, #2
 8004706:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800470a:	f7fc fa75 	bl	8000bf8 <__aeabi_uldivmod>
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	4b0d      	ldr	r3, [pc, #52]	@ (8004748 <UART_SetConfig+0x4e4>)
 8004714:	fba3 1302 	umull	r1, r3, r3, r2
 8004718:	095b      	lsrs	r3, r3, #5
 800471a:	2164      	movs	r1, #100	@ 0x64
 800471c:	fb01 f303 	mul.w	r3, r1, r3
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	3332      	adds	r3, #50	@ 0x32
 8004726:	4a08      	ldr	r2, [pc, #32]	@ (8004748 <UART_SetConfig+0x4e4>)
 8004728:	fba2 2303 	umull	r2, r3, r2, r3
 800472c:	095b      	lsrs	r3, r3, #5
 800472e:	f003 020f 	and.w	r2, r3, #15
 8004732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4422      	add	r2, r4
 800473a:	609a      	str	r2, [r3, #8]
}
 800473c:	bf00      	nop
 800473e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004742:	46bd      	mov	sp, r7
 8004744:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004748:	51eb851f 	.word	0x51eb851f

0800474c <__cvt>:
 800474c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004750:	ec57 6b10 	vmov	r6, r7, d0
 8004754:	2f00      	cmp	r7, #0
 8004756:	460c      	mov	r4, r1
 8004758:	4619      	mov	r1, r3
 800475a:	463b      	mov	r3, r7
 800475c:	bfbb      	ittet	lt
 800475e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004762:	461f      	movlt	r7, r3
 8004764:	2300      	movge	r3, #0
 8004766:	232d      	movlt	r3, #45	@ 0x2d
 8004768:	700b      	strb	r3, [r1, #0]
 800476a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800476c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004770:	4691      	mov	r9, r2
 8004772:	f023 0820 	bic.w	r8, r3, #32
 8004776:	bfbc      	itt	lt
 8004778:	4632      	movlt	r2, r6
 800477a:	4616      	movlt	r6, r2
 800477c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004780:	d005      	beq.n	800478e <__cvt+0x42>
 8004782:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004786:	d100      	bne.n	800478a <__cvt+0x3e>
 8004788:	3401      	adds	r4, #1
 800478a:	2102      	movs	r1, #2
 800478c:	e000      	b.n	8004790 <__cvt+0x44>
 800478e:	2103      	movs	r1, #3
 8004790:	ab03      	add	r3, sp, #12
 8004792:	9301      	str	r3, [sp, #4]
 8004794:	ab02      	add	r3, sp, #8
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	ec47 6b10 	vmov	d0, r6, r7
 800479c:	4653      	mov	r3, sl
 800479e:	4622      	mov	r2, r4
 80047a0:	f000 ff46 	bl	8005630 <_dtoa_r>
 80047a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80047a8:	4605      	mov	r5, r0
 80047aa:	d119      	bne.n	80047e0 <__cvt+0x94>
 80047ac:	f019 0f01 	tst.w	r9, #1
 80047b0:	d00e      	beq.n	80047d0 <__cvt+0x84>
 80047b2:	eb00 0904 	add.w	r9, r0, r4
 80047b6:	2200      	movs	r2, #0
 80047b8:	2300      	movs	r3, #0
 80047ba:	4630      	mov	r0, r6
 80047bc:	4639      	mov	r1, r7
 80047be:	f7fc f98b 	bl	8000ad8 <__aeabi_dcmpeq>
 80047c2:	b108      	cbz	r0, 80047c8 <__cvt+0x7c>
 80047c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80047c8:	2230      	movs	r2, #48	@ 0x30
 80047ca:	9b03      	ldr	r3, [sp, #12]
 80047cc:	454b      	cmp	r3, r9
 80047ce:	d31e      	bcc.n	800480e <__cvt+0xc2>
 80047d0:	9b03      	ldr	r3, [sp, #12]
 80047d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80047d4:	1b5b      	subs	r3, r3, r5
 80047d6:	4628      	mov	r0, r5
 80047d8:	6013      	str	r3, [r2, #0]
 80047da:	b004      	add	sp, #16
 80047dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80047e4:	eb00 0904 	add.w	r9, r0, r4
 80047e8:	d1e5      	bne.n	80047b6 <__cvt+0x6a>
 80047ea:	7803      	ldrb	r3, [r0, #0]
 80047ec:	2b30      	cmp	r3, #48	@ 0x30
 80047ee:	d10a      	bne.n	8004806 <__cvt+0xba>
 80047f0:	2200      	movs	r2, #0
 80047f2:	2300      	movs	r3, #0
 80047f4:	4630      	mov	r0, r6
 80047f6:	4639      	mov	r1, r7
 80047f8:	f7fc f96e 	bl	8000ad8 <__aeabi_dcmpeq>
 80047fc:	b918      	cbnz	r0, 8004806 <__cvt+0xba>
 80047fe:	f1c4 0401 	rsb	r4, r4, #1
 8004802:	f8ca 4000 	str.w	r4, [sl]
 8004806:	f8da 3000 	ldr.w	r3, [sl]
 800480a:	4499      	add	r9, r3
 800480c:	e7d3      	b.n	80047b6 <__cvt+0x6a>
 800480e:	1c59      	adds	r1, r3, #1
 8004810:	9103      	str	r1, [sp, #12]
 8004812:	701a      	strb	r2, [r3, #0]
 8004814:	e7d9      	b.n	80047ca <__cvt+0x7e>

08004816 <__exponent>:
 8004816:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004818:	2900      	cmp	r1, #0
 800481a:	bfba      	itte	lt
 800481c:	4249      	neglt	r1, r1
 800481e:	232d      	movlt	r3, #45	@ 0x2d
 8004820:	232b      	movge	r3, #43	@ 0x2b
 8004822:	2909      	cmp	r1, #9
 8004824:	7002      	strb	r2, [r0, #0]
 8004826:	7043      	strb	r3, [r0, #1]
 8004828:	dd29      	ble.n	800487e <__exponent+0x68>
 800482a:	f10d 0307 	add.w	r3, sp, #7
 800482e:	461d      	mov	r5, r3
 8004830:	270a      	movs	r7, #10
 8004832:	461a      	mov	r2, r3
 8004834:	fbb1 f6f7 	udiv	r6, r1, r7
 8004838:	fb07 1416 	mls	r4, r7, r6, r1
 800483c:	3430      	adds	r4, #48	@ 0x30
 800483e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004842:	460c      	mov	r4, r1
 8004844:	2c63      	cmp	r4, #99	@ 0x63
 8004846:	f103 33ff 	add.w	r3, r3, #4294967295
 800484a:	4631      	mov	r1, r6
 800484c:	dcf1      	bgt.n	8004832 <__exponent+0x1c>
 800484e:	3130      	adds	r1, #48	@ 0x30
 8004850:	1e94      	subs	r4, r2, #2
 8004852:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004856:	1c41      	adds	r1, r0, #1
 8004858:	4623      	mov	r3, r4
 800485a:	42ab      	cmp	r3, r5
 800485c:	d30a      	bcc.n	8004874 <__exponent+0x5e>
 800485e:	f10d 0309 	add.w	r3, sp, #9
 8004862:	1a9b      	subs	r3, r3, r2
 8004864:	42ac      	cmp	r4, r5
 8004866:	bf88      	it	hi
 8004868:	2300      	movhi	r3, #0
 800486a:	3302      	adds	r3, #2
 800486c:	4403      	add	r3, r0
 800486e:	1a18      	subs	r0, r3, r0
 8004870:	b003      	add	sp, #12
 8004872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004874:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004878:	f801 6f01 	strb.w	r6, [r1, #1]!
 800487c:	e7ed      	b.n	800485a <__exponent+0x44>
 800487e:	2330      	movs	r3, #48	@ 0x30
 8004880:	3130      	adds	r1, #48	@ 0x30
 8004882:	7083      	strb	r3, [r0, #2]
 8004884:	70c1      	strb	r1, [r0, #3]
 8004886:	1d03      	adds	r3, r0, #4
 8004888:	e7f1      	b.n	800486e <__exponent+0x58>
	...

0800488c <_printf_float>:
 800488c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004890:	b08d      	sub	sp, #52	@ 0x34
 8004892:	460c      	mov	r4, r1
 8004894:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004898:	4616      	mov	r6, r2
 800489a:	461f      	mov	r7, r3
 800489c:	4605      	mov	r5, r0
 800489e:	f000 fdc7 	bl	8005430 <_localeconv_r>
 80048a2:	6803      	ldr	r3, [r0, #0]
 80048a4:	9304      	str	r3, [sp, #16]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fb fcea 	bl	8000280 <strlen>
 80048ac:	2300      	movs	r3, #0
 80048ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80048b0:	f8d8 3000 	ldr.w	r3, [r8]
 80048b4:	9005      	str	r0, [sp, #20]
 80048b6:	3307      	adds	r3, #7
 80048b8:	f023 0307 	bic.w	r3, r3, #7
 80048bc:	f103 0208 	add.w	r2, r3, #8
 80048c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80048c4:	f8d4 b000 	ldr.w	fp, [r4]
 80048c8:	f8c8 2000 	str.w	r2, [r8]
 80048cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80048d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80048d4:	9307      	str	r3, [sp, #28]
 80048d6:	f8cd 8018 	str.w	r8, [sp, #24]
 80048da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80048de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048e2:	4b9c      	ldr	r3, [pc, #624]	@ (8004b54 <_printf_float+0x2c8>)
 80048e4:	f04f 32ff 	mov.w	r2, #4294967295
 80048e8:	f7fc f928 	bl	8000b3c <__aeabi_dcmpun>
 80048ec:	bb70      	cbnz	r0, 800494c <_printf_float+0xc0>
 80048ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048f2:	4b98      	ldr	r3, [pc, #608]	@ (8004b54 <_printf_float+0x2c8>)
 80048f4:	f04f 32ff 	mov.w	r2, #4294967295
 80048f8:	f7fc f902 	bl	8000b00 <__aeabi_dcmple>
 80048fc:	bb30      	cbnz	r0, 800494c <_printf_float+0xc0>
 80048fe:	2200      	movs	r2, #0
 8004900:	2300      	movs	r3, #0
 8004902:	4640      	mov	r0, r8
 8004904:	4649      	mov	r1, r9
 8004906:	f7fc f8f1 	bl	8000aec <__aeabi_dcmplt>
 800490a:	b110      	cbz	r0, 8004912 <_printf_float+0x86>
 800490c:	232d      	movs	r3, #45	@ 0x2d
 800490e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004912:	4a91      	ldr	r2, [pc, #580]	@ (8004b58 <_printf_float+0x2cc>)
 8004914:	4b91      	ldr	r3, [pc, #580]	@ (8004b5c <_printf_float+0x2d0>)
 8004916:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800491a:	bf94      	ite	ls
 800491c:	4690      	movls	r8, r2
 800491e:	4698      	movhi	r8, r3
 8004920:	2303      	movs	r3, #3
 8004922:	6123      	str	r3, [r4, #16]
 8004924:	f02b 0304 	bic.w	r3, fp, #4
 8004928:	6023      	str	r3, [r4, #0]
 800492a:	f04f 0900 	mov.w	r9, #0
 800492e:	9700      	str	r7, [sp, #0]
 8004930:	4633      	mov	r3, r6
 8004932:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004934:	4621      	mov	r1, r4
 8004936:	4628      	mov	r0, r5
 8004938:	f000 f9d2 	bl	8004ce0 <_printf_common>
 800493c:	3001      	adds	r0, #1
 800493e:	f040 808d 	bne.w	8004a5c <_printf_float+0x1d0>
 8004942:	f04f 30ff 	mov.w	r0, #4294967295
 8004946:	b00d      	add	sp, #52	@ 0x34
 8004948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800494c:	4642      	mov	r2, r8
 800494e:	464b      	mov	r3, r9
 8004950:	4640      	mov	r0, r8
 8004952:	4649      	mov	r1, r9
 8004954:	f7fc f8f2 	bl	8000b3c <__aeabi_dcmpun>
 8004958:	b140      	cbz	r0, 800496c <_printf_float+0xe0>
 800495a:	464b      	mov	r3, r9
 800495c:	2b00      	cmp	r3, #0
 800495e:	bfbc      	itt	lt
 8004960:	232d      	movlt	r3, #45	@ 0x2d
 8004962:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004966:	4a7e      	ldr	r2, [pc, #504]	@ (8004b60 <_printf_float+0x2d4>)
 8004968:	4b7e      	ldr	r3, [pc, #504]	@ (8004b64 <_printf_float+0x2d8>)
 800496a:	e7d4      	b.n	8004916 <_printf_float+0x8a>
 800496c:	6863      	ldr	r3, [r4, #4]
 800496e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004972:	9206      	str	r2, [sp, #24]
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	d13b      	bne.n	80049f0 <_printf_float+0x164>
 8004978:	2306      	movs	r3, #6
 800497a:	6063      	str	r3, [r4, #4]
 800497c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004980:	2300      	movs	r3, #0
 8004982:	6022      	str	r2, [r4, #0]
 8004984:	9303      	str	r3, [sp, #12]
 8004986:	ab0a      	add	r3, sp, #40	@ 0x28
 8004988:	e9cd a301 	strd	sl, r3, [sp, #4]
 800498c:	ab09      	add	r3, sp, #36	@ 0x24
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	6861      	ldr	r1, [r4, #4]
 8004992:	ec49 8b10 	vmov	d0, r8, r9
 8004996:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800499a:	4628      	mov	r0, r5
 800499c:	f7ff fed6 	bl	800474c <__cvt>
 80049a0:	9b06      	ldr	r3, [sp, #24]
 80049a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80049a4:	2b47      	cmp	r3, #71	@ 0x47
 80049a6:	4680      	mov	r8, r0
 80049a8:	d129      	bne.n	80049fe <_printf_float+0x172>
 80049aa:	1cc8      	adds	r0, r1, #3
 80049ac:	db02      	blt.n	80049b4 <_printf_float+0x128>
 80049ae:	6863      	ldr	r3, [r4, #4]
 80049b0:	4299      	cmp	r1, r3
 80049b2:	dd41      	ble.n	8004a38 <_printf_float+0x1ac>
 80049b4:	f1aa 0a02 	sub.w	sl, sl, #2
 80049b8:	fa5f fa8a 	uxtb.w	sl, sl
 80049bc:	3901      	subs	r1, #1
 80049be:	4652      	mov	r2, sl
 80049c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80049c4:	9109      	str	r1, [sp, #36]	@ 0x24
 80049c6:	f7ff ff26 	bl	8004816 <__exponent>
 80049ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80049cc:	1813      	adds	r3, r2, r0
 80049ce:	2a01      	cmp	r2, #1
 80049d0:	4681      	mov	r9, r0
 80049d2:	6123      	str	r3, [r4, #16]
 80049d4:	dc02      	bgt.n	80049dc <_printf_float+0x150>
 80049d6:	6822      	ldr	r2, [r4, #0]
 80049d8:	07d2      	lsls	r2, r2, #31
 80049da:	d501      	bpl.n	80049e0 <_printf_float+0x154>
 80049dc:	3301      	adds	r3, #1
 80049de:	6123      	str	r3, [r4, #16]
 80049e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d0a2      	beq.n	800492e <_printf_float+0xa2>
 80049e8:	232d      	movs	r3, #45	@ 0x2d
 80049ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049ee:	e79e      	b.n	800492e <_printf_float+0xa2>
 80049f0:	9a06      	ldr	r2, [sp, #24]
 80049f2:	2a47      	cmp	r2, #71	@ 0x47
 80049f4:	d1c2      	bne.n	800497c <_printf_float+0xf0>
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1c0      	bne.n	800497c <_printf_float+0xf0>
 80049fa:	2301      	movs	r3, #1
 80049fc:	e7bd      	b.n	800497a <_printf_float+0xee>
 80049fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004a02:	d9db      	bls.n	80049bc <_printf_float+0x130>
 8004a04:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004a08:	d118      	bne.n	8004a3c <_printf_float+0x1b0>
 8004a0a:	2900      	cmp	r1, #0
 8004a0c:	6863      	ldr	r3, [r4, #4]
 8004a0e:	dd0b      	ble.n	8004a28 <_printf_float+0x19c>
 8004a10:	6121      	str	r1, [r4, #16]
 8004a12:	b913      	cbnz	r3, 8004a1a <_printf_float+0x18e>
 8004a14:	6822      	ldr	r2, [r4, #0]
 8004a16:	07d0      	lsls	r0, r2, #31
 8004a18:	d502      	bpl.n	8004a20 <_printf_float+0x194>
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	440b      	add	r3, r1
 8004a1e:	6123      	str	r3, [r4, #16]
 8004a20:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004a22:	f04f 0900 	mov.w	r9, #0
 8004a26:	e7db      	b.n	80049e0 <_printf_float+0x154>
 8004a28:	b913      	cbnz	r3, 8004a30 <_printf_float+0x1a4>
 8004a2a:	6822      	ldr	r2, [r4, #0]
 8004a2c:	07d2      	lsls	r2, r2, #31
 8004a2e:	d501      	bpl.n	8004a34 <_printf_float+0x1a8>
 8004a30:	3302      	adds	r3, #2
 8004a32:	e7f4      	b.n	8004a1e <_printf_float+0x192>
 8004a34:	2301      	movs	r3, #1
 8004a36:	e7f2      	b.n	8004a1e <_printf_float+0x192>
 8004a38:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004a3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a3e:	4299      	cmp	r1, r3
 8004a40:	db05      	blt.n	8004a4e <_printf_float+0x1c2>
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	6121      	str	r1, [r4, #16]
 8004a46:	07d8      	lsls	r0, r3, #31
 8004a48:	d5ea      	bpl.n	8004a20 <_printf_float+0x194>
 8004a4a:	1c4b      	adds	r3, r1, #1
 8004a4c:	e7e7      	b.n	8004a1e <_printf_float+0x192>
 8004a4e:	2900      	cmp	r1, #0
 8004a50:	bfd4      	ite	le
 8004a52:	f1c1 0202 	rsble	r2, r1, #2
 8004a56:	2201      	movgt	r2, #1
 8004a58:	4413      	add	r3, r2
 8004a5a:	e7e0      	b.n	8004a1e <_printf_float+0x192>
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	055a      	lsls	r2, r3, #21
 8004a60:	d407      	bmi.n	8004a72 <_printf_float+0x1e6>
 8004a62:	6923      	ldr	r3, [r4, #16]
 8004a64:	4642      	mov	r2, r8
 8004a66:	4631      	mov	r1, r6
 8004a68:	4628      	mov	r0, r5
 8004a6a:	47b8      	blx	r7
 8004a6c:	3001      	adds	r0, #1
 8004a6e:	d12b      	bne.n	8004ac8 <_printf_float+0x23c>
 8004a70:	e767      	b.n	8004942 <_printf_float+0xb6>
 8004a72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004a76:	f240 80dd 	bls.w	8004c34 <_printf_float+0x3a8>
 8004a7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004a7e:	2200      	movs	r2, #0
 8004a80:	2300      	movs	r3, #0
 8004a82:	f7fc f829 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a86:	2800      	cmp	r0, #0
 8004a88:	d033      	beq.n	8004af2 <_printf_float+0x266>
 8004a8a:	4a37      	ldr	r2, [pc, #220]	@ (8004b68 <_printf_float+0x2dc>)
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	4631      	mov	r1, r6
 8004a90:	4628      	mov	r0, r5
 8004a92:	47b8      	blx	r7
 8004a94:	3001      	adds	r0, #1
 8004a96:	f43f af54 	beq.w	8004942 <_printf_float+0xb6>
 8004a9a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004a9e:	4543      	cmp	r3, r8
 8004aa0:	db02      	blt.n	8004aa8 <_printf_float+0x21c>
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	07d8      	lsls	r0, r3, #31
 8004aa6:	d50f      	bpl.n	8004ac8 <_printf_float+0x23c>
 8004aa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004aac:	4631      	mov	r1, r6
 8004aae:	4628      	mov	r0, r5
 8004ab0:	47b8      	blx	r7
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	f43f af45 	beq.w	8004942 <_printf_float+0xb6>
 8004ab8:	f04f 0900 	mov.w	r9, #0
 8004abc:	f108 38ff 	add.w	r8, r8, #4294967295
 8004ac0:	f104 0a1a 	add.w	sl, r4, #26
 8004ac4:	45c8      	cmp	r8, r9
 8004ac6:	dc09      	bgt.n	8004adc <_printf_float+0x250>
 8004ac8:	6823      	ldr	r3, [r4, #0]
 8004aca:	079b      	lsls	r3, r3, #30
 8004acc:	f100 8103 	bmi.w	8004cd6 <_printf_float+0x44a>
 8004ad0:	68e0      	ldr	r0, [r4, #12]
 8004ad2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ad4:	4298      	cmp	r0, r3
 8004ad6:	bfb8      	it	lt
 8004ad8:	4618      	movlt	r0, r3
 8004ada:	e734      	b.n	8004946 <_printf_float+0xba>
 8004adc:	2301      	movs	r3, #1
 8004ade:	4652      	mov	r2, sl
 8004ae0:	4631      	mov	r1, r6
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	47b8      	blx	r7
 8004ae6:	3001      	adds	r0, #1
 8004ae8:	f43f af2b 	beq.w	8004942 <_printf_float+0xb6>
 8004aec:	f109 0901 	add.w	r9, r9, #1
 8004af0:	e7e8      	b.n	8004ac4 <_printf_float+0x238>
 8004af2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	dc39      	bgt.n	8004b6c <_printf_float+0x2e0>
 8004af8:	4a1b      	ldr	r2, [pc, #108]	@ (8004b68 <_printf_float+0x2dc>)
 8004afa:	2301      	movs	r3, #1
 8004afc:	4631      	mov	r1, r6
 8004afe:	4628      	mov	r0, r5
 8004b00:	47b8      	blx	r7
 8004b02:	3001      	adds	r0, #1
 8004b04:	f43f af1d 	beq.w	8004942 <_printf_float+0xb6>
 8004b08:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004b0c:	ea59 0303 	orrs.w	r3, r9, r3
 8004b10:	d102      	bne.n	8004b18 <_printf_float+0x28c>
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	07d9      	lsls	r1, r3, #31
 8004b16:	d5d7      	bpl.n	8004ac8 <_printf_float+0x23c>
 8004b18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b1c:	4631      	mov	r1, r6
 8004b1e:	4628      	mov	r0, r5
 8004b20:	47b8      	blx	r7
 8004b22:	3001      	adds	r0, #1
 8004b24:	f43f af0d 	beq.w	8004942 <_printf_float+0xb6>
 8004b28:	f04f 0a00 	mov.w	sl, #0
 8004b2c:	f104 0b1a 	add.w	fp, r4, #26
 8004b30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b32:	425b      	negs	r3, r3
 8004b34:	4553      	cmp	r3, sl
 8004b36:	dc01      	bgt.n	8004b3c <_printf_float+0x2b0>
 8004b38:	464b      	mov	r3, r9
 8004b3a:	e793      	b.n	8004a64 <_printf_float+0x1d8>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	465a      	mov	r2, fp
 8004b40:	4631      	mov	r1, r6
 8004b42:	4628      	mov	r0, r5
 8004b44:	47b8      	blx	r7
 8004b46:	3001      	adds	r0, #1
 8004b48:	f43f aefb 	beq.w	8004942 <_printf_float+0xb6>
 8004b4c:	f10a 0a01 	add.w	sl, sl, #1
 8004b50:	e7ee      	b.n	8004b30 <_printf_float+0x2a4>
 8004b52:	bf00      	nop
 8004b54:	7fefffff 	.word	0x7fefffff
 8004b58:	08007228 	.word	0x08007228
 8004b5c:	0800722c 	.word	0x0800722c
 8004b60:	08007230 	.word	0x08007230
 8004b64:	08007234 	.word	0x08007234
 8004b68:	08007238 	.word	0x08007238
 8004b6c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004b6e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004b72:	4553      	cmp	r3, sl
 8004b74:	bfa8      	it	ge
 8004b76:	4653      	movge	r3, sl
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	4699      	mov	r9, r3
 8004b7c:	dc36      	bgt.n	8004bec <_printf_float+0x360>
 8004b7e:	f04f 0b00 	mov.w	fp, #0
 8004b82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b86:	f104 021a 	add.w	r2, r4, #26
 8004b8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004b8c:	9306      	str	r3, [sp, #24]
 8004b8e:	eba3 0309 	sub.w	r3, r3, r9
 8004b92:	455b      	cmp	r3, fp
 8004b94:	dc31      	bgt.n	8004bfa <_printf_float+0x36e>
 8004b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b98:	459a      	cmp	sl, r3
 8004b9a:	dc3a      	bgt.n	8004c12 <_printf_float+0x386>
 8004b9c:	6823      	ldr	r3, [r4, #0]
 8004b9e:	07da      	lsls	r2, r3, #31
 8004ba0:	d437      	bmi.n	8004c12 <_printf_float+0x386>
 8004ba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ba4:	ebaa 0903 	sub.w	r9, sl, r3
 8004ba8:	9b06      	ldr	r3, [sp, #24]
 8004baa:	ebaa 0303 	sub.w	r3, sl, r3
 8004bae:	4599      	cmp	r9, r3
 8004bb0:	bfa8      	it	ge
 8004bb2:	4699      	movge	r9, r3
 8004bb4:	f1b9 0f00 	cmp.w	r9, #0
 8004bb8:	dc33      	bgt.n	8004c22 <_printf_float+0x396>
 8004bba:	f04f 0800 	mov.w	r8, #0
 8004bbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bc2:	f104 0b1a 	add.w	fp, r4, #26
 8004bc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bc8:	ebaa 0303 	sub.w	r3, sl, r3
 8004bcc:	eba3 0309 	sub.w	r3, r3, r9
 8004bd0:	4543      	cmp	r3, r8
 8004bd2:	f77f af79 	ble.w	8004ac8 <_printf_float+0x23c>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	465a      	mov	r2, fp
 8004bda:	4631      	mov	r1, r6
 8004bdc:	4628      	mov	r0, r5
 8004bde:	47b8      	blx	r7
 8004be0:	3001      	adds	r0, #1
 8004be2:	f43f aeae 	beq.w	8004942 <_printf_float+0xb6>
 8004be6:	f108 0801 	add.w	r8, r8, #1
 8004bea:	e7ec      	b.n	8004bc6 <_printf_float+0x33a>
 8004bec:	4642      	mov	r2, r8
 8004bee:	4631      	mov	r1, r6
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	47b8      	blx	r7
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	d1c2      	bne.n	8004b7e <_printf_float+0x2f2>
 8004bf8:	e6a3      	b.n	8004942 <_printf_float+0xb6>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	4631      	mov	r1, r6
 8004bfe:	4628      	mov	r0, r5
 8004c00:	9206      	str	r2, [sp, #24]
 8004c02:	47b8      	blx	r7
 8004c04:	3001      	adds	r0, #1
 8004c06:	f43f ae9c 	beq.w	8004942 <_printf_float+0xb6>
 8004c0a:	9a06      	ldr	r2, [sp, #24]
 8004c0c:	f10b 0b01 	add.w	fp, fp, #1
 8004c10:	e7bb      	b.n	8004b8a <_printf_float+0x2fe>
 8004c12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c16:	4631      	mov	r1, r6
 8004c18:	4628      	mov	r0, r5
 8004c1a:	47b8      	blx	r7
 8004c1c:	3001      	adds	r0, #1
 8004c1e:	d1c0      	bne.n	8004ba2 <_printf_float+0x316>
 8004c20:	e68f      	b.n	8004942 <_printf_float+0xb6>
 8004c22:	9a06      	ldr	r2, [sp, #24]
 8004c24:	464b      	mov	r3, r9
 8004c26:	4442      	add	r2, r8
 8004c28:	4631      	mov	r1, r6
 8004c2a:	4628      	mov	r0, r5
 8004c2c:	47b8      	blx	r7
 8004c2e:	3001      	adds	r0, #1
 8004c30:	d1c3      	bne.n	8004bba <_printf_float+0x32e>
 8004c32:	e686      	b.n	8004942 <_printf_float+0xb6>
 8004c34:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004c38:	f1ba 0f01 	cmp.w	sl, #1
 8004c3c:	dc01      	bgt.n	8004c42 <_printf_float+0x3b6>
 8004c3e:	07db      	lsls	r3, r3, #31
 8004c40:	d536      	bpl.n	8004cb0 <_printf_float+0x424>
 8004c42:	2301      	movs	r3, #1
 8004c44:	4642      	mov	r2, r8
 8004c46:	4631      	mov	r1, r6
 8004c48:	4628      	mov	r0, r5
 8004c4a:	47b8      	blx	r7
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	f43f ae78 	beq.w	8004942 <_printf_float+0xb6>
 8004c52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c56:	4631      	mov	r1, r6
 8004c58:	4628      	mov	r0, r5
 8004c5a:	47b8      	blx	r7
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	f43f ae70 	beq.w	8004942 <_printf_float+0xb6>
 8004c62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004c66:	2200      	movs	r2, #0
 8004c68:	2300      	movs	r3, #0
 8004c6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c6e:	f7fb ff33 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c72:	b9c0      	cbnz	r0, 8004ca6 <_printf_float+0x41a>
 8004c74:	4653      	mov	r3, sl
 8004c76:	f108 0201 	add.w	r2, r8, #1
 8004c7a:	4631      	mov	r1, r6
 8004c7c:	4628      	mov	r0, r5
 8004c7e:	47b8      	blx	r7
 8004c80:	3001      	adds	r0, #1
 8004c82:	d10c      	bne.n	8004c9e <_printf_float+0x412>
 8004c84:	e65d      	b.n	8004942 <_printf_float+0xb6>
 8004c86:	2301      	movs	r3, #1
 8004c88:	465a      	mov	r2, fp
 8004c8a:	4631      	mov	r1, r6
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	47b8      	blx	r7
 8004c90:	3001      	adds	r0, #1
 8004c92:	f43f ae56 	beq.w	8004942 <_printf_float+0xb6>
 8004c96:	f108 0801 	add.w	r8, r8, #1
 8004c9a:	45d0      	cmp	r8, sl
 8004c9c:	dbf3      	blt.n	8004c86 <_printf_float+0x3fa>
 8004c9e:	464b      	mov	r3, r9
 8004ca0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004ca4:	e6df      	b.n	8004a66 <_printf_float+0x1da>
 8004ca6:	f04f 0800 	mov.w	r8, #0
 8004caa:	f104 0b1a 	add.w	fp, r4, #26
 8004cae:	e7f4      	b.n	8004c9a <_printf_float+0x40e>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	4642      	mov	r2, r8
 8004cb4:	e7e1      	b.n	8004c7a <_printf_float+0x3ee>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	464a      	mov	r2, r9
 8004cba:	4631      	mov	r1, r6
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	47b8      	blx	r7
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	f43f ae3e 	beq.w	8004942 <_printf_float+0xb6>
 8004cc6:	f108 0801 	add.w	r8, r8, #1
 8004cca:	68e3      	ldr	r3, [r4, #12]
 8004ccc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004cce:	1a5b      	subs	r3, r3, r1
 8004cd0:	4543      	cmp	r3, r8
 8004cd2:	dcf0      	bgt.n	8004cb6 <_printf_float+0x42a>
 8004cd4:	e6fc      	b.n	8004ad0 <_printf_float+0x244>
 8004cd6:	f04f 0800 	mov.w	r8, #0
 8004cda:	f104 0919 	add.w	r9, r4, #25
 8004cde:	e7f4      	b.n	8004cca <_printf_float+0x43e>

08004ce0 <_printf_common>:
 8004ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ce4:	4616      	mov	r6, r2
 8004ce6:	4698      	mov	r8, r3
 8004ce8:	688a      	ldr	r2, [r1, #8]
 8004cea:	690b      	ldr	r3, [r1, #16]
 8004cec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	bfb8      	it	lt
 8004cf4:	4613      	movlt	r3, r2
 8004cf6:	6033      	str	r3, [r6, #0]
 8004cf8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004cfc:	4607      	mov	r7, r0
 8004cfe:	460c      	mov	r4, r1
 8004d00:	b10a      	cbz	r2, 8004d06 <_printf_common+0x26>
 8004d02:	3301      	adds	r3, #1
 8004d04:	6033      	str	r3, [r6, #0]
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	0699      	lsls	r1, r3, #26
 8004d0a:	bf42      	ittt	mi
 8004d0c:	6833      	ldrmi	r3, [r6, #0]
 8004d0e:	3302      	addmi	r3, #2
 8004d10:	6033      	strmi	r3, [r6, #0]
 8004d12:	6825      	ldr	r5, [r4, #0]
 8004d14:	f015 0506 	ands.w	r5, r5, #6
 8004d18:	d106      	bne.n	8004d28 <_printf_common+0x48>
 8004d1a:	f104 0a19 	add.w	sl, r4, #25
 8004d1e:	68e3      	ldr	r3, [r4, #12]
 8004d20:	6832      	ldr	r2, [r6, #0]
 8004d22:	1a9b      	subs	r3, r3, r2
 8004d24:	42ab      	cmp	r3, r5
 8004d26:	dc26      	bgt.n	8004d76 <_printf_common+0x96>
 8004d28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d2c:	6822      	ldr	r2, [r4, #0]
 8004d2e:	3b00      	subs	r3, #0
 8004d30:	bf18      	it	ne
 8004d32:	2301      	movne	r3, #1
 8004d34:	0692      	lsls	r2, r2, #26
 8004d36:	d42b      	bmi.n	8004d90 <_printf_common+0xb0>
 8004d38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d3c:	4641      	mov	r1, r8
 8004d3e:	4638      	mov	r0, r7
 8004d40:	47c8      	blx	r9
 8004d42:	3001      	adds	r0, #1
 8004d44:	d01e      	beq.n	8004d84 <_printf_common+0xa4>
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	6922      	ldr	r2, [r4, #16]
 8004d4a:	f003 0306 	and.w	r3, r3, #6
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	bf02      	ittt	eq
 8004d52:	68e5      	ldreq	r5, [r4, #12]
 8004d54:	6833      	ldreq	r3, [r6, #0]
 8004d56:	1aed      	subeq	r5, r5, r3
 8004d58:	68a3      	ldr	r3, [r4, #8]
 8004d5a:	bf0c      	ite	eq
 8004d5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d60:	2500      	movne	r5, #0
 8004d62:	4293      	cmp	r3, r2
 8004d64:	bfc4      	itt	gt
 8004d66:	1a9b      	subgt	r3, r3, r2
 8004d68:	18ed      	addgt	r5, r5, r3
 8004d6a:	2600      	movs	r6, #0
 8004d6c:	341a      	adds	r4, #26
 8004d6e:	42b5      	cmp	r5, r6
 8004d70:	d11a      	bne.n	8004da8 <_printf_common+0xc8>
 8004d72:	2000      	movs	r0, #0
 8004d74:	e008      	b.n	8004d88 <_printf_common+0xa8>
 8004d76:	2301      	movs	r3, #1
 8004d78:	4652      	mov	r2, sl
 8004d7a:	4641      	mov	r1, r8
 8004d7c:	4638      	mov	r0, r7
 8004d7e:	47c8      	blx	r9
 8004d80:	3001      	adds	r0, #1
 8004d82:	d103      	bne.n	8004d8c <_printf_common+0xac>
 8004d84:	f04f 30ff 	mov.w	r0, #4294967295
 8004d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d8c:	3501      	adds	r5, #1
 8004d8e:	e7c6      	b.n	8004d1e <_printf_common+0x3e>
 8004d90:	18e1      	adds	r1, r4, r3
 8004d92:	1c5a      	adds	r2, r3, #1
 8004d94:	2030      	movs	r0, #48	@ 0x30
 8004d96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d9a:	4422      	add	r2, r4
 8004d9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004da0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004da4:	3302      	adds	r3, #2
 8004da6:	e7c7      	b.n	8004d38 <_printf_common+0x58>
 8004da8:	2301      	movs	r3, #1
 8004daa:	4622      	mov	r2, r4
 8004dac:	4641      	mov	r1, r8
 8004dae:	4638      	mov	r0, r7
 8004db0:	47c8      	blx	r9
 8004db2:	3001      	adds	r0, #1
 8004db4:	d0e6      	beq.n	8004d84 <_printf_common+0xa4>
 8004db6:	3601      	adds	r6, #1
 8004db8:	e7d9      	b.n	8004d6e <_printf_common+0x8e>
	...

08004dbc <_printf_i>:
 8004dbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dc0:	7e0f      	ldrb	r7, [r1, #24]
 8004dc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004dc4:	2f78      	cmp	r7, #120	@ 0x78
 8004dc6:	4691      	mov	r9, r2
 8004dc8:	4680      	mov	r8, r0
 8004dca:	460c      	mov	r4, r1
 8004dcc:	469a      	mov	sl, r3
 8004dce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004dd2:	d807      	bhi.n	8004de4 <_printf_i+0x28>
 8004dd4:	2f62      	cmp	r7, #98	@ 0x62
 8004dd6:	d80a      	bhi.n	8004dee <_printf_i+0x32>
 8004dd8:	2f00      	cmp	r7, #0
 8004dda:	f000 80d2 	beq.w	8004f82 <_printf_i+0x1c6>
 8004dde:	2f58      	cmp	r7, #88	@ 0x58
 8004de0:	f000 80b9 	beq.w	8004f56 <_printf_i+0x19a>
 8004de4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004de8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004dec:	e03a      	b.n	8004e64 <_printf_i+0xa8>
 8004dee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004df2:	2b15      	cmp	r3, #21
 8004df4:	d8f6      	bhi.n	8004de4 <_printf_i+0x28>
 8004df6:	a101      	add	r1, pc, #4	@ (adr r1, 8004dfc <_printf_i+0x40>)
 8004df8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004dfc:	08004e55 	.word	0x08004e55
 8004e00:	08004e69 	.word	0x08004e69
 8004e04:	08004de5 	.word	0x08004de5
 8004e08:	08004de5 	.word	0x08004de5
 8004e0c:	08004de5 	.word	0x08004de5
 8004e10:	08004de5 	.word	0x08004de5
 8004e14:	08004e69 	.word	0x08004e69
 8004e18:	08004de5 	.word	0x08004de5
 8004e1c:	08004de5 	.word	0x08004de5
 8004e20:	08004de5 	.word	0x08004de5
 8004e24:	08004de5 	.word	0x08004de5
 8004e28:	08004f69 	.word	0x08004f69
 8004e2c:	08004e93 	.word	0x08004e93
 8004e30:	08004f23 	.word	0x08004f23
 8004e34:	08004de5 	.word	0x08004de5
 8004e38:	08004de5 	.word	0x08004de5
 8004e3c:	08004f8b 	.word	0x08004f8b
 8004e40:	08004de5 	.word	0x08004de5
 8004e44:	08004e93 	.word	0x08004e93
 8004e48:	08004de5 	.word	0x08004de5
 8004e4c:	08004de5 	.word	0x08004de5
 8004e50:	08004f2b 	.word	0x08004f2b
 8004e54:	6833      	ldr	r3, [r6, #0]
 8004e56:	1d1a      	adds	r2, r3, #4
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6032      	str	r2, [r6, #0]
 8004e5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e64:	2301      	movs	r3, #1
 8004e66:	e09d      	b.n	8004fa4 <_printf_i+0x1e8>
 8004e68:	6833      	ldr	r3, [r6, #0]
 8004e6a:	6820      	ldr	r0, [r4, #0]
 8004e6c:	1d19      	adds	r1, r3, #4
 8004e6e:	6031      	str	r1, [r6, #0]
 8004e70:	0606      	lsls	r6, r0, #24
 8004e72:	d501      	bpl.n	8004e78 <_printf_i+0xbc>
 8004e74:	681d      	ldr	r5, [r3, #0]
 8004e76:	e003      	b.n	8004e80 <_printf_i+0xc4>
 8004e78:	0645      	lsls	r5, r0, #25
 8004e7a:	d5fb      	bpl.n	8004e74 <_printf_i+0xb8>
 8004e7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e80:	2d00      	cmp	r5, #0
 8004e82:	da03      	bge.n	8004e8c <_printf_i+0xd0>
 8004e84:	232d      	movs	r3, #45	@ 0x2d
 8004e86:	426d      	negs	r5, r5
 8004e88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e8c:	4859      	ldr	r0, [pc, #356]	@ (8004ff4 <_printf_i+0x238>)
 8004e8e:	230a      	movs	r3, #10
 8004e90:	e011      	b.n	8004eb6 <_printf_i+0xfa>
 8004e92:	6821      	ldr	r1, [r4, #0]
 8004e94:	6833      	ldr	r3, [r6, #0]
 8004e96:	0608      	lsls	r0, r1, #24
 8004e98:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e9c:	d402      	bmi.n	8004ea4 <_printf_i+0xe8>
 8004e9e:	0649      	lsls	r1, r1, #25
 8004ea0:	bf48      	it	mi
 8004ea2:	b2ad      	uxthmi	r5, r5
 8004ea4:	2f6f      	cmp	r7, #111	@ 0x6f
 8004ea6:	4853      	ldr	r0, [pc, #332]	@ (8004ff4 <_printf_i+0x238>)
 8004ea8:	6033      	str	r3, [r6, #0]
 8004eaa:	bf14      	ite	ne
 8004eac:	230a      	movne	r3, #10
 8004eae:	2308      	moveq	r3, #8
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004eb6:	6866      	ldr	r6, [r4, #4]
 8004eb8:	60a6      	str	r6, [r4, #8]
 8004eba:	2e00      	cmp	r6, #0
 8004ebc:	bfa2      	ittt	ge
 8004ebe:	6821      	ldrge	r1, [r4, #0]
 8004ec0:	f021 0104 	bicge.w	r1, r1, #4
 8004ec4:	6021      	strge	r1, [r4, #0]
 8004ec6:	b90d      	cbnz	r5, 8004ecc <_printf_i+0x110>
 8004ec8:	2e00      	cmp	r6, #0
 8004eca:	d04b      	beq.n	8004f64 <_printf_i+0x1a8>
 8004ecc:	4616      	mov	r6, r2
 8004ece:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ed2:	fb03 5711 	mls	r7, r3, r1, r5
 8004ed6:	5dc7      	ldrb	r7, [r0, r7]
 8004ed8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004edc:	462f      	mov	r7, r5
 8004ede:	42bb      	cmp	r3, r7
 8004ee0:	460d      	mov	r5, r1
 8004ee2:	d9f4      	bls.n	8004ece <_printf_i+0x112>
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d10b      	bne.n	8004f00 <_printf_i+0x144>
 8004ee8:	6823      	ldr	r3, [r4, #0]
 8004eea:	07df      	lsls	r7, r3, #31
 8004eec:	d508      	bpl.n	8004f00 <_printf_i+0x144>
 8004eee:	6923      	ldr	r3, [r4, #16]
 8004ef0:	6861      	ldr	r1, [r4, #4]
 8004ef2:	4299      	cmp	r1, r3
 8004ef4:	bfde      	ittt	le
 8004ef6:	2330      	movle	r3, #48	@ 0x30
 8004ef8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004efc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f00:	1b92      	subs	r2, r2, r6
 8004f02:	6122      	str	r2, [r4, #16]
 8004f04:	f8cd a000 	str.w	sl, [sp]
 8004f08:	464b      	mov	r3, r9
 8004f0a:	aa03      	add	r2, sp, #12
 8004f0c:	4621      	mov	r1, r4
 8004f0e:	4640      	mov	r0, r8
 8004f10:	f7ff fee6 	bl	8004ce0 <_printf_common>
 8004f14:	3001      	adds	r0, #1
 8004f16:	d14a      	bne.n	8004fae <_printf_i+0x1f2>
 8004f18:	f04f 30ff 	mov.w	r0, #4294967295
 8004f1c:	b004      	add	sp, #16
 8004f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f22:	6823      	ldr	r3, [r4, #0]
 8004f24:	f043 0320 	orr.w	r3, r3, #32
 8004f28:	6023      	str	r3, [r4, #0]
 8004f2a:	4833      	ldr	r0, [pc, #204]	@ (8004ff8 <_printf_i+0x23c>)
 8004f2c:	2778      	movs	r7, #120	@ 0x78
 8004f2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	6831      	ldr	r1, [r6, #0]
 8004f36:	061f      	lsls	r7, r3, #24
 8004f38:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f3c:	d402      	bmi.n	8004f44 <_printf_i+0x188>
 8004f3e:	065f      	lsls	r7, r3, #25
 8004f40:	bf48      	it	mi
 8004f42:	b2ad      	uxthmi	r5, r5
 8004f44:	6031      	str	r1, [r6, #0]
 8004f46:	07d9      	lsls	r1, r3, #31
 8004f48:	bf44      	itt	mi
 8004f4a:	f043 0320 	orrmi.w	r3, r3, #32
 8004f4e:	6023      	strmi	r3, [r4, #0]
 8004f50:	b11d      	cbz	r5, 8004f5a <_printf_i+0x19e>
 8004f52:	2310      	movs	r3, #16
 8004f54:	e7ac      	b.n	8004eb0 <_printf_i+0xf4>
 8004f56:	4827      	ldr	r0, [pc, #156]	@ (8004ff4 <_printf_i+0x238>)
 8004f58:	e7e9      	b.n	8004f2e <_printf_i+0x172>
 8004f5a:	6823      	ldr	r3, [r4, #0]
 8004f5c:	f023 0320 	bic.w	r3, r3, #32
 8004f60:	6023      	str	r3, [r4, #0]
 8004f62:	e7f6      	b.n	8004f52 <_printf_i+0x196>
 8004f64:	4616      	mov	r6, r2
 8004f66:	e7bd      	b.n	8004ee4 <_printf_i+0x128>
 8004f68:	6833      	ldr	r3, [r6, #0]
 8004f6a:	6825      	ldr	r5, [r4, #0]
 8004f6c:	6961      	ldr	r1, [r4, #20]
 8004f6e:	1d18      	adds	r0, r3, #4
 8004f70:	6030      	str	r0, [r6, #0]
 8004f72:	062e      	lsls	r6, r5, #24
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	d501      	bpl.n	8004f7c <_printf_i+0x1c0>
 8004f78:	6019      	str	r1, [r3, #0]
 8004f7a:	e002      	b.n	8004f82 <_printf_i+0x1c6>
 8004f7c:	0668      	lsls	r0, r5, #25
 8004f7e:	d5fb      	bpl.n	8004f78 <_printf_i+0x1bc>
 8004f80:	8019      	strh	r1, [r3, #0]
 8004f82:	2300      	movs	r3, #0
 8004f84:	6123      	str	r3, [r4, #16]
 8004f86:	4616      	mov	r6, r2
 8004f88:	e7bc      	b.n	8004f04 <_printf_i+0x148>
 8004f8a:	6833      	ldr	r3, [r6, #0]
 8004f8c:	1d1a      	adds	r2, r3, #4
 8004f8e:	6032      	str	r2, [r6, #0]
 8004f90:	681e      	ldr	r6, [r3, #0]
 8004f92:	6862      	ldr	r2, [r4, #4]
 8004f94:	2100      	movs	r1, #0
 8004f96:	4630      	mov	r0, r6
 8004f98:	f7fb f922 	bl	80001e0 <memchr>
 8004f9c:	b108      	cbz	r0, 8004fa2 <_printf_i+0x1e6>
 8004f9e:	1b80      	subs	r0, r0, r6
 8004fa0:	6060      	str	r0, [r4, #4]
 8004fa2:	6863      	ldr	r3, [r4, #4]
 8004fa4:	6123      	str	r3, [r4, #16]
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fac:	e7aa      	b.n	8004f04 <_printf_i+0x148>
 8004fae:	6923      	ldr	r3, [r4, #16]
 8004fb0:	4632      	mov	r2, r6
 8004fb2:	4649      	mov	r1, r9
 8004fb4:	4640      	mov	r0, r8
 8004fb6:	47d0      	blx	sl
 8004fb8:	3001      	adds	r0, #1
 8004fba:	d0ad      	beq.n	8004f18 <_printf_i+0x15c>
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	079b      	lsls	r3, r3, #30
 8004fc0:	d413      	bmi.n	8004fea <_printf_i+0x22e>
 8004fc2:	68e0      	ldr	r0, [r4, #12]
 8004fc4:	9b03      	ldr	r3, [sp, #12]
 8004fc6:	4298      	cmp	r0, r3
 8004fc8:	bfb8      	it	lt
 8004fca:	4618      	movlt	r0, r3
 8004fcc:	e7a6      	b.n	8004f1c <_printf_i+0x160>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	4632      	mov	r2, r6
 8004fd2:	4649      	mov	r1, r9
 8004fd4:	4640      	mov	r0, r8
 8004fd6:	47d0      	blx	sl
 8004fd8:	3001      	adds	r0, #1
 8004fda:	d09d      	beq.n	8004f18 <_printf_i+0x15c>
 8004fdc:	3501      	adds	r5, #1
 8004fde:	68e3      	ldr	r3, [r4, #12]
 8004fe0:	9903      	ldr	r1, [sp, #12]
 8004fe2:	1a5b      	subs	r3, r3, r1
 8004fe4:	42ab      	cmp	r3, r5
 8004fe6:	dcf2      	bgt.n	8004fce <_printf_i+0x212>
 8004fe8:	e7eb      	b.n	8004fc2 <_printf_i+0x206>
 8004fea:	2500      	movs	r5, #0
 8004fec:	f104 0619 	add.w	r6, r4, #25
 8004ff0:	e7f5      	b.n	8004fde <_printf_i+0x222>
 8004ff2:	bf00      	nop
 8004ff4:	0800723a 	.word	0x0800723a
 8004ff8:	0800724b 	.word	0x0800724b

08004ffc <std>:
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	b510      	push	{r4, lr}
 8005000:	4604      	mov	r4, r0
 8005002:	e9c0 3300 	strd	r3, r3, [r0]
 8005006:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800500a:	6083      	str	r3, [r0, #8]
 800500c:	8181      	strh	r1, [r0, #12]
 800500e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005010:	81c2      	strh	r2, [r0, #14]
 8005012:	6183      	str	r3, [r0, #24]
 8005014:	4619      	mov	r1, r3
 8005016:	2208      	movs	r2, #8
 8005018:	305c      	adds	r0, #92	@ 0x5c
 800501a:	f000 fa01 	bl	8005420 <memset>
 800501e:	4b0d      	ldr	r3, [pc, #52]	@ (8005054 <std+0x58>)
 8005020:	6263      	str	r3, [r4, #36]	@ 0x24
 8005022:	4b0d      	ldr	r3, [pc, #52]	@ (8005058 <std+0x5c>)
 8005024:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005026:	4b0d      	ldr	r3, [pc, #52]	@ (800505c <std+0x60>)
 8005028:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800502a:	4b0d      	ldr	r3, [pc, #52]	@ (8005060 <std+0x64>)
 800502c:	6323      	str	r3, [r4, #48]	@ 0x30
 800502e:	4b0d      	ldr	r3, [pc, #52]	@ (8005064 <std+0x68>)
 8005030:	6224      	str	r4, [r4, #32]
 8005032:	429c      	cmp	r4, r3
 8005034:	d006      	beq.n	8005044 <std+0x48>
 8005036:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800503a:	4294      	cmp	r4, r2
 800503c:	d002      	beq.n	8005044 <std+0x48>
 800503e:	33d0      	adds	r3, #208	@ 0xd0
 8005040:	429c      	cmp	r4, r3
 8005042:	d105      	bne.n	8005050 <std+0x54>
 8005044:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800504c:	f000 ba64 	b.w	8005518 <__retarget_lock_init_recursive>
 8005050:	bd10      	pop	{r4, pc}
 8005052:	bf00      	nop
 8005054:	08005271 	.word	0x08005271
 8005058:	08005293 	.word	0x08005293
 800505c:	080052cb 	.word	0x080052cb
 8005060:	080052ef 	.word	0x080052ef
 8005064:	2000038c 	.word	0x2000038c

08005068 <stdio_exit_handler>:
 8005068:	4a02      	ldr	r2, [pc, #8]	@ (8005074 <stdio_exit_handler+0xc>)
 800506a:	4903      	ldr	r1, [pc, #12]	@ (8005078 <stdio_exit_handler+0x10>)
 800506c:	4803      	ldr	r0, [pc, #12]	@ (800507c <stdio_exit_handler+0x14>)
 800506e:	f000 b869 	b.w	8005144 <_fwalk_sglue>
 8005072:	bf00      	nop
 8005074:	20000028 	.word	0x20000028
 8005078:	08006e49 	.word	0x08006e49
 800507c:	20000038 	.word	0x20000038

08005080 <cleanup_stdio>:
 8005080:	6841      	ldr	r1, [r0, #4]
 8005082:	4b0c      	ldr	r3, [pc, #48]	@ (80050b4 <cleanup_stdio+0x34>)
 8005084:	4299      	cmp	r1, r3
 8005086:	b510      	push	{r4, lr}
 8005088:	4604      	mov	r4, r0
 800508a:	d001      	beq.n	8005090 <cleanup_stdio+0x10>
 800508c:	f001 fedc 	bl	8006e48 <_fflush_r>
 8005090:	68a1      	ldr	r1, [r4, #8]
 8005092:	4b09      	ldr	r3, [pc, #36]	@ (80050b8 <cleanup_stdio+0x38>)
 8005094:	4299      	cmp	r1, r3
 8005096:	d002      	beq.n	800509e <cleanup_stdio+0x1e>
 8005098:	4620      	mov	r0, r4
 800509a:	f001 fed5 	bl	8006e48 <_fflush_r>
 800509e:	68e1      	ldr	r1, [r4, #12]
 80050a0:	4b06      	ldr	r3, [pc, #24]	@ (80050bc <cleanup_stdio+0x3c>)
 80050a2:	4299      	cmp	r1, r3
 80050a4:	d004      	beq.n	80050b0 <cleanup_stdio+0x30>
 80050a6:	4620      	mov	r0, r4
 80050a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050ac:	f001 becc 	b.w	8006e48 <_fflush_r>
 80050b0:	bd10      	pop	{r4, pc}
 80050b2:	bf00      	nop
 80050b4:	2000038c 	.word	0x2000038c
 80050b8:	200003f4 	.word	0x200003f4
 80050bc:	2000045c 	.word	0x2000045c

080050c0 <global_stdio_init.part.0>:
 80050c0:	b510      	push	{r4, lr}
 80050c2:	4b0b      	ldr	r3, [pc, #44]	@ (80050f0 <global_stdio_init.part.0+0x30>)
 80050c4:	4c0b      	ldr	r4, [pc, #44]	@ (80050f4 <global_stdio_init.part.0+0x34>)
 80050c6:	4a0c      	ldr	r2, [pc, #48]	@ (80050f8 <global_stdio_init.part.0+0x38>)
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	4620      	mov	r0, r4
 80050cc:	2200      	movs	r2, #0
 80050ce:	2104      	movs	r1, #4
 80050d0:	f7ff ff94 	bl	8004ffc <std>
 80050d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80050d8:	2201      	movs	r2, #1
 80050da:	2109      	movs	r1, #9
 80050dc:	f7ff ff8e 	bl	8004ffc <std>
 80050e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80050e4:	2202      	movs	r2, #2
 80050e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050ea:	2112      	movs	r1, #18
 80050ec:	f7ff bf86 	b.w	8004ffc <std>
 80050f0:	200004c4 	.word	0x200004c4
 80050f4:	2000038c 	.word	0x2000038c
 80050f8:	08005069 	.word	0x08005069

080050fc <__sfp_lock_acquire>:
 80050fc:	4801      	ldr	r0, [pc, #4]	@ (8005104 <__sfp_lock_acquire+0x8>)
 80050fe:	f000 ba0c 	b.w	800551a <__retarget_lock_acquire_recursive>
 8005102:	bf00      	nop
 8005104:	200004cd 	.word	0x200004cd

08005108 <__sfp_lock_release>:
 8005108:	4801      	ldr	r0, [pc, #4]	@ (8005110 <__sfp_lock_release+0x8>)
 800510a:	f000 ba07 	b.w	800551c <__retarget_lock_release_recursive>
 800510e:	bf00      	nop
 8005110:	200004cd 	.word	0x200004cd

08005114 <__sinit>:
 8005114:	b510      	push	{r4, lr}
 8005116:	4604      	mov	r4, r0
 8005118:	f7ff fff0 	bl	80050fc <__sfp_lock_acquire>
 800511c:	6a23      	ldr	r3, [r4, #32]
 800511e:	b11b      	cbz	r3, 8005128 <__sinit+0x14>
 8005120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005124:	f7ff bff0 	b.w	8005108 <__sfp_lock_release>
 8005128:	4b04      	ldr	r3, [pc, #16]	@ (800513c <__sinit+0x28>)
 800512a:	6223      	str	r3, [r4, #32]
 800512c:	4b04      	ldr	r3, [pc, #16]	@ (8005140 <__sinit+0x2c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1f5      	bne.n	8005120 <__sinit+0xc>
 8005134:	f7ff ffc4 	bl	80050c0 <global_stdio_init.part.0>
 8005138:	e7f2      	b.n	8005120 <__sinit+0xc>
 800513a:	bf00      	nop
 800513c:	08005081 	.word	0x08005081
 8005140:	200004c4 	.word	0x200004c4

08005144 <_fwalk_sglue>:
 8005144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005148:	4607      	mov	r7, r0
 800514a:	4688      	mov	r8, r1
 800514c:	4614      	mov	r4, r2
 800514e:	2600      	movs	r6, #0
 8005150:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005154:	f1b9 0901 	subs.w	r9, r9, #1
 8005158:	d505      	bpl.n	8005166 <_fwalk_sglue+0x22>
 800515a:	6824      	ldr	r4, [r4, #0]
 800515c:	2c00      	cmp	r4, #0
 800515e:	d1f7      	bne.n	8005150 <_fwalk_sglue+0xc>
 8005160:	4630      	mov	r0, r6
 8005162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005166:	89ab      	ldrh	r3, [r5, #12]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d907      	bls.n	800517c <_fwalk_sglue+0x38>
 800516c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005170:	3301      	adds	r3, #1
 8005172:	d003      	beq.n	800517c <_fwalk_sglue+0x38>
 8005174:	4629      	mov	r1, r5
 8005176:	4638      	mov	r0, r7
 8005178:	47c0      	blx	r8
 800517a:	4306      	orrs	r6, r0
 800517c:	3568      	adds	r5, #104	@ 0x68
 800517e:	e7e9      	b.n	8005154 <_fwalk_sglue+0x10>

08005180 <iprintf>:
 8005180:	b40f      	push	{r0, r1, r2, r3}
 8005182:	b507      	push	{r0, r1, r2, lr}
 8005184:	4906      	ldr	r1, [pc, #24]	@ (80051a0 <iprintf+0x20>)
 8005186:	ab04      	add	r3, sp, #16
 8005188:	6808      	ldr	r0, [r1, #0]
 800518a:	f853 2b04 	ldr.w	r2, [r3], #4
 800518e:	6881      	ldr	r1, [r0, #8]
 8005190:	9301      	str	r3, [sp, #4]
 8005192:	f001 fcbd 	bl	8006b10 <_vfiprintf_r>
 8005196:	b003      	add	sp, #12
 8005198:	f85d eb04 	ldr.w	lr, [sp], #4
 800519c:	b004      	add	sp, #16
 800519e:	4770      	bx	lr
 80051a0:	20000034 	.word	0x20000034

080051a4 <putchar>:
 80051a4:	4b02      	ldr	r3, [pc, #8]	@ (80051b0 <putchar+0xc>)
 80051a6:	4601      	mov	r1, r0
 80051a8:	6818      	ldr	r0, [r3, #0]
 80051aa:	6882      	ldr	r2, [r0, #8]
 80051ac:	f001 bed6 	b.w	8006f5c <_putc_r>
 80051b0:	20000034 	.word	0x20000034

080051b4 <_puts_r>:
 80051b4:	6a03      	ldr	r3, [r0, #32]
 80051b6:	b570      	push	{r4, r5, r6, lr}
 80051b8:	6884      	ldr	r4, [r0, #8]
 80051ba:	4605      	mov	r5, r0
 80051bc:	460e      	mov	r6, r1
 80051be:	b90b      	cbnz	r3, 80051c4 <_puts_r+0x10>
 80051c0:	f7ff ffa8 	bl	8005114 <__sinit>
 80051c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051c6:	07db      	lsls	r3, r3, #31
 80051c8:	d405      	bmi.n	80051d6 <_puts_r+0x22>
 80051ca:	89a3      	ldrh	r3, [r4, #12]
 80051cc:	0598      	lsls	r0, r3, #22
 80051ce:	d402      	bmi.n	80051d6 <_puts_r+0x22>
 80051d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051d2:	f000 f9a2 	bl	800551a <__retarget_lock_acquire_recursive>
 80051d6:	89a3      	ldrh	r3, [r4, #12]
 80051d8:	0719      	lsls	r1, r3, #28
 80051da:	d502      	bpl.n	80051e2 <_puts_r+0x2e>
 80051dc:	6923      	ldr	r3, [r4, #16]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d135      	bne.n	800524e <_puts_r+0x9a>
 80051e2:	4621      	mov	r1, r4
 80051e4:	4628      	mov	r0, r5
 80051e6:	f000 f8c5 	bl	8005374 <__swsetup_r>
 80051ea:	b380      	cbz	r0, 800524e <_puts_r+0x9a>
 80051ec:	f04f 35ff 	mov.w	r5, #4294967295
 80051f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051f2:	07da      	lsls	r2, r3, #31
 80051f4:	d405      	bmi.n	8005202 <_puts_r+0x4e>
 80051f6:	89a3      	ldrh	r3, [r4, #12]
 80051f8:	059b      	lsls	r3, r3, #22
 80051fa:	d402      	bmi.n	8005202 <_puts_r+0x4e>
 80051fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051fe:	f000 f98d 	bl	800551c <__retarget_lock_release_recursive>
 8005202:	4628      	mov	r0, r5
 8005204:	bd70      	pop	{r4, r5, r6, pc}
 8005206:	2b00      	cmp	r3, #0
 8005208:	da04      	bge.n	8005214 <_puts_r+0x60>
 800520a:	69a2      	ldr	r2, [r4, #24]
 800520c:	429a      	cmp	r2, r3
 800520e:	dc17      	bgt.n	8005240 <_puts_r+0x8c>
 8005210:	290a      	cmp	r1, #10
 8005212:	d015      	beq.n	8005240 <_puts_r+0x8c>
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	6022      	str	r2, [r4, #0]
 800521a:	7019      	strb	r1, [r3, #0]
 800521c:	68a3      	ldr	r3, [r4, #8]
 800521e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005222:	3b01      	subs	r3, #1
 8005224:	60a3      	str	r3, [r4, #8]
 8005226:	2900      	cmp	r1, #0
 8005228:	d1ed      	bne.n	8005206 <_puts_r+0x52>
 800522a:	2b00      	cmp	r3, #0
 800522c:	da11      	bge.n	8005252 <_puts_r+0x9e>
 800522e:	4622      	mov	r2, r4
 8005230:	210a      	movs	r1, #10
 8005232:	4628      	mov	r0, r5
 8005234:	f000 f85f 	bl	80052f6 <__swbuf_r>
 8005238:	3001      	adds	r0, #1
 800523a:	d0d7      	beq.n	80051ec <_puts_r+0x38>
 800523c:	250a      	movs	r5, #10
 800523e:	e7d7      	b.n	80051f0 <_puts_r+0x3c>
 8005240:	4622      	mov	r2, r4
 8005242:	4628      	mov	r0, r5
 8005244:	f000 f857 	bl	80052f6 <__swbuf_r>
 8005248:	3001      	adds	r0, #1
 800524a:	d1e7      	bne.n	800521c <_puts_r+0x68>
 800524c:	e7ce      	b.n	80051ec <_puts_r+0x38>
 800524e:	3e01      	subs	r6, #1
 8005250:	e7e4      	b.n	800521c <_puts_r+0x68>
 8005252:	6823      	ldr	r3, [r4, #0]
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	6022      	str	r2, [r4, #0]
 8005258:	220a      	movs	r2, #10
 800525a:	701a      	strb	r2, [r3, #0]
 800525c:	e7ee      	b.n	800523c <_puts_r+0x88>
	...

08005260 <puts>:
 8005260:	4b02      	ldr	r3, [pc, #8]	@ (800526c <puts+0xc>)
 8005262:	4601      	mov	r1, r0
 8005264:	6818      	ldr	r0, [r3, #0]
 8005266:	f7ff bfa5 	b.w	80051b4 <_puts_r>
 800526a:	bf00      	nop
 800526c:	20000034 	.word	0x20000034

08005270 <__sread>:
 8005270:	b510      	push	{r4, lr}
 8005272:	460c      	mov	r4, r1
 8005274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005278:	f000 f900 	bl	800547c <_read_r>
 800527c:	2800      	cmp	r0, #0
 800527e:	bfab      	itete	ge
 8005280:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005282:	89a3      	ldrhlt	r3, [r4, #12]
 8005284:	181b      	addge	r3, r3, r0
 8005286:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800528a:	bfac      	ite	ge
 800528c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800528e:	81a3      	strhlt	r3, [r4, #12]
 8005290:	bd10      	pop	{r4, pc}

08005292 <__swrite>:
 8005292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005296:	461f      	mov	r7, r3
 8005298:	898b      	ldrh	r3, [r1, #12]
 800529a:	05db      	lsls	r3, r3, #23
 800529c:	4605      	mov	r5, r0
 800529e:	460c      	mov	r4, r1
 80052a0:	4616      	mov	r6, r2
 80052a2:	d505      	bpl.n	80052b0 <__swrite+0x1e>
 80052a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052a8:	2302      	movs	r3, #2
 80052aa:	2200      	movs	r2, #0
 80052ac:	f000 f8d4 	bl	8005458 <_lseek_r>
 80052b0:	89a3      	ldrh	r3, [r4, #12]
 80052b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052ba:	81a3      	strh	r3, [r4, #12]
 80052bc:	4632      	mov	r2, r6
 80052be:	463b      	mov	r3, r7
 80052c0:	4628      	mov	r0, r5
 80052c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052c6:	f000 b8eb 	b.w	80054a0 <_write_r>

080052ca <__sseek>:
 80052ca:	b510      	push	{r4, lr}
 80052cc:	460c      	mov	r4, r1
 80052ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052d2:	f000 f8c1 	bl	8005458 <_lseek_r>
 80052d6:	1c43      	adds	r3, r0, #1
 80052d8:	89a3      	ldrh	r3, [r4, #12]
 80052da:	bf15      	itete	ne
 80052dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80052de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80052e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80052e6:	81a3      	strheq	r3, [r4, #12]
 80052e8:	bf18      	it	ne
 80052ea:	81a3      	strhne	r3, [r4, #12]
 80052ec:	bd10      	pop	{r4, pc}

080052ee <__sclose>:
 80052ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052f2:	f000 b8a1 	b.w	8005438 <_close_r>

080052f6 <__swbuf_r>:
 80052f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f8:	460e      	mov	r6, r1
 80052fa:	4614      	mov	r4, r2
 80052fc:	4605      	mov	r5, r0
 80052fe:	b118      	cbz	r0, 8005308 <__swbuf_r+0x12>
 8005300:	6a03      	ldr	r3, [r0, #32]
 8005302:	b90b      	cbnz	r3, 8005308 <__swbuf_r+0x12>
 8005304:	f7ff ff06 	bl	8005114 <__sinit>
 8005308:	69a3      	ldr	r3, [r4, #24]
 800530a:	60a3      	str	r3, [r4, #8]
 800530c:	89a3      	ldrh	r3, [r4, #12]
 800530e:	071a      	lsls	r2, r3, #28
 8005310:	d501      	bpl.n	8005316 <__swbuf_r+0x20>
 8005312:	6923      	ldr	r3, [r4, #16]
 8005314:	b943      	cbnz	r3, 8005328 <__swbuf_r+0x32>
 8005316:	4621      	mov	r1, r4
 8005318:	4628      	mov	r0, r5
 800531a:	f000 f82b 	bl	8005374 <__swsetup_r>
 800531e:	b118      	cbz	r0, 8005328 <__swbuf_r+0x32>
 8005320:	f04f 37ff 	mov.w	r7, #4294967295
 8005324:	4638      	mov	r0, r7
 8005326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	6922      	ldr	r2, [r4, #16]
 800532c:	1a98      	subs	r0, r3, r2
 800532e:	6963      	ldr	r3, [r4, #20]
 8005330:	b2f6      	uxtb	r6, r6
 8005332:	4283      	cmp	r3, r0
 8005334:	4637      	mov	r7, r6
 8005336:	dc05      	bgt.n	8005344 <__swbuf_r+0x4e>
 8005338:	4621      	mov	r1, r4
 800533a:	4628      	mov	r0, r5
 800533c:	f001 fd84 	bl	8006e48 <_fflush_r>
 8005340:	2800      	cmp	r0, #0
 8005342:	d1ed      	bne.n	8005320 <__swbuf_r+0x2a>
 8005344:	68a3      	ldr	r3, [r4, #8]
 8005346:	3b01      	subs	r3, #1
 8005348:	60a3      	str	r3, [r4, #8]
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	6022      	str	r2, [r4, #0]
 8005350:	701e      	strb	r6, [r3, #0]
 8005352:	6962      	ldr	r2, [r4, #20]
 8005354:	1c43      	adds	r3, r0, #1
 8005356:	429a      	cmp	r2, r3
 8005358:	d004      	beq.n	8005364 <__swbuf_r+0x6e>
 800535a:	89a3      	ldrh	r3, [r4, #12]
 800535c:	07db      	lsls	r3, r3, #31
 800535e:	d5e1      	bpl.n	8005324 <__swbuf_r+0x2e>
 8005360:	2e0a      	cmp	r6, #10
 8005362:	d1df      	bne.n	8005324 <__swbuf_r+0x2e>
 8005364:	4621      	mov	r1, r4
 8005366:	4628      	mov	r0, r5
 8005368:	f001 fd6e 	bl	8006e48 <_fflush_r>
 800536c:	2800      	cmp	r0, #0
 800536e:	d0d9      	beq.n	8005324 <__swbuf_r+0x2e>
 8005370:	e7d6      	b.n	8005320 <__swbuf_r+0x2a>
	...

08005374 <__swsetup_r>:
 8005374:	b538      	push	{r3, r4, r5, lr}
 8005376:	4b29      	ldr	r3, [pc, #164]	@ (800541c <__swsetup_r+0xa8>)
 8005378:	4605      	mov	r5, r0
 800537a:	6818      	ldr	r0, [r3, #0]
 800537c:	460c      	mov	r4, r1
 800537e:	b118      	cbz	r0, 8005388 <__swsetup_r+0x14>
 8005380:	6a03      	ldr	r3, [r0, #32]
 8005382:	b90b      	cbnz	r3, 8005388 <__swsetup_r+0x14>
 8005384:	f7ff fec6 	bl	8005114 <__sinit>
 8005388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800538c:	0719      	lsls	r1, r3, #28
 800538e:	d422      	bmi.n	80053d6 <__swsetup_r+0x62>
 8005390:	06da      	lsls	r2, r3, #27
 8005392:	d407      	bmi.n	80053a4 <__swsetup_r+0x30>
 8005394:	2209      	movs	r2, #9
 8005396:	602a      	str	r2, [r5, #0]
 8005398:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800539c:	81a3      	strh	r3, [r4, #12]
 800539e:	f04f 30ff 	mov.w	r0, #4294967295
 80053a2:	e033      	b.n	800540c <__swsetup_r+0x98>
 80053a4:	0758      	lsls	r0, r3, #29
 80053a6:	d512      	bpl.n	80053ce <__swsetup_r+0x5a>
 80053a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80053aa:	b141      	cbz	r1, 80053be <__swsetup_r+0x4a>
 80053ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80053b0:	4299      	cmp	r1, r3
 80053b2:	d002      	beq.n	80053ba <__swsetup_r+0x46>
 80053b4:	4628      	mov	r0, r5
 80053b6:	f000 feff 	bl	80061b8 <_free_r>
 80053ba:	2300      	movs	r3, #0
 80053bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80053be:	89a3      	ldrh	r3, [r4, #12]
 80053c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80053c4:	81a3      	strh	r3, [r4, #12]
 80053c6:	2300      	movs	r3, #0
 80053c8:	6063      	str	r3, [r4, #4]
 80053ca:	6923      	ldr	r3, [r4, #16]
 80053cc:	6023      	str	r3, [r4, #0]
 80053ce:	89a3      	ldrh	r3, [r4, #12]
 80053d0:	f043 0308 	orr.w	r3, r3, #8
 80053d4:	81a3      	strh	r3, [r4, #12]
 80053d6:	6923      	ldr	r3, [r4, #16]
 80053d8:	b94b      	cbnz	r3, 80053ee <__swsetup_r+0x7a>
 80053da:	89a3      	ldrh	r3, [r4, #12]
 80053dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80053e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053e4:	d003      	beq.n	80053ee <__swsetup_r+0x7a>
 80053e6:	4621      	mov	r1, r4
 80053e8:	4628      	mov	r0, r5
 80053ea:	f001 fd7b 	bl	8006ee4 <__smakebuf_r>
 80053ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053f2:	f013 0201 	ands.w	r2, r3, #1
 80053f6:	d00a      	beq.n	800540e <__swsetup_r+0x9a>
 80053f8:	2200      	movs	r2, #0
 80053fa:	60a2      	str	r2, [r4, #8]
 80053fc:	6962      	ldr	r2, [r4, #20]
 80053fe:	4252      	negs	r2, r2
 8005400:	61a2      	str	r2, [r4, #24]
 8005402:	6922      	ldr	r2, [r4, #16]
 8005404:	b942      	cbnz	r2, 8005418 <__swsetup_r+0xa4>
 8005406:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800540a:	d1c5      	bne.n	8005398 <__swsetup_r+0x24>
 800540c:	bd38      	pop	{r3, r4, r5, pc}
 800540e:	0799      	lsls	r1, r3, #30
 8005410:	bf58      	it	pl
 8005412:	6962      	ldrpl	r2, [r4, #20]
 8005414:	60a2      	str	r2, [r4, #8]
 8005416:	e7f4      	b.n	8005402 <__swsetup_r+0x8e>
 8005418:	2000      	movs	r0, #0
 800541a:	e7f7      	b.n	800540c <__swsetup_r+0x98>
 800541c:	20000034 	.word	0x20000034

08005420 <memset>:
 8005420:	4402      	add	r2, r0
 8005422:	4603      	mov	r3, r0
 8005424:	4293      	cmp	r3, r2
 8005426:	d100      	bne.n	800542a <memset+0xa>
 8005428:	4770      	bx	lr
 800542a:	f803 1b01 	strb.w	r1, [r3], #1
 800542e:	e7f9      	b.n	8005424 <memset+0x4>

08005430 <_localeconv_r>:
 8005430:	4800      	ldr	r0, [pc, #0]	@ (8005434 <_localeconv_r+0x4>)
 8005432:	4770      	bx	lr
 8005434:	20000174 	.word	0x20000174

08005438 <_close_r>:
 8005438:	b538      	push	{r3, r4, r5, lr}
 800543a:	4d06      	ldr	r5, [pc, #24]	@ (8005454 <_close_r+0x1c>)
 800543c:	2300      	movs	r3, #0
 800543e:	4604      	mov	r4, r0
 8005440:	4608      	mov	r0, r1
 8005442:	602b      	str	r3, [r5, #0]
 8005444:	f7fc fc2b 	bl	8001c9e <_close>
 8005448:	1c43      	adds	r3, r0, #1
 800544a:	d102      	bne.n	8005452 <_close_r+0x1a>
 800544c:	682b      	ldr	r3, [r5, #0]
 800544e:	b103      	cbz	r3, 8005452 <_close_r+0x1a>
 8005450:	6023      	str	r3, [r4, #0]
 8005452:	bd38      	pop	{r3, r4, r5, pc}
 8005454:	200004c8 	.word	0x200004c8

08005458 <_lseek_r>:
 8005458:	b538      	push	{r3, r4, r5, lr}
 800545a:	4d07      	ldr	r5, [pc, #28]	@ (8005478 <_lseek_r+0x20>)
 800545c:	4604      	mov	r4, r0
 800545e:	4608      	mov	r0, r1
 8005460:	4611      	mov	r1, r2
 8005462:	2200      	movs	r2, #0
 8005464:	602a      	str	r2, [r5, #0]
 8005466:	461a      	mov	r2, r3
 8005468:	f7fc fc40 	bl	8001cec <_lseek>
 800546c:	1c43      	adds	r3, r0, #1
 800546e:	d102      	bne.n	8005476 <_lseek_r+0x1e>
 8005470:	682b      	ldr	r3, [r5, #0]
 8005472:	b103      	cbz	r3, 8005476 <_lseek_r+0x1e>
 8005474:	6023      	str	r3, [r4, #0]
 8005476:	bd38      	pop	{r3, r4, r5, pc}
 8005478:	200004c8 	.word	0x200004c8

0800547c <_read_r>:
 800547c:	b538      	push	{r3, r4, r5, lr}
 800547e:	4d07      	ldr	r5, [pc, #28]	@ (800549c <_read_r+0x20>)
 8005480:	4604      	mov	r4, r0
 8005482:	4608      	mov	r0, r1
 8005484:	4611      	mov	r1, r2
 8005486:	2200      	movs	r2, #0
 8005488:	602a      	str	r2, [r5, #0]
 800548a:	461a      	mov	r2, r3
 800548c:	f7fc fbea 	bl	8001c64 <_read>
 8005490:	1c43      	adds	r3, r0, #1
 8005492:	d102      	bne.n	800549a <_read_r+0x1e>
 8005494:	682b      	ldr	r3, [r5, #0]
 8005496:	b103      	cbz	r3, 800549a <_read_r+0x1e>
 8005498:	6023      	str	r3, [r4, #0]
 800549a:	bd38      	pop	{r3, r4, r5, pc}
 800549c:	200004c8 	.word	0x200004c8

080054a0 <_write_r>:
 80054a0:	b538      	push	{r3, r4, r5, lr}
 80054a2:	4d07      	ldr	r5, [pc, #28]	@ (80054c0 <_write_r+0x20>)
 80054a4:	4604      	mov	r4, r0
 80054a6:	4608      	mov	r0, r1
 80054a8:	4611      	mov	r1, r2
 80054aa:	2200      	movs	r2, #0
 80054ac:	602a      	str	r2, [r5, #0]
 80054ae:	461a      	mov	r2, r3
 80054b0:	f7fb fe4b 	bl	800114a <_write>
 80054b4:	1c43      	adds	r3, r0, #1
 80054b6:	d102      	bne.n	80054be <_write_r+0x1e>
 80054b8:	682b      	ldr	r3, [r5, #0]
 80054ba:	b103      	cbz	r3, 80054be <_write_r+0x1e>
 80054bc:	6023      	str	r3, [r4, #0]
 80054be:	bd38      	pop	{r3, r4, r5, pc}
 80054c0:	200004c8 	.word	0x200004c8

080054c4 <__errno>:
 80054c4:	4b01      	ldr	r3, [pc, #4]	@ (80054cc <__errno+0x8>)
 80054c6:	6818      	ldr	r0, [r3, #0]
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	20000034 	.word	0x20000034

080054d0 <__libc_init_array>:
 80054d0:	b570      	push	{r4, r5, r6, lr}
 80054d2:	4d0d      	ldr	r5, [pc, #52]	@ (8005508 <__libc_init_array+0x38>)
 80054d4:	4c0d      	ldr	r4, [pc, #52]	@ (800550c <__libc_init_array+0x3c>)
 80054d6:	1b64      	subs	r4, r4, r5
 80054d8:	10a4      	asrs	r4, r4, #2
 80054da:	2600      	movs	r6, #0
 80054dc:	42a6      	cmp	r6, r4
 80054de:	d109      	bne.n	80054f4 <__libc_init_array+0x24>
 80054e0:	4d0b      	ldr	r5, [pc, #44]	@ (8005510 <__libc_init_array+0x40>)
 80054e2:	4c0c      	ldr	r4, [pc, #48]	@ (8005514 <__libc_init_array+0x44>)
 80054e4:	f001 fe5e 	bl	80071a4 <_init>
 80054e8:	1b64      	subs	r4, r4, r5
 80054ea:	10a4      	asrs	r4, r4, #2
 80054ec:	2600      	movs	r6, #0
 80054ee:	42a6      	cmp	r6, r4
 80054f0:	d105      	bne.n	80054fe <__libc_init_array+0x2e>
 80054f2:	bd70      	pop	{r4, r5, r6, pc}
 80054f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80054f8:	4798      	blx	r3
 80054fa:	3601      	adds	r6, #1
 80054fc:	e7ee      	b.n	80054dc <__libc_init_array+0xc>
 80054fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005502:	4798      	blx	r3
 8005504:	3601      	adds	r6, #1
 8005506:	e7f2      	b.n	80054ee <__libc_init_array+0x1e>
 8005508:	080075a0 	.word	0x080075a0
 800550c:	080075a0 	.word	0x080075a0
 8005510:	080075a0 	.word	0x080075a0
 8005514:	080075a4 	.word	0x080075a4

08005518 <__retarget_lock_init_recursive>:
 8005518:	4770      	bx	lr

0800551a <__retarget_lock_acquire_recursive>:
 800551a:	4770      	bx	lr

0800551c <__retarget_lock_release_recursive>:
 800551c:	4770      	bx	lr

0800551e <quorem>:
 800551e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005522:	6903      	ldr	r3, [r0, #16]
 8005524:	690c      	ldr	r4, [r1, #16]
 8005526:	42a3      	cmp	r3, r4
 8005528:	4607      	mov	r7, r0
 800552a:	db7e      	blt.n	800562a <quorem+0x10c>
 800552c:	3c01      	subs	r4, #1
 800552e:	f101 0814 	add.w	r8, r1, #20
 8005532:	00a3      	lsls	r3, r4, #2
 8005534:	f100 0514 	add.w	r5, r0, #20
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800553e:	9301      	str	r3, [sp, #4]
 8005540:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005544:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005548:	3301      	adds	r3, #1
 800554a:	429a      	cmp	r2, r3
 800554c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005550:	fbb2 f6f3 	udiv	r6, r2, r3
 8005554:	d32e      	bcc.n	80055b4 <quorem+0x96>
 8005556:	f04f 0a00 	mov.w	sl, #0
 800555a:	46c4      	mov	ip, r8
 800555c:	46ae      	mov	lr, r5
 800555e:	46d3      	mov	fp, sl
 8005560:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005564:	b298      	uxth	r0, r3
 8005566:	fb06 a000 	mla	r0, r6, r0, sl
 800556a:	0c02      	lsrs	r2, r0, #16
 800556c:	0c1b      	lsrs	r3, r3, #16
 800556e:	fb06 2303 	mla	r3, r6, r3, r2
 8005572:	f8de 2000 	ldr.w	r2, [lr]
 8005576:	b280      	uxth	r0, r0
 8005578:	b292      	uxth	r2, r2
 800557a:	1a12      	subs	r2, r2, r0
 800557c:	445a      	add	r2, fp
 800557e:	f8de 0000 	ldr.w	r0, [lr]
 8005582:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005586:	b29b      	uxth	r3, r3
 8005588:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800558c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005590:	b292      	uxth	r2, r2
 8005592:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005596:	45e1      	cmp	r9, ip
 8005598:	f84e 2b04 	str.w	r2, [lr], #4
 800559c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80055a0:	d2de      	bcs.n	8005560 <quorem+0x42>
 80055a2:	9b00      	ldr	r3, [sp, #0]
 80055a4:	58eb      	ldr	r3, [r5, r3]
 80055a6:	b92b      	cbnz	r3, 80055b4 <quorem+0x96>
 80055a8:	9b01      	ldr	r3, [sp, #4]
 80055aa:	3b04      	subs	r3, #4
 80055ac:	429d      	cmp	r5, r3
 80055ae:	461a      	mov	r2, r3
 80055b0:	d32f      	bcc.n	8005612 <quorem+0xf4>
 80055b2:	613c      	str	r4, [r7, #16]
 80055b4:	4638      	mov	r0, r7
 80055b6:	f001 f979 	bl	80068ac <__mcmp>
 80055ba:	2800      	cmp	r0, #0
 80055bc:	db25      	blt.n	800560a <quorem+0xec>
 80055be:	4629      	mov	r1, r5
 80055c0:	2000      	movs	r0, #0
 80055c2:	f858 2b04 	ldr.w	r2, [r8], #4
 80055c6:	f8d1 c000 	ldr.w	ip, [r1]
 80055ca:	fa1f fe82 	uxth.w	lr, r2
 80055ce:	fa1f f38c 	uxth.w	r3, ip
 80055d2:	eba3 030e 	sub.w	r3, r3, lr
 80055d6:	4403      	add	r3, r0
 80055d8:	0c12      	lsrs	r2, r2, #16
 80055da:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80055de:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055e8:	45c1      	cmp	r9, r8
 80055ea:	f841 3b04 	str.w	r3, [r1], #4
 80055ee:	ea4f 4022 	mov.w	r0, r2, asr #16
 80055f2:	d2e6      	bcs.n	80055c2 <quorem+0xa4>
 80055f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055fc:	b922      	cbnz	r2, 8005608 <quorem+0xea>
 80055fe:	3b04      	subs	r3, #4
 8005600:	429d      	cmp	r5, r3
 8005602:	461a      	mov	r2, r3
 8005604:	d30b      	bcc.n	800561e <quorem+0x100>
 8005606:	613c      	str	r4, [r7, #16]
 8005608:	3601      	adds	r6, #1
 800560a:	4630      	mov	r0, r6
 800560c:	b003      	add	sp, #12
 800560e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005612:	6812      	ldr	r2, [r2, #0]
 8005614:	3b04      	subs	r3, #4
 8005616:	2a00      	cmp	r2, #0
 8005618:	d1cb      	bne.n	80055b2 <quorem+0x94>
 800561a:	3c01      	subs	r4, #1
 800561c:	e7c6      	b.n	80055ac <quorem+0x8e>
 800561e:	6812      	ldr	r2, [r2, #0]
 8005620:	3b04      	subs	r3, #4
 8005622:	2a00      	cmp	r2, #0
 8005624:	d1ef      	bne.n	8005606 <quorem+0xe8>
 8005626:	3c01      	subs	r4, #1
 8005628:	e7ea      	b.n	8005600 <quorem+0xe2>
 800562a:	2000      	movs	r0, #0
 800562c:	e7ee      	b.n	800560c <quorem+0xee>
	...

08005630 <_dtoa_r>:
 8005630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005634:	69c7      	ldr	r7, [r0, #28]
 8005636:	b099      	sub	sp, #100	@ 0x64
 8005638:	ed8d 0b02 	vstr	d0, [sp, #8]
 800563c:	ec55 4b10 	vmov	r4, r5, d0
 8005640:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005642:	9109      	str	r1, [sp, #36]	@ 0x24
 8005644:	4683      	mov	fp, r0
 8005646:	920e      	str	r2, [sp, #56]	@ 0x38
 8005648:	9313      	str	r3, [sp, #76]	@ 0x4c
 800564a:	b97f      	cbnz	r7, 800566c <_dtoa_r+0x3c>
 800564c:	2010      	movs	r0, #16
 800564e:	f000 fdfd 	bl	800624c <malloc>
 8005652:	4602      	mov	r2, r0
 8005654:	f8cb 001c 	str.w	r0, [fp, #28]
 8005658:	b920      	cbnz	r0, 8005664 <_dtoa_r+0x34>
 800565a:	4ba7      	ldr	r3, [pc, #668]	@ (80058f8 <_dtoa_r+0x2c8>)
 800565c:	21ef      	movs	r1, #239	@ 0xef
 800565e:	48a7      	ldr	r0, [pc, #668]	@ (80058fc <_dtoa_r+0x2cc>)
 8005660:	f001 fcf0 	bl	8007044 <__assert_func>
 8005664:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005668:	6007      	str	r7, [r0, #0]
 800566a:	60c7      	str	r7, [r0, #12]
 800566c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005670:	6819      	ldr	r1, [r3, #0]
 8005672:	b159      	cbz	r1, 800568c <_dtoa_r+0x5c>
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	604a      	str	r2, [r1, #4]
 8005678:	2301      	movs	r3, #1
 800567a:	4093      	lsls	r3, r2
 800567c:	608b      	str	r3, [r1, #8]
 800567e:	4658      	mov	r0, fp
 8005680:	f000 feda 	bl	8006438 <_Bfree>
 8005684:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005688:	2200      	movs	r2, #0
 800568a:	601a      	str	r2, [r3, #0]
 800568c:	1e2b      	subs	r3, r5, #0
 800568e:	bfb9      	ittee	lt
 8005690:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005694:	9303      	strlt	r3, [sp, #12]
 8005696:	2300      	movge	r3, #0
 8005698:	6033      	strge	r3, [r6, #0]
 800569a:	9f03      	ldr	r7, [sp, #12]
 800569c:	4b98      	ldr	r3, [pc, #608]	@ (8005900 <_dtoa_r+0x2d0>)
 800569e:	bfbc      	itt	lt
 80056a0:	2201      	movlt	r2, #1
 80056a2:	6032      	strlt	r2, [r6, #0]
 80056a4:	43bb      	bics	r3, r7
 80056a6:	d112      	bne.n	80056ce <_dtoa_r+0x9e>
 80056a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80056aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80056ae:	6013      	str	r3, [r2, #0]
 80056b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80056b4:	4323      	orrs	r3, r4
 80056b6:	f000 854d 	beq.w	8006154 <_dtoa_r+0xb24>
 80056ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80056bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005914 <_dtoa_r+0x2e4>
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 854f 	beq.w	8006164 <_dtoa_r+0xb34>
 80056c6:	f10a 0303 	add.w	r3, sl, #3
 80056ca:	f000 bd49 	b.w	8006160 <_dtoa_r+0xb30>
 80056ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80056d2:	2200      	movs	r2, #0
 80056d4:	ec51 0b17 	vmov	r0, r1, d7
 80056d8:	2300      	movs	r3, #0
 80056da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80056de:	f7fb f9fb 	bl	8000ad8 <__aeabi_dcmpeq>
 80056e2:	4680      	mov	r8, r0
 80056e4:	b158      	cbz	r0, 80056fe <_dtoa_r+0xce>
 80056e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80056e8:	2301      	movs	r3, #1
 80056ea:	6013      	str	r3, [r2, #0]
 80056ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80056ee:	b113      	cbz	r3, 80056f6 <_dtoa_r+0xc6>
 80056f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80056f2:	4b84      	ldr	r3, [pc, #528]	@ (8005904 <_dtoa_r+0x2d4>)
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005918 <_dtoa_r+0x2e8>
 80056fa:	f000 bd33 	b.w	8006164 <_dtoa_r+0xb34>
 80056fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005702:	aa16      	add	r2, sp, #88	@ 0x58
 8005704:	a917      	add	r1, sp, #92	@ 0x5c
 8005706:	4658      	mov	r0, fp
 8005708:	f001 f980 	bl	8006a0c <__d2b>
 800570c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005710:	4681      	mov	r9, r0
 8005712:	2e00      	cmp	r6, #0
 8005714:	d077      	beq.n	8005806 <_dtoa_r+0x1d6>
 8005716:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005718:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800571c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005720:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005724:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005728:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800572c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005730:	4619      	mov	r1, r3
 8005732:	2200      	movs	r2, #0
 8005734:	4b74      	ldr	r3, [pc, #464]	@ (8005908 <_dtoa_r+0x2d8>)
 8005736:	f7fa fdaf 	bl	8000298 <__aeabi_dsub>
 800573a:	a369      	add	r3, pc, #420	@ (adr r3, 80058e0 <_dtoa_r+0x2b0>)
 800573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005740:	f7fa ff62 	bl	8000608 <__aeabi_dmul>
 8005744:	a368      	add	r3, pc, #416	@ (adr r3, 80058e8 <_dtoa_r+0x2b8>)
 8005746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574a:	f7fa fda7 	bl	800029c <__adddf3>
 800574e:	4604      	mov	r4, r0
 8005750:	4630      	mov	r0, r6
 8005752:	460d      	mov	r5, r1
 8005754:	f7fa feee 	bl	8000534 <__aeabi_i2d>
 8005758:	a365      	add	r3, pc, #404	@ (adr r3, 80058f0 <_dtoa_r+0x2c0>)
 800575a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575e:	f7fa ff53 	bl	8000608 <__aeabi_dmul>
 8005762:	4602      	mov	r2, r0
 8005764:	460b      	mov	r3, r1
 8005766:	4620      	mov	r0, r4
 8005768:	4629      	mov	r1, r5
 800576a:	f7fa fd97 	bl	800029c <__adddf3>
 800576e:	4604      	mov	r4, r0
 8005770:	460d      	mov	r5, r1
 8005772:	f7fb f9f9 	bl	8000b68 <__aeabi_d2iz>
 8005776:	2200      	movs	r2, #0
 8005778:	4607      	mov	r7, r0
 800577a:	2300      	movs	r3, #0
 800577c:	4620      	mov	r0, r4
 800577e:	4629      	mov	r1, r5
 8005780:	f7fb f9b4 	bl	8000aec <__aeabi_dcmplt>
 8005784:	b140      	cbz	r0, 8005798 <_dtoa_r+0x168>
 8005786:	4638      	mov	r0, r7
 8005788:	f7fa fed4 	bl	8000534 <__aeabi_i2d>
 800578c:	4622      	mov	r2, r4
 800578e:	462b      	mov	r3, r5
 8005790:	f7fb f9a2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005794:	b900      	cbnz	r0, 8005798 <_dtoa_r+0x168>
 8005796:	3f01      	subs	r7, #1
 8005798:	2f16      	cmp	r7, #22
 800579a:	d851      	bhi.n	8005840 <_dtoa_r+0x210>
 800579c:	4b5b      	ldr	r3, [pc, #364]	@ (800590c <_dtoa_r+0x2dc>)
 800579e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80057a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057aa:	f7fb f99f 	bl	8000aec <__aeabi_dcmplt>
 80057ae:	2800      	cmp	r0, #0
 80057b0:	d048      	beq.n	8005844 <_dtoa_r+0x214>
 80057b2:	3f01      	subs	r7, #1
 80057b4:	2300      	movs	r3, #0
 80057b6:	9312      	str	r3, [sp, #72]	@ 0x48
 80057b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80057ba:	1b9b      	subs	r3, r3, r6
 80057bc:	1e5a      	subs	r2, r3, #1
 80057be:	bf44      	itt	mi
 80057c0:	f1c3 0801 	rsbmi	r8, r3, #1
 80057c4:	2300      	movmi	r3, #0
 80057c6:	9208      	str	r2, [sp, #32]
 80057c8:	bf54      	ite	pl
 80057ca:	f04f 0800 	movpl.w	r8, #0
 80057ce:	9308      	strmi	r3, [sp, #32]
 80057d0:	2f00      	cmp	r7, #0
 80057d2:	db39      	blt.n	8005848 <_dtoa_r+0x218>
 80057d4:	9b08      	ldr	r3, [sp, #32]
 80057d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80057d8:	443b      	add	r3, r7
 80057da:	9308      	str	r3, [sp, #32]
 80057dc:	2300      	movs	r3, #0
 80057de:	930a      	str	r3, [sp, #40]	@ 0x28
 80057e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057e2:	2b09      	cmp	r3, #9
 80057e4:	d864      	bhi.n	80058b0 <_dtoa_r+0x280>
 80057e6:	2b05      	cmp	r3, #5
 80057e8:	bfc4      	itt	gt
 80057ea:	3b04      	subgt	r3, #4
 80057ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80057ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057f0:	f1a3 0302 	sub.w	r3, r3, #2
 80057f4:	bfcc      	ite	gt
 80057f6:	2400      	movgt	r4, #0
 80057f8:	2401      	movle	r4, #1
 80057fa:	2b03      	cmp	r3, #3
 80057fc:	d863      	bhi.n	80058c6 <_dtoa_r+0x296>
 80057fe:	e8df f003 	tbb	[pc, r3]
 8005802:	372a      	.short	0x372a
 8005804:	5535      	.short	0x5535
 8005806:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800580a:	441e      	add	r6, r3
 800580c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005810:	2b20      	cmp	r3, #32
 8005812:	bfc1      	itttt	gt
 8005814:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005818:	409f      	lslgt	r7, r3
 800581a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800581e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005822:	bfd6      	itet	le
 8005824:	f1c3 0320 	rsble	r3, r3, #32
 8005828:	ea47 0003 	orrgt.w	r0, r7, r3
 800582c:	fa04 f003 	lslle.w	r0, r4, r3
 8005830:	f7fa fe70 	bl	8000514 <__aeabi_ui2d>
 8005834:	2201      	movs	r2, #1
 8005836:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800583a:	3e01      	subs	r6, #1
 800583c:	9214      	str	r2, [sp, #80]	@ 0x50
 800583e:	e777      	b.n	8005730 <_dtoa_r+0x100>
 8005840:	2301      	movs	r3, #1
 8005842:	e7b8      	b.n	80057b6 <_dtoa_r+0x186>
 8005844:	9012      	str	r0, [sp, #72]	@ 0x48
 8005846:	e7b7      	b.n	80057b8 <_dtoa_r+0x188>
 8005848:	427b      	negs	r3, r7
 800584a:	930a      	str	r3, [sp, #40]	@ 0x28
 800584c:	2300      	movs	r3, #0
 800584e:	eba8 0807 	sub.w	r8, r8, r7
 8005852:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005854:	e7c4      	b.n	80057e0 <_dtoa_r+0x1b0>
 8005856:	2300      	movs	r3, #0
 8005858:	930b      	str	r3, [sp, #44]	@ 0x2c
 800585a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800585c:	2b00      	cmp	r3, #0
 800585e:	dc35      	bgt.n	80058cc <_dtoa_r+0x29c>
 8005860:	2301      	movs	r3, #1
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	9307      	str	r3, [sp, #28]
 8005866:	461a      	mov	r2, r3
 8005868:	920e      	str	r2, [sp, #56]	@ 0x38
 800586a:	e00b      	b.n	8005884 <_dtoa_r+0x254>
 800586c:	2301      	movs	r3, #1
 800586e:	e7f3      	b.n	8005858 <_dtoa_r+0x228>
 8005870:	2300      	movs	r3, #0
 8005872:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005874:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005876:	18fb      	adds	r3, r7, r3
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	3301      	adds	r3, #1
 800587c:	2b01      	cmp	r3, #1
 800587e:	9307      	str	r3, [sp, #28]
 8005880:	bfb8      	it	lt
 8005882:	2301      	movlt	r3, #1
 8005884:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005888:	2100      	movs	r1, #0
 800588a:	2204      	movs	r2, #4
 800588c:	f102 0514 	add.w	r5, r2, #20
 8005890:	429d      	cmp	r5, r3
 8005892:	d91f      	bls.n	80058d4 <_dtoa_r+0x2a4>
 8005894:	6041      	str	r1, [r0, #4]
 8005896:	4658      	mov	r0, fp
 8005898:	f000 fd8e 	bl	80063b8 <_Balloc>
 800589c:	4682      	mov	sl, r0
 800589e:	2800      	cmp	r0, #0
 80058a0:	d13c      	bne.n	800591c <_dtoa_r+0x2ec>
 80058a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005910 <_dtoa_r+0x2e0>)
 80058a4:	4602      	mov	r2, r0
 80058a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80058aa:	e6d8      	b.n	800565e <_dtoa_r+0x2e>
 80058ac:	2301      	movs	r3, #1
 80058ae:	e7e0      	b.n	8005872 <_dtoa_r+0x242>
 80058b0:	2401      	movs	r4, #1
 80058b2:	2300      	movs	r3, #0
 80058b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80058b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80058b8:	f04f 33ff 	mov.w	r3, #4294967295
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	9307      	str	r3, [sp, #28]
 80058c0:	2200      	movs	r2, #0
 80058c2:	2312      	movs	r3, #18
 80058c4:	e7d0      	b.n	8005868 <_dtoa_r+0x238>
 80058c6:	2301      	movs	r3, #1
 80058c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058ca:	e7f5      	b.n	80058b8 <_dtoa_r+0x288>
 80058cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058ce:	9300      	str	r3, [sp, #0]
 80058d0:	9307      	str	r3, [sp, #28]
 80058d2:	e7d7      	b.n	8005884 <_dtoa_r+0x254>
 80058d4:	3101      	adds	r1, #1
 80058d6:	0052      	lsls	r2, r2, #1
 80058d8:	e7d8      	b.n	800588c <_dtoa_r+0x25c>
 80058da:	bf00      	nop
 80058dc:	f3af 8000 	nop.w
 80058e0:	636f4361 	.word	0x636f4361
 80058e4:	3fd287a7 	.word	0x3fd287a7
 80058e8:	8b60c8b3 	.word	0x8b60c8b3
 80058ec:	3fc68a28 	.word	0x3fc68a28
 80058f0:	509f79fb 	.word	0x509f79fb
 80058f4:	3fd34413 	.word	0x3fd34413
 80058f8:	08007269 	.word	0x08007269
 80058fc:	08007280 	.word	0x08007280
 8005900:	7ff00000 	.word	0x7ff00000
 8005904:	08007239 	.word	0x08007239
 8005908:	3ff80000 	.word	0x3ff80000
 800590c:	08007378 	.word	0x08007378
 8005910:	080072d8 	.word	0x080072d8
 8005914:	08007265 	.word	0x08007265
 8005918:	08007238 	.word	0x08007238
 800591c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005920:	6018      	str	r0, [r3, #0]
 8005922:	9b07      	ldr	r3, [sp, #28]
 8005924:	2b0e      	cmp	r3, #14
 8005926:	f200 80a4 	bhi.w	8005a72 <_dtoa_r+0x442>
 800592a:	2c00      	cmp	r4, #0
 800592c:	f000 80a1 	beq.w	8005a72 <_dtoa_r+0x442>
 8005930:	2f00      	cmp	r7, #0
 8005932:	dd33      	ble.n	800599c <_dtoa_r+0x36c>
 8005934:	4bad      	ldr	r3, [pc, #692]	@ (8005bec <_dtoa_r+0x5bc>)
 8005936:	f007 020f 	and.w	r2, r7, #15
 800593a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800593e:	ed93 7b00 	vldr	d7, [r3]
 8005942:	05f8      	lsls	r0, r7, #23
 8005944:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005948:	ea4f 1427 	mov.w	r4, r7, asr #4
 800594c:	d516      	bpl.n	800597c <_dtoa_r+0x34c>
 800594e:	4ba8      	ldr	r3, [pc, #672]	@ (8005bf0 <_dtoa_r+0x5c0>)
 8005950:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005954:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005958:	f7fa ff80 	bl	800085c <__aeabi_ddiv>
 800595c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005960:	f004 040f 	and.w	r4, r4, #15
 8005964:	2603      	movs	r6, #3
 8005966:	4da2      	ldr	r5, [pc, #648]	@ (8005bf0 <_dtoa_r+0x5c0>)
 8005968:	b954      	cbnz	r4, 8005980 <_dtoa_r+0x350>
 800596a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800596e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005972:	f7fa ff73 	bl	800085c <__aeabi_ddiv>
 8005976:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800597a:	e028      	b.n	80059ce <_dtoa_r+0x39e>
 800597c:	2602      	movs	r6, #2
 800597e:	e7f2      	b.n	8005966 <_dtoa_r+0x336>
 8005980:	07e1      	lsls	r1, r4, #31
 8005982:	d508      	bpl.n	8005996 <_dtoa_r+0x366>
 8005984:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005988:	e9d5 2300 	ldrd	r2, r3, [r5]
 800598c:	f7fa fe3c 	bl	8000608 <__aeabi_dmul>
 8005990:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005994:	3601      	adds	r6, #1
 8005996:	1064      	asrs	r4, r4, #1
 8005998:	3508      	adds	r5, #8
 800599a:	e7e5      	b.n	8005968 <_dtoa_r+0x338>
 800599c:	f000 80d2 	beq.w	8005b44 <_dtoa_r+0x514>
 80059a0:	427c      	negs	r4, r7
 80059a2:	4b92      	ldr	r3, [pc, #584]	@ (8005bec <_dtoa_r+0x5bc>)
 80059a4:	4d92      	ldr	r5, [pc, #584]	@ (8005bf0 <_dtoa_r+0x5c0>)
 80059a6:	f004 020f 	and.w	r2, r4, #15
 80059aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059b6:	f7fa fe27 	bl	8000608 <__aeabi_dmul>
 80059ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059be:	1124      	asrs	r4, r4, #4
 80059c0:	2300      	movs	r3, #0
 80059c2:	2602      	movs	r6, #2
 80059c4:	2c00      	cmp	r4, #0
 80059c6:	f040 80b2 	bne.w	8005b2e <_dtoa_r+0x4fe>
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1d3      	bne.n	8005976 <_dtoa_r+0x346>
 80059ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80059d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 80b7 	beq.w	8005b48 <_dtoa_r+0x518>
 80059da:	4b86      	ldr	r3, [pc, #536]	@ (8005bf4 <_dtoa_r+0x5c4>)
 80059dc:	2200      	movs	r2, #0
 80059de:	4620      	mov	r0, r4
 80059e0:	4629      	mov	r1, r5
 80059e2:	f7fb f883 	bl	8000aec <__aeabi_dcmplt>
 80059e6:	2800      	cmp	r0, #0
 80059e8:	f000 80ae 	beq.w	8005b48 <_dtoa_r+0x518>
 80059ec:	9b07      	ldr	r3, [sp, #28]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f000 80aa 	beq.w	8005b48 <_dtoa_r+0x518>
 80059f4:	9b00      	ldr	r3, [sp, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	dd37      	ble.n	8005a6a <_dtoa_r+0x43a>
 80059fa:	1e7b      	subs	r3, r7, #1
 80059fc:	9304      	str	r3, [sp, #16]
 80059fe:	4620      	mov	r0, r4
 8005a00:	4b7d      	ldr	r3, [pc, #500]	@ (8005bf8 <_dtoa_r+0x5c8>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	4629      	mov	r1, r5
 8005a06:	f7fa fdff 	bl	8000608 <__aeabi_dmul>
 8005a0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a0e:	9c00      	ldr	r4, [sp, #0]
 8005a10:	3601      	adds	r6, #1
 8005a12:	4630      	mov	r0, r6
 8005a14:	f7fa fd8e 	bl	8000534 <__aeabi_i2d>
 8005a18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a1c:	f7fa fdf4 	bl	8000608 <__aeabi_dmul>
 8005a20:	4b76      	ldr	r3, [pc, #472]	@ (8005bfc <_dtoa_r+0x5cc>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	f7fa fc3a 	bl	800029c <__adddf3>
 8005a28:	4605      	mov	r5, r0
 8005a2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005a2e:	2c00      	cmp	r4, #0
 8005a30:	f040 808d 	bne.w	8005b4e <_dtoa_r+0x51e>
 8005a34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a38:	4b71      	ldr	r3, [pc, #452]	@ (8005c00 <_dtoa_r+0x5d0>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f7fa fc2c 	bl	8000298 <__aeabi_dsub>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a48:	462a      	mov	r2, r5
 8005a4a:	4633      	mov	r3, r6
 8005a4c:	f7fb f86c 	bl	8000b28 <__aeabi_dcmpgt>
 8005a50:	2800      	cmp	r0, #0
 8005a52:	f040 828b 	bne.w	8005f6c <_dtoa_r+0x93c>
 8005a56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a5a:	462a      	mov	r2, r5
 8005a5c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005a60:	f7fb f844 	bl	8000aec <__aeabi_dcmplt>
 8005a64:	2800      	cmp	r0, #0
 8005a66:	f040 8128 	bne.w	8005cba <_dtoa_r+0x68a>
 8005a6a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005a6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005a72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f2c0 815a 	blt.w	8005d2e <_dtoa_r+0x6fe>
 8005a7a:	2f0e      	cmp	r7, #14
 8005a7c:	f300 8157 	bgt.w	8005d2e <_dtoa_r+0x6fe>
 8005a80:	4b5a      	ldr	r3, [pc, #360]	@ (8005bec <_dtoa_r+0x5bc>)
 8005a82:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005a86:	ed93 7b00 	vldr	d7, [r3]
 8005a8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	ed8d 7b00 	vstr	d7, [sp]
 8005a92:	da03      	bge.n	8005a9c <_dtoa_r+0x46c>
 8005a94:	9b07      	ldr	r3, [sp, #28]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f340 8101 	ble.w	8005c9e <_dtoa_r+0x66e>
 8005a9c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005aa0:	4656      	mov	r6, sl
 8005aa2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	4629      	mov	r1, r5
 8005aaa:	f7fa fed7 	bl	800085c <__aeabi_ddiv>
 8005aae:	f7fb f85b 	bl	8000b68 <__aeabi_d2iz>
 8005ab2:	4680      	mov	r8, r0
 8005ab4:	f7fa fd3e 	bl	8000534 <__aeabi_i2d>
 8005ab8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005abc:	f7fa fda4 	bl	8000608 <__aeabi_dmul>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	4629      	mov	r1, r5
 8005ac8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005acc:	f7fa fbe4 	bl	8000298 <__aeabi_dsub>
 8005ad0:	f806 4b01 	strb.w	r4, [r6], #1
 8005ad4:	9d07      	ldr	r5, [sp, #28]
 8005ad6:	eba6 040a 	sub.w	r4, r6, sl
 8005ada:	42a5      	cmp	r5, r4
 8005adc:	4602      	mov	r2, r0
 8005ade:	460b      	mov	r3, r1
 8005ae0:	f040 8117 	bne.w	8005d12 <_dtoa_r+0x6e2>
 8005ae4:	f7fa fbda 	bl	800029c <__adddf3>
 8005ae8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005aec:	4604      	mov	r4, r0
 8005aee:	460d      	mov	r5, r1
 8005af0:	f7fb f81a 	bl	8000b28 <__aeabi_dcmpgt>
 8005af4:	2800      	cmp	r0, #0
 8005af6:	f040 80f9 	bne.w	8005cec <_dtoa_r+0x6bc>
 8005afa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005afe:	4620      	mov	r0, r4
 8005b00:	4629      	mov	r1, r5
 8005b02:	f7fa ffe9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b06:	b118      	cbz	r0, 8005b10 <_dtoa_r+0x4e0>
 8005b08:	f018 0f01 	tst.w	r8, #1
 8005b0c:	f040 80ee 	bne.w	8005cec <_dtoa_r+0x6bc>
 8005b10:	4649      	mov	r1, r9
 8005b12:	4658      	mov	r0, fp
 8005b14:	f000 fc90 	bl	8006438 <_Bfree>
 8005b18:	2300      	movs	r3, #0
 8005b1a:	7033      	strb	r3, [r6, #0]
 8005b1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005b1e:	3701      	adds	r7, #1
 8005b20:	601f      	str	r7, [r3, #0]
 8005b22:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 831d 	beq.w	8006164 <_dtoa_r+0xb34>
 8005b2a:	601e      	str	r6, [r3, #0]
 8005b2c:	e31a      	b.n	8006164 <_dtoa_r+0xb34>
 8005b2e:	07e2      	lsls	r2, r4, #31
 8005b30:	d505      	bpl.n	8005b3e <_dtoa_r+0x50e>
 8005b32:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b36:	f7fa fd67 	bl	8000608 <__aeabi_dmul>
 8005b3a:	3601      	adds	r6, #1
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	1064      	asrs	r4, r4, #1
 8005b40:	3508      	adds	r5, #8
 8005b42:	e73f      	b.n	80059c4 <_dtoa_r+0x394>
 8005b44:	2602      	movs	r6, #2
 8005b46:	e742      	b.n	80059ce <_dtoa_r+0x39e>
 8005b48:	9c07      	ldr	r4, [sp, #28]
 8005b4a:	9704      	str	r7, [sp, #16]
 8005b4c:	e761      	b.n	8005a12 <_dtoa_r+0x3e2>
 8005b4e:	4b27      	ldr	r3, [pc, #156]	@ (8005bec <_dtoa_r+0x5bc>)
 8005b50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005b52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b56:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b5a:	4454      	add	r4, sl
 8005b5c:	2900      	cmp	r1, #0
 8005b5e:	d053      	beq.n	8005c08 <_dtoa_r+0x5d8>
 8005b60:	4928      	ldr	r1, [pc, #160]	@ (8005c04 <_dtoa_r+0x5d4>)
 8005b62:	2000      	movs	r0, #0
 8005b64:	f7fa fe7a 	bl	800085c <__aeabi_ddiv>
 8005b68:	4633      	mov	r3, r6
 8005b6a:	462a      	mov	r2, r5
 8005b6c:	f7fa fb94 	bl	8000298 <__aeabi_dsub>
 8005b70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005b74:	4656      	mov	r6, sl
 8005b76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b7a:	f7fa fff5 	bl	8000b68 <__aeabi_d2iz>
 8005b7e:	4605      	mov	r5, r0
 8005b80:	f7fa fcd8 	bl	8000534 <__aeabi_i2d>
 8005b84:	4602      	mov	r2, r0
 8005b86:	460b      	mov	r3, r1
 8005b88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b8c:	f7fa fb84 	bl	8000298 <__aeabi_dsub>
 8005b90:	3530      	adds	r5, #48	@ 0x30
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005b9a:	f806 5b01 	strb.w	r5, [r6], #1
 8005b9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005ba2:	f7fa ffa3 	bl	8000aec <__aeabi_dcmplt>
 8005ba6:	2800      	cmp	r0, #0
 8005ba8:	d171      	bne.n	8005c8e <_dtoa_r+0x65e>
 8005baa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bae:	4911      	ldr	r1, [pc, #68]	@ (8005bf4 <_dtoa_r+0x5c4>)
 8005bb0:	2000      	movs	r0, #0
 8005bb2:	f7fa fb71 	bl	8000298 <__aeabi_dsub>
 8005bb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005bba:	f7fa ff97 	bl	8000aec <__aeabi_dcmplt>
 8005bbe:	2800      	cmp	r0, #0
 8005bc0:	f040 8095 	bne.w	8005cee <_dtoa_r+0x6be>
 8005bc4:	42a6      	cmp	r6, r4
 8005bc6:	f43f af50 	beq.w	8005a6a <_dtoa_r+0x43a>
 8005bca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005bce:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf8 <_dtoa_r+0x5c8>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f7fa fd19 	bl	8000608 <__aeabi_dmul>
 8005bd6:	4b08      	ldr	r3, [pc, #32]	@ (8005bf8 <_dtoa_r+0x5c8>)
 8005bd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005bdc:	2200      	movs	r2, #0
 8005bde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005be2:	f7fa fd11 	bl	8000608 <__aeabi_dmul>
 8005be6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bea:	e7c4      	b.n	8005b76 <_dtoa_r+0x546>
 8005bec:	08007378 	.word	0x08007378
 8005bf0:	08007350 	.word	0x08007350
 8005bf4:	3ff00000 	.word	0x3ff00000
 8005bf8:	40240000 	.word	0x40240000
 8005bfc:	401c0000 	.word	0x401c0000
 8005c00:	40140000 	.word	0x40140000
 8005c04:	3fe00000 	.word	0x3fe00000
 8005c08:	4631      	mov	r1, r6
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	f7fa fcfc 	bl	8000608 <__aeabi_dmul>
 8005c10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c14:	9415      	str	r4, [sp, #84]	@ 0x54
 8005c16:	4656      	mov	r6, sl
 8005c18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c1c:	f7fa ffa4 	bl	8000b68 <__aeabi_d2iz>
 8005c20:	4605      	mov	r5, r0
 8005c22:	f7fa fc87 	bl	8000534 <__aeabi_i2d>
 8005c26:	4602      	mov	r2, r0
 8005c28:	460b      	mov	r3, r1
 8005c2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c2e:	f7fa fb33 	bl	8000298 <__aeabi_dsub>
 8005c32:	3530      	adds	r5, #48	@ 0x30
 8005c34:	f806 5b01 	strb.w	r5, [r6], #1
 8005c38:	4602      	mov	r2, r0
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	42a6      	cmp	r6, r4
 8005c3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c42:	f04f 0200 	mov.w	r2, #0
 8005c46:	d124      	bne.n	8005c92 <_dtoa_r+0x662>
 8005c48:	4bac      	ldr	r3, [pc, #688]	@ (8005efc <_dtoa_r+0x8cc>)
 8005c4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c4e:	f7fa fb25 	bl	800029c <__adddf3>
 8005c52:	4602      	mov	r2, r0
 8005c54:	460b      	mov	r3, r1
 8005c56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c5a:	f7fa ff65 	bl	8000b28 <__aeabi_dcmpgt>
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	d145      	bne.n	8005cee <_dtoa_r+0x6be>
 8005c62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c66:	49a5      	ldr	r1, [pc, #660]	@ (8005efc <_dtoa_r+0x8cc>)
 8005c68:	2000      	movs	r0, #0
 8005c6a:	f7fa fb15 	bl	8000298 <__aeabi_dsub>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c76:	f7fa ff39 	bl	8000aec <__aeabi_dcmplt>
 8005c7a:	2800      	cmp	r0, #0
 8005c7c:	f43f aef5 	beq.w	8005a6a <_dtoa_r+0x43a>
 8005c80:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005c82:	1e73      	subs	r3, r6, #1
 8005c84:	9315      	str	r3, [sp, #84]	@ 0x54
 8005c86:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005c8a:	2b30      	cmp	r3, #48	@ 0x30
 8005c8c:	d0f8      	beq.n	8005c80 <_dtoa_r+0x650>
 8005c8e:	9f04      	ldr	r7, [sp, #16]
 8005c90:	e73e      	b.n	8005b10 <_dtoa_r+0x4e0>
 8005c92:	4b9b      	ldr	r3, [pc, #620]	@ (8005f00 <_dtoa_r+0x8d0>)
 8005c94:	f7fa fcb8 	bl	8000608 <__aeabi_dmul>
 8005c98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c9c:	e7bc      	b.n	8005c18 <_dtoa_r+0x5e8>
 8005c9e:	d10c      	bne.n	8005cba <_dtoa_r+0x68a>
 8005ca0:	4b98      	ldr	r3, [pc, #608]	@ (8005f04 <_dtoa_r+0x8d4>)
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ca8:	f7fa fcae 	bl	8000608 <__aeabi_dmul>
 8005cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cb0:	f7fa ff30 	bl	8000b14 <__aeabi_dcmpge>
 8005cb4:	2800      	cmp	r0, #0
 8005cb6:	f000 8157 	beq.w	8005f68 <_dtoa_r+0x938>
 8005cba:	2400      	movs	r4, #0
 8005cbc:	4625      	mov	r5, r4
 8005cbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005cc0:	43db      	mvns	r3, r3
 8005cc2:	9304      	str	r3, [sp, #16]
 8005cc4:	4656      	mov	r6, sl
 8005cc6:	2700      	movs	r7, #0
 8005cc8:	4621      	mov	r1, r4
 8005cca:	4658      	mov	r0, fp
 8005ccc:	f000 fbb4 	bl	8006438 <_Bfree>
 8005cd0:	2d00      	cmp	r5, #0
 8005cd2:	d0dc      	beq.n	8005c8e <_dtoa_r+0x65e>
 8005cd4:	b12f      	cbz	r7, 8005ce2 <_dtoa_r+0x6b2>
 8005cd6:	42af      	cmp	r7, r5
 8005cd8:	d003      	beq.n	8005ce2 <_dtoa_r+0x6b2>
 8005cda:	4639      	mov	r1, r7
 8005cdc:	4658      	mov	r0, fp
 8005cde:	f000 fbab 	bl	8006438 <_Bfree>
 8005ce2:	4629      	mov	r1, r5
 8005ce4:	4658      	mov	r0, fp
 8005ce6:	f000 fba7 	bl	8006438 <_Bfree>
 8005cea:	e7d0      	b.n	8005c8e <_dtoa_r+0x65e>
 8005cec:	9704      	str	r7, [sp, #16]
 8005cee:	4633      	mov	r3, r6
 8005cf0:	461e      	mov	r6, r3
 8005cf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cf6:	2a39      	cmp	r2, #57	@ 0x39
 8005cf8:	d107      	bne.n	8005d0a <_dtoa_r+0x6da>
 8005cfa:	459a      	cmp	sl, r3
 8005cfc:	d1f8      	bne.n	8005cf0 <_dtoa_r+0x6c0>
 8005cfe:	9a04      	ldr	r2, [sp, #16]
 8005d00:	3201      	adds	r2, #1
 8005d02:	9204      	str	r2, [sp, #16]
 8005d04:	2230      	movs	r2, #48	@ 0x30
 8005d06:	f88a 2000 	strb.w	r2, [sl]
 8005d0a:	781a      	ldrb	r2, [r3, #0]
 8005d0c:	3201      	adds	r2, #1
 8005d0e:	701a      	strb	r2, [r3, #0]
 8005d10:	e7bd      	b.n	8005c8e <_dtoa_r+0x65e>
 8005d12:	4b7b      	ldr	r3, [pc, #492]	@ (8005f00 <_dtoa_r+0x8d0>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	f7fa fc77 	bl	8000608 <__aeabi_dmul>
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	4604      	mov	r4, r0
 8005d20:	460d      	mov	r5, r1
 8005d22:	f7fa fed9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d26:	2800      	cmp	r0, #0
 8005d28:	f43f aebb 	beq.w	8005aa2 <_dtoa_r+0x472>
 8005d2c:	e6f0      	b.n	8005b10 <_dtoa_r+0x4e0>
 8005d2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005d30:	2a00      	cmp	r2, #0
 8005d32:	f000 80db 	beq.w	8005eec <_dtoa_r+0x8bc>
 8005d36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d38:	2a01      	cmp	r2, #1
 8005d3a:	f300 80bf 	bgt.w	8005ebc <_dtoa_r+0x88c>
 8005d3e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005d40:	2a00      	cmp	r2, #0
 8005d42:	f000 80b7 	beq.w	8005eb4 <_dtoa_r+0x884>
 8005d46:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005d4a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005d4c:	4646      	mov	r6, r8
 8005d4e:	9a08      	ldr	r2, [sp, #32]
 8005d50:	2101      	movs	r1, #1
 8005d52:	441a      	add	r2, r3
 8005d54:	4658      	mov	r0, fp
 8005d56:	4498      	add	r8, r3
 8005d58:	9208      	str	r2, [sp, #32]
 8005d5a:	f000 fc21 	bl	80065a0 <__i2b>
 8005d5e:	4605      	mov	r5, r0
 8005d60:	b15e      	cbz	r6, 8005d7a <_dtoa_r+0x74a>
 8005d62:	9b08      	ldr	r3, [sp, #32]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	dd08      	ble.n	8005d7a <_dtoa_r+0x74a>
 8005d68:	42b3      	cmp	r3, r6
 8005d6a:	9a08      	ldr	r2, [sp, #32]
 8005d6c:	bfa8      	it	ge
 8005d6e:	4633      	movge	r3, r6
 8005d70:	eba8 0803 	sub.w	r8, r8, r3
 8005d74:	1af6      	subs	r6, r6, r3
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	9308      	str	r3, [sp, #32]
 8005d7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d7c:	b1f3      	cbz	r3, 8005dbc <_dtoa_r+0x78c>
 8005d7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 80b7 	beq.w	8005ef4 <_dtoa_r+0x8c4>
 8005d86:	b18c      	cbz	r4, 8005dac <_dtoa_r+0x77c>
 8005d88:	4629      	mov	r1, r5
 8005d8a:	4622      	mov	r2, r4
 8005d8c:	4658      	mov	r0, fp
 8005d8e:	f000 fcc7 	bl	8006720 <__pow5mult>
 8005d92:	464a      	mov	r2, r9
 8005d94:	4601      	mov	r1, r0
 8005d96:	4605      	mov	r5, r0
 8005d98:	4658      	mov	r0, fp
 8005d9a:	f000 fc17 	bl	80065cc <__multiply>
 8005d9e:	4649      	mov	r1, r9
 8005da0:	9004      	str	r0, [sp, #16]
 8005da2:	4658      	mov	r0, fp
 8005da4:	f000 fb48 	bl	8006438 <_Bfree>
 8005da8:	9b04      	ldr	r3, [sp, #16]
 8005daa:	4699      	mov	r9, r3
 8005dac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dae:	1b1a      	subs	r2, r3, r4
 8005db0:	d004      	beq.n	8005dbc <_dtoa_r+0x78c>
 8005db2:	4649      	mov	r1, r9
 8005db4:	4658      	mov	r0, fp
 8005db6:	f000 fcb3 	bl	8006720 <__pow5mult>
 8005dba:	4681      	mov	r9, r0
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	4658      	mov	r0, fp
 8005dc0:	f000 fbee 	bl	80065a0 <__i2b>
 8005dc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 81cf 	beq.w	800616c <_dtoa_r+0xb3c>
 8005dce:	461a      	mov	r2, r3
 8005dd0:	4601      	mov	r1, r0
 8005dd2:	4658      	mov	r0, fp
 8005dd4:	f000 fca4 	bl	8006720 <__pow5mult>
 8005dd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	4604      	mov	r4, r0
 8005dde:	f300 8095 	bgt.w	8005f0c <_dtoa_r+0x8dc>
 8005de2:	9b02      	ldr	r3, [sp, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f040 8087 	bne.w	8005ef8 <_dtoa_r+0x8c8>
 8005dea:	9b03      	ldr	r3, [sp, #12]
 8005dec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f040 8089 	bne.w	8005f08 <_dtoa_r+0x8d8>
 8005df6:	9b03      	ldr	r3, [sp, #12]
 8005df8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005dfc:	0d1b      	lsrs	r3, r3, #20
 8005dfe:	051b      	lsls	r3, r3, #20
 8005e00:	b12b      	cbz	r3, 8005e0e <_dtoa_r+0x7de>
 8005e02:	9b08      	ldr	r3, [sp, #32]
 8005e04:	3301      	adds	r3, #1
 8005e06:	9308      	str	r3, [sp, #32]
 8005e08:	f108 0801 	add.w	r8, r8, #1
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f000 81b0 	beq.w	8006178 <_dtoa_r+0xb48>
 8005e18:	6923      	ldr	r3, [r4, #16]
 8005e1a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e1e:	6918      	ldr	r0, [r3, #16]
 8005e20:	f000 fb72 	bl	8006508 <__hi0bits>
 8005e24:	f1c0 0020 	rsb	r0, r0, #32
 8005e28:	9b08      	ldr	r3, [sp, #32]
 8005e2a:	4418      	add	r0, r3
 8005e2c:	f010 001f 	ands.w	r0, r0, #31
 8005e30:	d077      	beq.n	8005f22 <_dtoa_r+0x8f2>
 8005e32:	f1c0 0320 	rsb	r3, r0, #32
 8005e36:	2b04      	cmp	r3, #4
 8005e38:	dd6b      	ble.n	8005f12 <_dtoa_r+0x8e2>
 8005e3a:	9b08      	ldr	r3, [sp, #32]
 8005e3c:	f1c0 001c 	rsb	r0, r0, #28
 8005e40:	4403      	add	r3, r0
 8005e42:	4480      	add	r8, r0
 8005e44:	4406      	add	r6, r0
 8005e46:	9308      	str	r3, [sp, #32]
 8005e48:	f1b8 0f00 	cmp.w	r8, #0
 8005e4c:	dd05      	ble.n	8005e5a <_dtoa_r+0x82a>
 8005e4e:	4649      	mov	r1, r9
 8005e50:	4642      	mov	r2, r8
 8005e52:	4658      	mov	r0, fp
 8005e54:	f000 fcbe 	bl	80067d4 <__lshift>
 8005e58:	4681      	mov	r9, r0
 8005e5a:	9b08      	ldr	r3, [sp, #32]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	dd05      	ble.n	8005e6c <_dtoa_r+0x83c>
 8005e60:	4621      	mov	r1, r4
 8005e62:	461a      	mov	r2, r3
 8005e64:	4658      	mov	r0, fp
 8005e66:	f000 fcb5 	bl	80067d4 <__lshift>
 8005e6a:	4604      	mov	r4, r0
 8005e6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d059      	beq.n	8005f26 <_dtoa_r+0x8f6>
 8005e72:	4621      	mov	r1, r4
 8005e74:	4648      	mov	r0, r9
 8005e76:	f000 fd19 	bl	80068ac <__mcmp>
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	da53      	bge.n	8005f26 <_dtoa_r+0x8f6>
 8005e7e:	1e7b      	subs	r3, r7, #1
 8005e80:	9304      	str	r3, [sp, #16]
 8005e82:	4649      	mov	r1, r9
 8005e84:	2300      	movs	r3, #0
 8005e86:	220a      	movs	r2, #10
 8005e88:	4658      	mov	r0, fp
 8005e8a:	f000 faf7 	bl	800647c <__multadd>
 8005e8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e90:	4681      	mov	r9, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 8172 	beq.w	800617c <_dtoa_r+0xb4c>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	4629      	mov	r1, r5
 8005e9c:	220a      	movs	r2, #10
 8005e9e:	4658      	mov	r0, fp
 8005ea0:	f000 faec 	bl	800647c <__multadd>
 8005ea4:	9b00      	ldr	r3, [sp, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	4605      	mov	r5, r0
 8005eaa:	dc67      	bgt.n	8005f7c <_dtoa_r+0x94c>
 8005eac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	dc41      	bgt.n	8005f36 <_dtoa_r+0x906>
 8005eb2:	e063      	b.n	8005f7c <_dtoa_r+0x94c>
 8005eb4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005eb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005eba:	e746      	b.n	8005d4a <_dtoa_r+0x71a>
 8005ebc:	9b07      	ldr	r3, [sp, #28]
 8005ebe:	1e5c      	subs	r4, r3, #1
 8005ec0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ec2:	42a3      	cmp	r3, r4
 8005ec4:	bfbf      	itttt	lt
 8005ec6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005ec8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005eca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005ecc:	1ae3      	sublt	r3, r4, r3
 8005ece:	bfb4      	ite	lt
 8005ed0:	18d2      	addlt	r2, r2, r3
 8005ed2:	1b1c      	subge	r4, r3, r4
 8005ed4:	9b07      	ldr	r3, [sp, #28]
 8005ed6:	bfbc      	itt	lt
 8005ed8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005eda:	2400      	movlt	r4, #0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	bfb5      	itete	lt
 8005ee0:	eba8 0603 	sublt.w	r6, r8, r3
 8005ee4:	9b07      	ldrge	r3, [sp, #28]
 8005ee6:	2300      	movlt	r3, #0
 8005ee8:	4646      	movge	r6, r8
 8005eea:	e730      	b.n	8005d4e <_dtoa_r+0x71e>
 8005eec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005eee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005ef0:	4646      	mov	r6, r8
 8005ef2:	e735      	b.n	8005d60 <_dtoa_r+0x730>
 8005ef4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ef6:	e75c      	b.n	8005db2 <_dtoa_r+0x782>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	e788      	b.n	8005e0e <_dtoa_r+0x7de>
 8005efc:	3fe00000 	.word	0x3fe00000
 8005f00:	40240000 	.word	0x40240000
 8005f04:	40140000 	.word	0x40140000
 8005f08:	9b02      	ldr	r3, [sp, #8]
 8005f0a:	e780      	b.n	8005e0e <_dtoa_r+0x7de>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f10:	e782      	b.n	8005e18 <_dtoa_r+0x7e8>
 8005f12:	d099      	beq.n	8005e48 <_dtoa_r+0x818>
 8005f14:	9a08      	ldr	r2, [sp, #32]
 8005f16:	331c      	adds	r3, #28
 8005f18:	441a      	add	r2, r3
 8005f1a:	4498      	add	r8, r3
 8005f1c:	441e      	add	r6, r3
 8005f1e:	9208      	str	r2, [sp, #32]
 8005f20:	e792      	b.n	8005e48 <_dtoa_r+0x818>
 8005f22:	4603      	mov	r3, r0
 8005f24:	e7f6      	b.n	8005f14 <_dtoa_r+0x8e4>
 8005f26:	9b07      	ldr	r3, [sp, #28]
 8005f28:	9704      	str	r7, [sp, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	dc20      	bgt.n	8005f70 <_dtoa_r+0x940>
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	dd1e      	ble.n	8005f74 <_dtoa_r+0x944>
 8005f36:	9b00      	ldr	r3, [sp, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f47f aec0 	bne.w	8005cbe <_dtoa_r+0x68e>
 8005f3e:	4621      	mov	r1, r4
 8005f40:	2205      	movs	r2, #5
 8005f42:	4658      	mov	r0, fp
 8005f44:	f000 fa9a 	bl	800647c <__multadd>
 8005f48:	4601      	mov	r1, r0
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	4648      	mov	r0, r9
 8005f4e:	f000 fcad 	bl	80068ac <__mcmp>
 8005f52:	2800      	cmp	r0, #0
 8005f54:	f77f aeb3 	ble.w	8005cbe <_dtoa_r+0x68e>
 8005f58:	4656      	mov	r6, sl
 8005f5a:	2331      	movs	r3, #49	@ 0x31
 8005f5c:	f806 3b01 	strb.w	r3, [r6], #1
 8005f60:	9b04      	ldr	r3, [sp, #16]
 8005f62:	3301      	adds	r3, #1
 8005f64:	9304      	str	r3, [sp, #16]
 8005f66:	e6ae      	b.n	8005cc6 <_dtoa_r+0x696>
 8005f68:	9c07      	ldr	r4, [sp, #28]
 8005f6a:	9704      	str	r7, [sp, #16]
 8005f6c:	4625      	mov	r5, r4
 8005f6e:	e7f3      	b.n	8005f58 <_dtoa_r+0x928>
 8005f70:	9b07      	ldr	r3, [sp, #28]
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 8104 	beq.w	8006184 <_dtoa_r+0xb54>
 8005f7c:	2e00      	cmp	r6, #0
 8005f7e:	dd05      	ble.n	8005f8c <_dtoa_r+0x95c>
 8005f80:	4629      	mov	r1, r5
 8005f82:	4632      	mov	r2, r6
 8005f84:	4658      	mov	r0, fp
 8005f86:	f000 fc25 	bl	80067d4 <__lshift>
 8005f8a:	4605      	mov	r5, r0
 8005f8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d05a      	beq.n	8006048 <_dtoa_r+0xa18>
 8005f92:	6869      	ldr	r1, [r5, #4]
 8005f94:	4658      	mov	r0, fp
 8005f96:	f000 fa0f 	bl	80063b8 <_Balloc>
 8005f9a:	4606      	mov	r6, r0
 8005f9c:	b928      	cbnz	r0, 8005faa <_dtoa_r+0x97a>
 8005f9e:	4b84      	ldr	r3, [pc, #528]	@ (80061b0 <_dtoa_r+0xb80>)
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005fa6:	f7ff bb5a 	b.w	800565e <_dtoa_r+0x2e>
 8005faa:	692a      	ldr	r2, [r5, #16]
 8005fac:	3202      	adds	r2, #2
 8005fae:	0092      	lsls	r2, r2, #2
 8005fb0:	f105 010c 	add.w	r1, r5, #12
 8005fb4:	300c      	adds	r0, #12
 8005fb6:	f001 f837 	bl	8007028 <memcpy>
 8005fba:	2201      	movs	r2, #1
 8005fbc:	4631      	mov	r1, r6
 8005fbe:	4658      	mov	r0, fp
 8005fc0:	f000 fc08 	bl	80067d4 <__lshift>
 8005fc4:	f10a 0301 	add.w	r3, sl, #1
 8005fc8:	9307      	str	r3, [sp, #28]
 8005fca:	9b00      	ldr	r3, [sp, #0]
 8005fcc:	4453      	add	r3, sl
 8005fce:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fd0:	9b02      	ldr	r3, [sp, #8]
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	462f      	mov	r7, r5
 8005fd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fda:	4605      	mov	r5, r0
 8005fdc:	9b07      	ldr	r3, [sp, #28]
 8005fde:	4621      	mov	r1, r4
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	4648      	mov	r0, r9
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	f7ff fa9a 	bl	800551e <quorem>
 8005fea:	4639      	mov	r1, r7
 8005fec:	9002      	str	r0, [sp, #8]
 8005fee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005ff2:	4648      	mov	r0, r9
 8005ff4:	f000 fc5a 	bl	80068ac <__mcmp>
 8005ff8:	462a      	mov	r2, r5
 8005ffa:	9008      	str	r0, [sp, #32]
 8005ffc:	4621      	mov	r1, r4
 8005ffe:	4658      	mov	r0, fp
 8006000:	f000 fc70 	bl	80068e4 <__mdiff>
 8006004:	68c2      	ldr	r2, [r0, #12]
 8006006:	4606      	mov	r6, r0
 8006008:	bb02      	cbnz	r2, 800604c <_dtoa_r+0xa1c>
 800600a:	4601      	mov	r1, r0
 800600c:	4648      	mov	r0, r9
 800600e:	f000 fc4d 	bl	80068ac <__mcmp>
 8006012:	4602      	mov	r2, r0
 8006014:	4631      	mov	r1, r6
 8006016:	4658      	mov	r0, fp
 8006018:	920e      	str	r2, [sp, #56]	@ 0x38
 800601a:	f000 fa0d 	bl	8006438 <_Bfree>
 800601e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006020:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006022:	9e07      	ldr	r6, [sp, #28]
 8006024:	ea43 0102 	orr.w	r1, r3, r2
 8006028:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800602a:	4319      	orrs	r1, r3
 800602c:	d110      	bne.n	8006050 <_dtoa_r+0xa20>
 800602e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006032:	d029      	beq.n	8006088 <_dtoa_r+0xa58>
 8006034:	9b08      	ldr	r3, [sp, #32]
 8006036:	2b00      	cmp	r3, #0
 8006038:	dd02      	ble.n	8006040 <_dtoa_r+0xa10>
 800603a:	9b02      	ldr	r3, [sp, #8]
 800603c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006040:	9b00      	ldr	r3, [sp, #0]
 8006042:	f883 8000 	strb.w	r8, [r3]
 8006046:	e63f      	b.n	8005cc8 <_dtoa_r+0x698>
 8006048:	4628      	mov	r0, r5
 800604a:	e7bb      	b.n	8005fc4 <_dtoa_r+0x994>
 800604c:	2201      	movs	r2, #1
 800604e:	e7e1      	b.n	8006014 <_dtoa_r+0x9e4>
 8006050:	9b08      	ldr	r3, [sp, #32]
 8006052:	2b00      	cmp	r3, #0
 8006054:	db04      	blt.n	8006060 <_dtoa_r+0xa30>
 8006056:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006058:	430b      	orrs	r3, r1
 800605a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800605c:	430b      	orrs	r3, r1
 800605e:	d120      	bne.n	80060a2 <_dtoa_r+0xa72>
 8006060:	2a00      	cmp	r2, #0
 8006062:	dded      	ble.n	8006040 <_dtoa_r+0xa10>
 8006064:	4649      	mov	r1, r9
 8006066:	2201      	movs	r2, #1
 8006068:	4658      	mov	r0, fp
 800606a:	f000 fbb3 	bl	80067d4 <__lshift>
 800606e:	4621      	mov	r1, r4
 8006070:	4681      	mov	r9, r0
 8006072:	f000 fc1b 	bl	80068ac <__mcmp>
 8006076:	2800      	cmp	r0, #0
 8006078:	dc03      	bgt.n	8006082 <_dtoa_r+0xa52>
 800607a:	d1e1      	bne.n	8006040 <_dtoa_r+0xa10>
 800607c:	f018 0f01 	tst.w	r8, #1
 8006080:	d0de      	beq.n	8006040 <_dtoa_r+0xa10>
 8006082:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006086:	d1d8      	bne.n	800603a <_dtoa_r+0xa0a>
 8006088:	9a00      	ldr	r2, [sp, #0]
 800608a:	2339      	movs	r3, #57	@ 0x39
 800608c:	7013      	strb	r3, [r2, #0]
 800608e:	4633      	mov	r3, r6
 8006090:	461e      	mov	r6, r3
 8006092:	3b01      	subs	r3, #1
 8006094:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006098:	2a39      	cmp	r2, #57	@ 0x39
 800609a:	d052      	beq.n	8006142 <_dtoa_r+0xb12>
 800609c:	3201      	adds	r2, #1
 800609e:	701a      	strb	r2, [r3, #0]
 80060a0:	e612      	b.n	8005cc8 <_dtoa_r+0x698>
 80060a2:	2a00      	cmp	r2, #0
 80060a4:	dd07      	ble.n	80060b6 <_dtoa_r+0xa86>
 80060a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80060aa:	d0ed      	beq.n	8006088 <_dtoa_r+0xa58>
 80060ac:	9a00      	ldr	r2, [sp, #0]
 80060ae:	f108 0301 	add.w	r3, r8, #1
 80060b2:	7013      	strb	r3, [r2, #0]
 80060b4:	e608      	b.n	8005cc8 <_dtoa_r+0x698>
 80060b6:	9b07      	ldr	r3, [sp, #28]
 80060b8:	9a07      	ldr	r2, [sp, #28]
 80060ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80060be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d028      	beq.n	8006116 <_dtoa_r+0xae6>
 80060c4:	4649      	mov	r1, r9
 80060c6:	2300      	movs	r3, #0
 80060c8:	220a      	movs	r2, #10
 80060ca:	4658      	mov	r0, fp
 80060cc:	f000 f9d6 	bl	800647c <__multadd>
 80060d0:	42af      	cmp	r7, r5
 80060d2:	4681      	mov	r9, r0
 80060d4:	f04f 0300 	mov.w	r3, #0
 80060d8:	f04f 020a 	mov.w	r2, #10
 80060dc:	4639      	mov	r1, r7
 80060de:	4658      	mov	r0, fp
 80060e0:	d107      	bne.n	80060f2 <_dtoa_r+0xac2>
 80060e2:	f000 f9cb 	bl	800647c <__multadd>
 80060e6:	4607      	mov	r7, r0
 80060e8:	4605      	mov	r5, r0
 80060ea:	9b07      	ldr	r3, [sp, #28]
 80060ec:	3301      	adds	r3, #1
 80060ee:	9307      	str	r3, [sp, #28]
 80060f0:	e774      	b.n	8005fdc <_dtoa_r+0x9ac>
 80060f2:	f000 f9c3 	bl	800647c <__multadd>
 80060f6:	4629      	mov	r1, r5
 80060f8:	4607      	mov	r7, r0
 80060fa:	2300      	movs	r3, #0
 80060fc:	220a      	movs	r2, #10
 80060fe:	4658      	mov	r0, fp
 8006100:	f000 f9bc 	bl	800647c <__multadd>
 8006104:	4605      	mov	r5, r0
 8006106:	e7f0      	b.n	80060ea <_dtoa_r+0xaba>
 8006108:	9b00      	ldr	r3, [sp, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	bfcc      	ite	gt
 800610e:	461e      	movgt	r6, r3
 8006110:	2601      	movle	r6, #1
 8006112:	4456      	add	r6, sl
 8006114:	2700      	movs	r7, #0
 8006116:	4649      	mov	r1, r9
 8006118:	2201      	movs	r2, #1
 800611a:	4658      	mov	r0, fp
 800611c:	f000 fb5a 	bl	80067d4 <__lshift>
 8006120:	4621      	mov	r1, r4
 8006122:	4681      	mov	r9, r0
 8006124:	f000 fbc2 	bl	80068ac <__mcmp>
 8006128:	2800      	cmp	r0, #0
 800612a:	dcb0      	bgt.n	800608e <_dtoa_r+0xa5e>
 800612c:	d102      	bne.n	8006134 <_dtoa_r+0xb04>
 800612e:	f018 0f01 	tst.w	r8, #1
 8006132:	d1ac      	bne.n	800608e <_dtoa_r+0xa5e>
 8006134:	4633      	mov	r3, r6
 8006136:	461e      	mov	r6, r3
 8006138:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800613c:	2a30      	cmp	r2, #48	@ 0x30
 800613e:	d0fa      	beq.n	8006136 <_dtoa_r+0xb06>
 8006140:	e5c2      	b.n	8005cc8 <_dtoa_r+0x698>
 8006142:	459a      	cmp	sl, r3
 8006144:	d1a4      	bne.n	8006090 <_dtoa_r+0xa60>
 8006146:	9b04      	ldr	r3, [sp, #16]
 8006148:	3301      	adds	r3, #1
 800614a:	9304      	str	r3, [sp, #16]
 800614c:	2331      	movs	r3, #49	@ 0x31
 800614e:	f88a 3000 	strb.w	r3, [sl]
 8006152:	e5b9      	b.n	8005cc8 <_dtoa_r+0x698>
 8006154:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006156:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80061b4 <_dtoa_r+0xb84>
 800615a:	b11b      	cbz	r3, 8006164 <_dtoa_r+0xb34>
 800615c:	f10a 0308 	add.w	r3, sl, #8
 8006160:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006162:	6013      	str	r3, [r2, #0]
 8006164:	4650      	mov	r0, sl
 8006166:	b019      	add	sp, #100	@ 0x64
 8006168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800616c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800616e:	2b01      	cmp	r3, #1
 8006170:	f77f ae37 	ble.w	8005de2 <_dtoa_r+0x7b2>
 8006174:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006176:	930a      	str	r3, [sp, #40]	@ 0x28
 8006178:	2001      	movs	r0, #1
 800617a:	e655      	b.n	8005e28 <_dtoa_r+0x7f8>
 800617c:	9b00      	ldr	r3, [sp, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	f77f aed6 	ble.w	8005f30 <_dtoa_r+0x900>
 8006184:	4656      	mov	r6, sl
 8006186:	4621      	mov	r1, r4
 8006188:	4648      	mov	r0, r9
 800618a:	f7ff f9c8 	bl	800551e <quorem>
 800618e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006192:	f806 8b01 	strb.w	r8, [r6], #1
 8006196:	9b00      	ldr	r3, [sp, #0]
 8006198:	eba6 020a 	sub.w	r2, r6, sl
 800619c:	4293      	cmp	r3, r2
 800619e:	ddb3      	ble.n	8006108 <_dtoa_r+0xad8>
 80061a0:	4649      	mov	r1, r9
 80061a2:	2300      	movs	r3, #0
 80061a4:	220a      	movs	r2, #10
 80061a6:	4658      	mov	r0, fp
 80061a8:	f000 f968 	bl	800647c <__multadd>
 80061ac:	4681      	mov	r9, r0
 80061ae:	e7ea      	b.n	8006186 <_dtoa_r+0xb56>
 80061b0:	080072d8 	.word	0x080072d8
 80061b4:	0800725c 	.word	0x0800725c

080061b8 <_free_r>:
 80061b8:	b538      	push	{r3, r4, r5, lr}
 80061ba:	4605      	mov	r5, r0
 80061bc:	2900      	cmp	r1, #0
 80061be:	d041      	beq.n	8006244 <_free_r+0x8c>
 80061c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061c4:	1f0c      	subs	r4, r1, #4
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	bfb8      	it	lt
 80061ca:	18e4      	addlt	r4, r4, r3
 80061cc:	f000 f8e8 	bl	80063a0 <__malloc_lock>
 80061d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006248 <_free_r+0x90>)
 80061d2:	6813      	ldr	r3, [r2, #0]
 80061d4:	b933      	cbnz	r3, 80061e4 <_free_r+0x2c>
 80061d6:	6063      	str	r3, [r4, #4]
 80061d8:	6014      	str	r4, [r2, #0]
 80061da:	4628      	mov	r0, r5
 80061dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061e0:	f000 b8e4 	b.w	80063ac <__malloc_unlock>
 80061e4:	42a3      	cmp	r3, r4
 80061e6:	d908      	bls.n	80061fa <_free_r+0x42>
 80061e8:	6820      	ldr	r0, [r4, #0]
 80061ea:	1821      	adds	r1, r4, r0
 80061ec:	428b      	cmp	r3, r1
 80061ee:	bf01      	itttt	eq
 80061f0:	6819      	ldreq	r1, [r3, #0]
 80061f2:	685b      	ldreq	r3, [r3, #4]
 80061f4:	1809      	addeq	r1, r1, r0
 80061f6:	6021      	streq	r1, [r4, #0]
 80061f8:	e7ed      	b.n	80061d6 <_free_r+0x1e>
 80061fa:	461a      	mov	r2, r3
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	b10b      	cbz	r3, 8006204 <_free_r+0x4c>
 8006200:	42a3      	cmp	r3, r4
 8006202:	d9fa      	bls.n	80061fa <_free_r+0x42>
 8006204:	6811      	ldr	r1, [r2, #0]
 8006206:	1850      	adds	r0, r2, r1
 8006208:	42a0      	cmp	r0, r4
 800620a:	d10b      	bne.n	8006224 <_free_r+0x6c>
 800620c:	6820      	ldr	r0, [r4, #0]
 800620e:	4401      	add	r1, r0
 8006210:	1850      	adds	r0, r2, r1
 8006212:	4283      	cmp	r3, r0
 8006214:	6011      	str	r1, [r2, #0]
 8006216:	d1e0      	bne.n	80061da <_free_r+0x22>
 8006218:	6818      	ldr	r0, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	6053      	str	r3, [r2, #4]
 800621e:	4408      	add	r0, r1
 8006220:	6010      	str	r0, [r2, #0]
 8006222:	e7da      	b.n	80061da <_free_r+0x22>
 8006224:	d902      	bls.n	800622c <_free_r+0x74>
 8006226:	230c      	movs	r3, #12
 8006228:	602b      	str	r3, [r5, #0]
 800622a:	e7d6      	b.n	80061da <_free_r+0x22>
 800622c:	6820      	ldr	r0, [r4, #0]
 800622e:	1821      	adds	r1, r4, r0
 8006230:	428b      	cmp	r3, r1
 8006232:	bf04      	itt	eq
 8006234:	6819      	ldreq	r1, [r3, #0]
 8006236:	685b      	ldreq	r3, [r3, #4]
 8006238:	6063      	str	r3, [r4, #4]
 800623a:	bf04      	itt	eq
 800623c:	1809      	addeq	r1, r1, r0
 800623e:	6021      	streq	r1, [r4, #0]
 8006240:	6054      	str	r4, [r2, #4]
 8006242:	e7ca      	b.n	80061da <_free_r+0x22>
 8006244:	bd38      	pop	{r3, r4, r5, pc}
 8006246:	bf00      	nop
 8006248:	200004d4 	.word	0x200004d4

0800624c <malloc>:
 800624c:	4b02      	ldr	r3, [pc, #8]	@ (8006258 <malloc+0xc>)
 800624e:	4601      	mov	r1, r0
 8006250:	6818      	ldr	r0, [r3, #0]
 8006252:	f000 b825 	b.w	80062a0 <_malloc_r>
 8006256:	bf00      	nop
 8006258:	20000034 	.word	0x20000034

0800625c <sbrk_aligned>:
 800625c:	b570      	push	{r4, r5, r6, lr}
 800625e:	4e0f      	ldr	r6, [pc, #60]	@ (800629c <sbrk_aligned+0x40>)
 8006260:	460c      	mov	r4, r1
 8006262:	6831      	ldr	r1, [r6, #0]
 8006264:	4605      	mov	r5, r0
 8006266:	b911      	cbnz	r1, 800626e <sbrk_aligned+0x12>
 8006268:	f000 fece 	bl	8007008 <_sbrk_r>
 800626c:	6030      	str	r0, [r6, #0]
 800626e:	4621      	mov	r1, r4
 8006270:	4628      	mov	r0, r5
 8006272:	f000 fec9 	bl	8007008 <_sbrk_r>
 8006276:	1c43      	adds	r3, r0, #1
 8006278:	d103      	bne.n	8006282 <sbrk_aligned+0x26>
 800627a:	f04f 34ff 	mov.w	r4, #4294967295
 800627e:	4620      	mov	r0, r4
 8006280:	bd70      	pop	{r4, r5, r6, pc}
 8006282:	1cc4      	adds	r4, r0, #3
 8006284:	f024 0403 	bic.w	r4, r4, #3
 8006288:	42a0      	cmp	r0, r4
 800628a:	d0f8      	beq.n	800627e <sbrk_aligned+0x22>
 800628c:	1a21      	subs	r1, r4, r0
 800628e:	4628      	mov	r0, r5
 8006290:	f000 feba 	bl	8007008 <_sbrk_r>
 8006294:	3001      	adds	r0, #1
 8006296:	d1f2      	bne.n	800627e <sbrk_aligned+0x22>
 8006298:	e7ef      	b.n	800627a <sbrk_aligned+0x1e>
 800629a:	bf00      	nop
 800629c:	200004d0 	.word	0x200004d0

080062a0 <_malloc_r>:
 80062a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062a4:	1ccd      	adds	r5, r1, #3
 80062a6:	f025 0503 	bic.w	r5, r5, #3
 80062aa:	3508      	adds	r5, #8
 80062ac:	2d0c      	cmp	r5, #12
 80062ae:	bf38      	it	cc
 80062b0:	250c      	movcc	r5, #12
 80062b2:	2d00      	cmp	r5, #0
 80062b4:	4606      	mov	r6, r0
 80062b6:	db01      	blt.n	80062bc <_malloc_r+0x1c>
 80062b8:	42a9      	cmp	r1, r5
 80062ba:	d904      	bls.n	80062c6 <_malloc_r+0x26>
 80062bc:	230c      	movs	r3, #12
 80062be:	6033      	str	r3, [r6, #0]
 80062c0:	2000      	movs	r0, #0
 80062c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800639c <_malloc_r+0xfc>
 80062ca:	f000 f869 	bl	80063a0 <__malloc_lock>
 80062ce:	f8d8 3000 	ldr.w	r3, [r8]
 80062d2:	461c      	mov	r4, r3
 80062d4:	bb44      	cbnz	r4, 8006328 <_malloc_r+0x88>
 80062d6:	4629      	mov	r1, r5
 80062d8:	4630      	mov	r0, r6
 80062da:	f7ff ffbf 	bl	800625c <sbrk_aligned>
 80062de:	1c43      	adds	r3, r0, #1
 80062e0:	4604      	mov	r4, r0
 80062e2:	d158      	bne.n	8006396 <_malloc_r+0xf6>
 80062e4:	f8d8 4000 	ldr.w	r4, [r8]
 80062e8:	4627      	mov	r7, r4
 80062ea:	2f00      	cmp	r7, #0
 80062ec:	d143      	bne.n	8006376 <_malloc_r+0xd6>
 80062ee:	2c00      	cmp	r4, #0
 80062f0:	d04b      	beq.n	800638a <_malloc_r+0xea>
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	4639      	mov	r1, r7
 80062f6:	4630      	mov	r0, r6
 80062f8:	eb04 0903 	add.w	r9, r4, r3
 80062fc:	f000 fe84 	bl	8007008 <_sbrk_r>
 8006300:	4581      	cmp	r9, r0
 8006302:	d142      	bne.n	800638a <_malloc_r+0xea>
 8006304:	6821      	ldr	r1, [r4, #0]
 8006306:	1a6d      	subs	r5, r5, r1
 8006308:	4629      	mov	r1, r5
 800630a:	4630      	mov	r0, r6
 800630c:	f7ff ffa6 	bl	800625c <sbrk_aligned>
 8006310:	3001      	adds	r0, #1
 8006312:	d03a      	beq.n	800638a <_malloc_r+0xea>
 8006314:	6823      	ldr	r3, [r4, #0]
 8006316:	442b      	add	r3, r5
 8006318:	6023      	str	r3, [r4, #0]
 800631a:	f8d8 3000 	ldr.w	r3, [r8]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	bb62      	cbnz	r2, 800637c <_malloc_r+0xdc>
 8006322:	f8c8 7000 	str.w	r7, [r8]
 8006326:	e00f      	b.n	8006348 <_malloc_r+0xa8>
 8006328:	6822      	ldr	r2, [r4, #0]
 800632a:	1b52      	subs	r2, r2, r5
 800632c:	d420      	bmi.n	8006370 <_malloc_r+0xd0>
 800632e:	2a0b      	cmp	r2, #11
 8006330:	d917      	bls.n	8006362 <_malloc_r+0xc2>
 8006332:	1961      	adds	r1, r4, r5
 8006334:	42a3      	cmp	r3, r4
 8006336:	6025      	str	r5, [r4, #0]
 8006338:	bf18      	it	ne
 800633a:	6059      	strne	r1, [r3, #4]
 800633c:	6863      	ldr	r3, [r4, #4]
 800633e:	bf08      	it	eq
 8006340:	f8c8 1000 	streq.w	r1, [r8]
 8006344:	5162      	str	r2, [r4, r5]
 8006346:	604b      	str	r3, [r1, #4]
 8006348:	4630      	mov	r0, r6
 800634a:	f000 f82f 	bl	80063ac <__malloc_unlock>
 800634e:	f104 000b 	add.w	r0, r4, #11
 8006352:	1d23      	adds	r3, r4, #4
 8006354:	f020 0007 	bic.w	r0, r0, #7
 8006358:	1ac2      	subs	r2, r0, r3
 800635a:	bf1c      	itt	ne
 800635c:	1a1b      	subne	r3, r3, r0
 800635e:	50a3      	strne	r3, [r4, r2]
 8006360:	e7af      	b.n	80062c2 <_malloc_r+0x22>
 8006362:	6862      	ldr	r2, [r4, #4]
 8006364:	42a3      	cmp	r3, r4
 8006366:	bf0c      	ite	eq
 8006368:	f8c8 2000 	streq.w	r2, [r8]
 800636c:	605a      	strne	r2, [r3, #4]
 800636e:	e7eb      	b.n	8006348 <_malloc_r+0xa8>
 8006370:	4623      	mov	r3, r4
 8006372:	6864      	ldr	r4, [r4, #4]
 8006374:	e7ae      	b.n	80062d4 <_malloc_r+0x34>
 8006376:	463c      	mov	r4, r7
 8006378:	687f      	ldr	r7, [r7, #4]
 800637a:	e7b6      	b.n	80062ea <_malloc_r+0x4a>
 800637c:	461a      	mov	r2, r3
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	42a3      	cmp	r3, r4
 8006382:	d1fb      	bne.n	800637c <_malloc_r+0xdc>
 8006384:	2300      	movs	r3, #0
 8006386:	6053      	str	r3, [r2, #4]
 8006388:	e7de      	b.n	8006348 <_malloc_r+0xa8>
 800638a:	230c      	movs	r3, #12
 800638c:	6033      	str	r3, [r6, #0]
 800638e:	4630      	mov	r0, r6
 8006390:	f000 f80c 	bl	80063ac <__malloc_unlock>
 8006394:	e794      	b.n	80062c0 <_malloc_r+0x20>
 8006396:	6005      	str	r5, [r0, #0]
 8006398:	e7d6      	b.n	8006348 <_malloc_r+0xa8>
 800639a:	bf00      	nop
 800639c:	200004d4 	.word	0x200004d4

080063a0 <__malloc_lock>:
 80063a0:	4801      	ldr	r0, [pc, #4]	@ (80063a8 <__malloc_lock+0x8>)
 80063a2:	f7ff b8ba 	b.w	800551a <__retarget_lock_acquire_recursive>
 80063a6:	bf00      	nop
 80063a8:	200004cc 	.word	0x200004cc

080063ac <__malloc_unlock>:
 80063ac:	4801      	ldr	r0, [pc, #4]	@ (80063b4 <__malloc_unlock+0x8>)
 80063ae:	f7ff b8b5 	b.w	800551c <__retarget_lock_release_recursive>
 80063b2:	bf00      	nop
 80063b4:	200004cc 	.word	0x200004cc

080063b8 <_Balloc>:
 80063b8:	b570      	push	{r4, r5, r6, lr}
 80063ba:	69c6      	ldr	r6, [r0, #28]
 80063bc:	4604      	mov	r4, r0
 80063be:	460d      	mov	r5, r1
 80063c0:	b976      	cbnz	r6, 80063e0 <_Balloc+0x28>
 80063c2:	2010      	movs	r0, #16
 80063c4:	f7ff ff42 	bl	800624c <malloc>
 80063c8:	4602      	mov	r2, r0
 80063ca:	61e0      	str	r0, [r4, #28]
 80063cc:	b920      	cbnz	r0, 80063d8 <_Balloc+0x20>
 80063ce:	4b18      	ldr	r3, [pc, #96]	@ (8006430 <_Balloc+0x78>)
 80063d0:	4818      	ldr	r0, [pc, #96]	@ (8006434 <_Balloc+0x7c>)
 80063d2:	216b      	movs	r1, #107	@ 0x6b
 80063d4:	f000 fe36 	bl	8007044 <__assert_func>
 80063d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063dc:	6006      	str	r6, [r0, #0]
 80063de:	60c6      	str	r6, [r0, #12]
 80063e0:	69e6      	ldr	r6, [r4, #28]
 80063e2:	68f3      	ldr	r3, [r6, #12]
 80063e4:	b183      	cbz	r3, 8006408 <_Balloc+0x50>
 80063e6:	69e3      	ldr	r3, [r4, #28]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80063ee:	b9b8      	cbnz	r0, 8006420 <_Balloc+0x68>
 80063f0:	2101      	movs	r1, #1
 80063f2:	fa01 f605 	lsl.w	r6, r1, r5
 80063f6:	1d72      	adds	r2, r6, #5
 80063f8:	0092      	lsls	r2, r2, #2
 80063fa:	4620      	mov	r0, r4
 80063fc:	f000 fe40 	bl	8007080 <_calloc_r>
 8006400:	b160      	cbz	r0, 800641c <_Balloc+0x64>
 8006402:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006406:	e00e      	b.n	8006426 <_Balloc+0x6e>
 8006408:	2221      	movs	r2, #33	@ 0x21
 800640a:	2104      	movs	r1, #4
 800640c:	4620      	mov	r0, r4
 800640e:	f000 fe37 	bl	8007080 <_calloc_r>
 8006412:	69e3      	ldr	r3, [r4, #28]
 8006414:	60f0      	str	r0, [r6, #12]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1e4      	bne.n	80063e6 <_Balloc+0x2e>
 800641c:	2000      	movs	r0, #0
 800641e:	bd70      	pop	{r4, r5, r6, pc}
 8006420:	6802      	ldr	r2, [r0, #0]
 8006422:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006426:	2300      	movs	r3, #0
 8006428:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800642c:	e7f7      	b.n	800641e <_Balloc+0x66>
 800642e:	bf00      	nop
 8006430:	08007269 	.word	0x08007269
 8006434:	080072e9 	.word	0x080072e9

08006438 <_Bfree>:
 8006438:	b570      	push	{r4, r5, r6, lr}
 800643a:	69c6      	ldr	r6, [r0, #28]
 800643c:	4605      	mov	r5, r0
 800643e:	460c      	mov	r4, r1
 8006440:	b976      	cbnz	r6, 8006460 <_Bfree+0x28>
 8006442:	2010      	movs	r0, #16
 8006444:	f7ff ff02 	bl	800624c <malloc>
 8006448:	4602      	mov	r2, r0
 800644a:	61e8      	str	r0, [r5, #28]
 800644c:	b920      	cbnz	r0, 8006458 <_Bfree+0x20>
 800644e:	4b09      	ldr	r3, [pc, #36]	@ (8006474 <_Bfree+0x3c>)
 8006450:	4809      	ldr	r0, [pc, #36]	@ (8006478 <_Bfree+0x40>)
 8006452:	218f      	movs	r1, #143	@ 0x8f
 8006454:	f000 fdf6 	bl	8007044 <__assert_func>
 8006458:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800645c:	6006      	str	r6, [r0, #0]
 800645e:	60c6      	str	r6, [r0, #12]
 8006460:	b13c      	cbz	r4, 8006472 <_Bfree+0x3a>
 8006462:	69eb      	ldr	r3, [r5, #28]
 8006464:	6862      	ldr	r2, [r4, #4]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800646c:	6021      	str	r1, [r4, #0]
 800646e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006472:	bd70      	pop	{r4, r5, r6, pc}
 8006474:	08007269 	.word	0x08007269
 8006478:	080072e9 	.word	0x080072e9

0800647c <__multadd>:
 800647c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006480:	690d      	ldr	r5, [r1, #16]
 8006482:	4607      	mov	r7, r0
 8006484:	460c      	mov	r4, r1
 8006486:	461e      	mov	r6, r3
 8006488:	f101 0c14 	add.w	ip, r1, #20
 800648c:	2000      	movs	r0, #0
 800648e:	f8dc 3000 	ldr.w	r3, [ip]
 8006492:	b299      	uxth	r1, r3
 8006494:	fb02 6101 	mla	r1, r2, r1, r6
 8006498:	0c1e      	lsrs	r6, r3, #16
 800649a:	0c0b      	lsrs	r3, r1, #16
 800649c:	fb02 3306 	mla	r3, r2, r6, r3
 80064a0:	b289      	uxth	r1, r1
 80064a2:	3001      	adds	r0, #1
 80064a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80064a8:	4285      	cmp	r5, r0
 80064aa:	f84c 1b04 	str.w	r1, [ip], #4
 80064ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80064b2:	dcec      	bgt.n	800648e <__multadd+0x12>
 80064b4:	b30e      	cbz	r6, 80064fa <__multadd+0x7e>
 80064b6:	68a3      	ldr	r3, [r4, #8]
 80064b8:	42ab      	cmp	r3, r5
 80064ba:	dc19      	bgt.n	80064f0 <__multadd+0x74>
 80064bc:	6861      	ldr	r1, [r4, #4]
 80064be:	4638      	mov	r0, r7
 80064c0:	3101      	adds	r1, #1
 80064c2:	f7ff ff79 	bl	80063b8 <_Balloc>
 80064c6:	4680      	mov	r8, r0
 80064c8:	b928      	cbnz	r0, 80064d6 <__multadd+0x5a>
 80064ca:	4602      	mov	r2, r0
 80064cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006500 <__multadd+0x84>)
 80064ce:	480d      	ldr	r0, [pc, #52]	@ (8006504 <__multadd+0x88>)
 80064d0:	21ba      	movs	r1, #186	@ 0xba
 80064d2:	f000 fdb7 	bl	8007044 <__assert_func>
 80064d6:	6922      	ldr	r2, [r4, #16]
 80064d8:	3202      	adds	r2, #2
 80064da:	f104 010c 	add.w	r1, r4, #12
 80064de:	0092      	lsls	r2, r2, #2
 80064e0:	300c      	adds	r0, #12
 80064e2:	f000 fda1 	bl	8007028 <memcpy>
 80064e6:	4621      	mov	r1, r4
 80064e8:	4638      	mov	r0, r7
 80064ea:	f7ff ffa5 	bl	8006438 <_Bfree>
 80064ee:	4644      	mov	r4, r8
 80064f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80064f4:	3501      	adds	r5, #1
 80064f6:	615e      	str	r6, [r3, #20]
 80064f8:	6125      	str	r5, [r4, #16]
 80064fa:	4620      	mov	r0, r4
 80064fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006500:	080072d8 	.word	0x080072d8
 8006504:	080072e9 	.word	0x080072e9

08006508 <__hi0bits>:
 8006508:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800650c:	4603      	mov	r3, r0
 800650e:	bf36      	itet	cc
 8006510:	0403      	lslcc	r3, r0, #16
 8006512:	2000      	movcs	r0, #0
 8006514:	2010      	movcc	r0, #16
 8006516:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800651a:	bf3c      	itt	cc
 800651c:	021b      	lslcc	r3, r3, #8
 800651e:	3008      	addcc	r0, #8
 8006520:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006524:	bf3c      	itt	cc
 8006526:	011b      	lslcc	r3, r3, #4
 8006528:	3004      	addcc	r0, #4
 800652a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800652e:	bf3c      	itt	cc
 8006530:	009b      	lslcc	r3, r3, #2
 8006532:	3002      	addcc	r0, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	db05      	blt.n	8006544 <__hi0bits+0x3c>
 8006538:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800653c:	f100 0001 	add.w	r0, r0, #1
 8006540:	bf08      	it	eq
 8006542:	2020      	moveq	r0, #32
 8006544:	4770      	bx	lr

08006546 <__lo0bits>:
 8006546:	6803      	ldr	r3, [r0, #0]
 8006548:	4602      	mov	r2, r0
 800654a:	f013 0007 	ands.w	r0, r3, #7
 800654e:	d00b      	beq.n	8006568 <__lo0bits+0x22>
 8006550:	07d9      	lsls	r1, r3, #31
 8006552:	d421      	bmi.n	8006598 <__lo0bits+0x52>
 8006554:	0798      	lsls	r0, r3, #30
 8006556:	bf49      	itett	mi
 8006558:	085b      	lsrmi	r3, r3, #1
 800655a:	089b      	lsrpl	r3, r3, #2
 800655c:	2001      	movmi	r0, #1
 800655e:	6013      	strmi	r3, [r2, #0]
 8006560:	bf5c      	itt	pl
 8006562:	6013      	strpl	r3, [r2, #0]
 8006564:	2002      	movpl	r0, #2
 8006566:	4770      	bx	lr
 8006568:	b299      	uxth	r1, r3
 800656a:	b909      	cbnz	r1, 8006570 <__lo0bits+0x2a>
 800656c:	0c1b      	lsrs	r3, r3, #16
 800656e:	2010      	movs	r0, #16
 8006570:	b2d9      	uxtb	r1, r3
 8006572:	b909      	cbnz	r1, 8006578 <__lo0bits+0x32>
 8006574:	3008      	adds	r0, #8
 8006576:	0a1b      	lsrs	r3, r3, #8
 8006578:	0719      	lsls	r1, r3, #28
 800657a:	bf04      	itt	eq
 800657c:	091b      	lsreq	r3, r3, #4
 800657e:	3004      	addeq	r0, #4
 8006580:	0799      	lsls	r1, r3, #30
 8006582:	bf04      	itt	eq
 8006584:	089b      	lsreq	r3, r3, #2
 8006586:	3002      	addeq	r0, #2
 8006588:	07d9      	lsls	r1, r3, #31
 800658a:	d403      	bmi.n	8006594 <__lo0bits+0x4e>
 800658c:	085b      	lsrs	r3, r3, #1
 800658e:	f100 0001 	add.w	r0, r0, #1
 8006592:	d003      	beq.n	800659c <__lo0bits+0x56>
 8006594:	6013      	str	r3, [r2, #0]
 8006596:	4770      	bx	lr
 8006598:	2000      	movs	r0, #0
 800659a:	4770      	bx	lr
 800659c:	2020      	movs	r0, #32
 800659e:	4770      	bx	lr

080065a0 <__i2b>:
 80065a0:	b510      	push	{r4, lr}
 80065a2:	460c      	mov	r4, r1
 80065a4:	2101      	movs	r1, #1
 80065a6:	f7ff ff07 	bl	80063b8 <_Balloc>
 80065aa:	4602      	mov	r2, r0
 80065ac:	b928      	cbnz	r0, 80065ba <__i2b+0x1a>
 80065ae:	4b05      	ldr	r3, [pc, #20]	@ (80065c4 <__i2b+0x24>)
 80065b0:	4805      	ldr	r0, [pc, #20]	@ (80065c8 <__i2b+0x28>)
 80065b2:	f240 1145 	movw	r1, #325	@ 0x145
 80065b6:	f000 fd45 	bl	8007044 <__assert_func>
 80065ba:	2301      	movs	r3, #1
 80065bc:	6144      	str	r4, [r0, #20]
 80065be:	6103      	str	r3, [r0, #16]
 80065c0:	bd10      	pop	{r4, pc}
 80065c2:	bf00      	nop
 80065c4:	080072d8 	.word	0x080072d8
 80065c8:	080072e9 	.word	0x080072e9

080065cc <__multiply>:
 80065cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d0:	4614      	mov	r4, r2
 80065d2:	690a      	ldr	r2, [r1, #16]
 80065d4:	6923      	ldr	r3, [r4, #16]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	bfa8      	it	ge
 80065da:	4623      	movge	r3, r4
 80065dc:	460f      	mov	r7, r1
 80065de:	bfa4      	itt	ge
 80065e0:	460c      	movge	r4, r1
 80065e2:	461f      	movge	r7, r3
 80065e4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80065e8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80065ec:	68a3      	ldr	r3, [r4, #8]
 80065ee:	6861      	ldr	r1, [r4, #4]
 80065f0:	eb0a 0609 	add.w	r6, sl, r9
 80065f4:	42b3      	cmp	r3, r6
 80065f6:	b085      	sub	sp, #20
 80065f8:	bfb8      	it	lt
 80065fa:	3101      	addlt	r1, #1
 80065fc:	f7ff fedc 	bl	80063b8 <_Balloc>
 8006600:	b930      	cbnz	r0, 8006610 <__multiply+0x44>
 8006602:	4602      	mov	r2, r0
 8006604:	4b44      	ldr	r3, [pc, #272]	@ (8006718 <__multiply+0x14c>)
 8006606:	4845      	ldr	r0, [pc, #276]	@ (800671c <__multiply+0x150>)
 8006608:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800660c:	f000 fd1a 	bl	8007044 <__assert_func>
 8006610:	f100 0514 	add.w	r5, r0, #20
 8006614:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006618:	462b      	mov	r3, r5
 800661a:	2200      	movs	r2, #0
 800661c:	4543      	cmp	r3, r8
 800661e:	d321      	bcc.n	8006664 <__multiply+0x98>
 8006620:	f107 0114 	add.w	r1, r7, #20
 8006624:	f104 0214 	add.w	r2, r4, #20
 8006628:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800662c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006630:	9302      	str	r3, [sp, #8]
 8006632:	1b13      	subs	r3, r2, r4
 8006634:	3b15      	subs	r3, #21
 8006636:	f023 0303 	bic.w	r3, r3, #3
 800663a:	3304      	adds	r3, #4
 800663c:	f104 0715 	add.w	r7, r4, #21
 8006640:	42ba      	cmp	r2, r7
 8006642:	bf38      	it	cc
 8006644:	2304      	movcc	r3, #4
 8006646:	9301      	str	r3, [sp, #4]
 8006648:	9b02      	ldr	r3, [sp, #8]
 800664a:	9103      	str	r1, [sp, #12]
 800664c:	428b      	cmp	r3, r1
 800664e:	d80c      	bhi.n	800666a <__multiply+0x9e>
 8006650:	2e00      	cmp	r6, #0
 8006652:	dd03      	ble.n	800665c <__multiply+0x90>
 8006654:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006658:	2b00      	cmp	r3, #0
 800665a:	d05b      	beq.n	8006714 <__multiply+0x148>
 800665c:	6106      	str	r6, [r0, #16]
 800665e:	b005      	add	sp, #20
 8006660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006664:	f843 2b04 	str.w	r2, [r3], #4
 8006668:	e7d8      	b.n	800661c <__multiply+0x50>
 800666a:	f8b1 a000 	ldrh.w	sl, [r1]
 800666e:	f1ba 0f00 	cmp.w	sl, #0
 8006672:	d024      	beq.n	80066be <__multiply+0xf2>
 8006674:	f104 0e14 	add.w	lr, r4, #20
 8006678:	46a9      	mov	r9, r5
 800667a:	f04f 0c00 	mov.w	ip, #0
 800667e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006682:	f8d9 3000 	ldr.w	r3, [r9]
 8006686:	fa1f fb87 	uxth.w	fp, r7
 800668a:	b29b      	uxth	r3, r3
 800668c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006690:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006694:	f8d9 7000 	ldr.w	r7, [r9]
 8006698:	4463      	add	r3, ip
 800669a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800669e:	fb0a c70b 	mla	r7, sl, fp, ip
 80066a2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80066ac:	4572      	cmp	r2, lr
 80066ae:	f849 3b04 	str.w	r3, [r9], #4
 80066b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80066b6:	d8e2      	bhi.n	800667e <__multiply+0xb2>
 80066b8:	9b01      	ldr	r3, [sp, #4]
 80066ba:	f845 c003 	str.w	ip, [r5, r3]
 80066be:	9b03      	ldr	r3, [sp, #12]
 80066c0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80066c4:	3104      	adds	r1, #4
 80066c6:	f1b9 0f00 	cmp.w	r9, #0
 80066ca:	d021      	beq.n	8006710 <__multiply+0x144>
 80066cc:	682b      	ldr	r3, [r5, #0]
 80066ce:	f104 0c14 	add.w	ip, r4, #20
 80066d2:	46ae      	mov	lr, r5
 80066d4:	f04f 0a00 	mov.w	sl, #0
 80066d8:	f8bc b000 	ldrh.w	fp, [ip]
 80066dc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80066e0:	fb09 770b 	mla	r7, r9, fp, r7
 80066e4:	4457      	add	r7, sl
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80066ec:	f84e 3b04 	str.w	r3, [lr], #4
 80066f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80066f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066f8:	f8be 3000 	ldrh.w	r3, [lr]
 80066fc:	fb09 330a 	mla	r3, r9, sl, r3
 8006700:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006704:	4562      	cmp	r2, ip
 8006706:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800670a:	d8e5      	bhi.n	80066d8 <__multiply+0x10c>
 800670c:	9f01      	ldr	r7, [sp, #4]
 800670e:	51eb      	str	r3, [r5, r7]
 8006710:	3504      	adds	r5, #4
 8006712:	e799      	b.n	8006648 <__multiply+0x7c>
 8006714:	3e01      	subs	r6, #1
 8006716:	e79b      	b.n	8006650 <__multiply+0x84>
 8006718:	080072d8 	.word	0x080072d8
 800671c:	080072e9 	.word	0x080072e9

08006720 <__pow5mult>:
 8006720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006724:	4615      	mov	r5, r2
 8006726:	f012 0203 	ands.w	r2, r2, #3
 800672a:	4607      	mov	r7, r0
 800672c:	460e      	mov	r6, r1
 800672e:	d007      	beq.n	8006740 <__pow5mult+0x20>
 8006730:	4c25      	ldr	r4, [pc, #148]	@ (80067c8 <__pow5mult+0xa8>)
 8006732:	3a01      	subs	r2, #1
 8006734:	2300      	movs	r3, #0
 8006736:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800673a:	f7ff fe9f 	bl	800647c <__multadd>
 800673e:	4606      	mov	r6, r0
 8006740:	10ad      	asrs	r5, r5, #2
 8006742:	d03d      	beq.n	80067c0 <__pow5mult+0xa0>
 8006744:	69fc      	ldr	r4, [r7, #28]
 8006746:	b97c      	cbnz	r4, 8006768 <__pow5mult+0x48>
 8006748:	2010      	movs	r0, #16
 800674a:	f7ff fd7f 	bl	800624c <malloc>
 800674e:	4602      	mov	r2, r0
 8006750:	61f8      	str	r0, [r7, #28]
 8006752:	b928      	cbnz	r0, 8006760 <__pow5mult+0x40>
 8006754:	4b1d      	ldr	r3, [pc, #116]	@ (80067cc <__pow5mult+0xac>)
 8006756:	481e      	ldr	r0, [pc, #120]	@ (80067d0 <__pow5mult+0xb0>)
 8006758:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800675c:	f000 fc72 	bl	8007044 <__assert_func>
 8006760:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006764:	6004      	str	r4, [r0, #0]
 8006766:	60c4      	str	r4, [r0, #12]
 8006768:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800676c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006770:	b94c      	cbnz	r4, 8006786 <__pow5mult+0x66>
 8006772:	f240 2171 	movw	r1, #625	@ 0x271
 8006776:	4638      	mov	r0, r7
 8006778:	f7ff ff12 	bl	80065a0 <__i2b>
 800677c:	2300      	movs	r3, #0
 800677e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006782:	4604      	mov	r4, r0
 8006784:	6003      	str	r3, [r0, #0]
 8006786:	f04f 0900 	mov.w	r9, #0
 800678a:	07eb      	lsls	r3, r5, #31
 800678c:	d50a      	bpl.n	80067a4 <__pow5mult+0x84>
 800678e:	4631      	mov	r1, r6
 8006790:	4622      	mov	r2, r4
 8006792:	4638      	mov	r0, r7
 8006794:	f7ff ff1a 	bl	80065cc <__multiply>
 8006798:	4631      	mov	r1, r6
 800679a:	4680      	mov	r8, r0
 800679c:	4638      	mov	r0, r7
 800679e:	f7ff fe4b 	bl	8006438 <_Bfree>
 80067a2:	4646      	mov	r6, r8
 80067a4:	106d      	asrs	r5, r5, #1
 80067a6:	d00b      	beq.n	80067c0 <__pow5mult+0xa0>
 80067a8:	6820      	ldr	r0, [r4, #0]
 80067aa:	b938      	cbnz	r0, 80067bc <__pow5mult+0x9c>
 80067ac:	4622      	mov	r2, r4
 80067ae:	4621      	mov	r1, r4
 80067b0:	4638      	mov	r0, r7
 80067b2:	f7ff ff0b 	bl	80065cc <__multiply>
 80067b6:	6020      	str	r0, [r4, #0]
 80067b8:	f8c0 9000 	str.w	r9, [r0]
 80067bc:	4604      	mov	r4, r0
 80067be:	e7e4      	b.n	800678a <__pow5mult+0x6a>
 80067c0:	4630      	mov	r0, r6
 80067c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067c6:	bf00      	nop
 80067c8:	08007344 	.word	0x08007344
 80067cc:	08007269 	.word	0x08007269
 80067d0:	080072e9 	.word	0x080072e9

080067d4 <__lshift>:
 80067d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d8:	460c      	mov	r4, r1
 80067da:	6849      	ldr	r1, [r1, #4]
 80067dc:	6923      	ldr	r3, [r4, #16]
 80067de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80067e2:	68a3      	ldr	r3, [r4, #8]
 80067e4:	4607      	mov	r7, r0
 80067e6:	4691      	mov	r9, r2
 80067e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80067ec:	f108 0601 	add.w	r6, r8, #1
 80067f0:	42b3      	cmp	r3, r6
 80067f2:	db0b      	blt.n	800680c <__lshift+0x38>
 80067f4:	4638      	mov	r0, r7
 80067f6:	f7ff fddf 	bl	80063b8 <_Balloc>
 80067fa:	4605      	mov	r5, r0
 80067fc:	b948      	cbnz	r0, 8006812 <__lshift+0x3e>
 80067fe:	4602      	mov	r2, r0
 8006800:	4b28      	ldr	r3, [pc, #160]	@ (80068a4 <__lshift+0xd0>)
 8006802:	4829      	ldr	r0, [pc, #164]	@ (80068a8 <__lshift+0xd4>)
 8006804:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006808:	f000 fc1c 	bl	8007044 <__assert_func>
 800680c:	3101      	adds	r1, #1
 800680e:	005b      	lsls	r3, r3, #1
 8006810:	e7ee      	b.n	80067f0 <__lshift+0x1c>
 8006812:	2300      	movs	r3, #0
 8006814:	f100 0114 	add.w	r1, r0, #20
 8006818:	f100 0210 	add.w	r2, r0, #16
 800681c:	4618      	mov	r0, r3
 800681e:	4553      	cmp	r3, sl
 8006820:	db33      	blt.n	800688a <__lshift+0xb6>
 8006822:	6920      	ldr	r0, [r4, #16]
 8006824:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006828:	f104 0314 	add.w	r3, r4, #20
 800682c:	f019 091f 	ands.w	r9, r9, #31
 8006830:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006834:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006838:	d02b      	beq.n	8006892 <__lshift+0xbe>
 800683a:	f1c9 0e20 	rsb	lr, r9, #32
 800683e:	468a      	mov	sl, r1
 8006840:	2200      	movs	r2, #0
 8006842:	6818      	ldr	r0, [r3, #0]
 8006844:	fa00 f009 	lsl.w	r0, r0, r9
 8006848:	4310      	orrs	r0, r2
 800684a:	f84a 0b04 	str.w	r0, [sl], #4
 800684e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006852:	459c      	cmp	ip, r3
 8006854:	fa22 f20e 	lsr.w	r2, r2, lr
 8006858:	d8f3      	bhi.n	8006842 <__lshift+0x6e>
 800685a:	ebac 0304 	sub.w	r3, ip, r4
 800685e:	3b15      	subs	r3, #21
 8006860:	f023 0303 	bic.w	r3, r3, #3
 8006864:	3304      	adds	r3, #4
 8006866:	f104 0015 	add.w	r0, r4, #21
 800686a:	4584      	cmp	ip, r0
 800686c:	bf38      	it	cc
 800686e:	2304      	movcc	r3, #4
 8006870:	50ca      	str	r2, [r1, r3]
 8006872:	b10a      	cbz	r2, 8006878 <__lshift+0xa4>
 8006874:	f108 0602 	add.w	r6, r8, #2
 8006878:	3e01      	subs	r6, #1
 800687a:	4638      	mov	r0, r7
 800687c:	612e      	str	r6, [r5, #16]
 800687e:	4621      	mov	r1, r4
 8006880:	f7ff fdda 	bl	8006438 <_Bfree>
 8006884:	4628      	mov	r0, r5
 8006886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800688a:	f842 0f04 	str.w	r0, [r2, #4]!
 800688e:	3301      	adds	r3, #1
 8006890:	e7c5      	b.n	800681e <__lshift+0x4a>
 8006892:	3904      	subs	r1, #4
 8006894:	f853 2b04 	ldr.w	r2, [r3], #4
 8006898:	f841 2f04 	str.w	r2, [r1, #4]!
 800689c:	459c      	cmp	ip, r3
 800689e:	d8f9      	bhi.n	8006894 <__lshift+0xc0>
 80068a0:	e7ea      	b.n	8006878 <__lshift+0xa4>
 80068a2:	bf00      	nop
 80068a4:	080072d8 	.word	0x080072d8
 80068a8:	080072e9 	.word	0x080072e9

080068ac <__mcmp>:
 80068ac:	690a      	ldr	r2, [r1, #16]
 80068ae:	4603      	mov	r3, r0
 80068b0:	6900      	ldr	r0, [r0, #16]
 80068b2:	1a80      	subs	r0, r0, r2
 80068b4:	b530      	push	{r4, r5, lr}
 80068b6:	d10e      	bne.n	80068d6 <__mcmp+0x2a>
 80068b8:	3314      	adds	r3, #20
 80068ba:	3114      	adds	r1, #20
 80068bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80068c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80068c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80068c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80068cc:	4295      	cmp	r5, r2
 80068ce:	d003      	beq.n	80068d8 <__mcmp+0x2c>
 80068d0:	d205      	bcs.n	80068de <__mcmp+0x32>
 80068d2:	f04f 30ff 	mov.w	r0, #4294967295
 80068d6:	bd30      	pop	{r4, r5, pc}
 80068d8:	42a3      	cmp	r3, r4
 80068da:	d3f3      	bcc.n	80068c4 <__mcmp+0x18>
 80068dc:	e7fb      	b.n	80068d6 <__mcmp+0x2a>
 80068de:	2001      	movs	r0, #1
 80068e0:	e7f9      	b.n	80068d6 <__mcmp+0x2a>
	...

080068e4 <__mdiff>:
 80068e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e8:	4689      	mov	r9, r1
 80068ea:	4606      	mov	r6, r0
 80068ec:	4611      	mov	r1, r2
 80068ee:	4648      	mov	r0, r9
 80068f0:	4614      	mov	r4, r2
 80068f2:	f7ff ffdb 	bl	80068ac <__mcmp>
 80068f6:	1e05      	subs	r5, r0, #0
 80068f8:	d112      	bne.n	8006920 <__mdiff+0x3c>
 80068fa:	4629      	mov	r1, r5
 80068fc:	4630      	mov	r0, r6
 80068fe:	f7ff fd5b 	bl	80063b8 <_Balloc>
 8006902:	4602      	mov	r2, r0
 8006904:	b928      	cbnz	r0, 8006912 <__mdiff+0x2e>
 8006906:	4b3f      	ldr	r3, [pc, #252]	@ (8006a04 <__mdiff+0x120>)
 8006908:	f240 2137 	movw	r1, #567	@ 0x237
 800690c:	483e      	ldr	r0, [pc, #248]	@ (8006a08 <__mdiff+0x124>)
 800690e:	f000 fb99 	bl	8007044 <__assert_func>
 8006912:	2301      	movs	r3, #1
 8006914:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006918:	4610      	mov	r0, r2
 800691a:	b003      	add	sp, #12
 800691c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006920:	bfbc      	itt	lt
 8006922:	464b      	movlt	r3, r9
 8006924:	46a1      	movlt	r9, r4
 8006926:	4630      	mov	r0, r6
 8006928:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800692c:	bfba      	itte	lt
 800692e:	461c      	movlt	r4, r3
 8006930:	2501      	movlt	r5, #1
 8006932:	2500      	movge	r5, #0
 8006934:	f7ff fd40 	bl	80063b8 <_Balloc>
 8006938:	4602      	mov	r2, r0
 800693a:	b918      	cbnz	r0, 8006944 <__mdiff+0x60>
 800693c:	4b31      	ldr	r3, [pc, #196]	@ (8006a04 <__mdiff+0x120>)
 800693e:	f240 2145 	movw	r1, #581	@ 0x245
 8006942:	e7e3      	b.n	800690c <__mdiff+0x28>
 8006944:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006948:	6926      	ldr	r6, [r4, #16]
 800694a:	60c5      	str	r5, [r0, #12]
 800694c:	f109 0310 	add.w	r3, r9, #16
 8006950:	f109 0514 	add.w	r5, r9, #20
 8006954:	f104 0e14 	add.w	lr, r4, #20
 8006958:	f100 0b14 	add.w	fp, r0, #20
 800695c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006960:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006964:	9301      	str	r3, [sp, #4]
 8006966:	46d9      	mov	r9, fp
 8006968:	f04f 0c00 	mov.w	ip, #0
 800696c:	9b01      	ldr	r3, [sp, #4]
 800696e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006972:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006976:	9301      	str	r3, [sp, #4]
 8006978:	fa1f f38a 	uxth.w	r3, sl
 800697c:	4619      	mov	r1, r3
 800697e:	b283      	uxth	r3, r0
 8006980:	1acb      	subs	r3, r1, r3
 8006982:	0c00      	lsrs	r0, r0, #16
 8006984:	4463      	add	r3, ip
 8006986:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800698a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800698e:	b29b      	uxth	r3, r3
 8006990:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006994:	4576      	cmp	r6, lr
 8006996:	f849 3b04 	str.w	r3, [r9], #4
 800699a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800699e:	d8e5      	bhi.n	800696c <__mdiff+0x88>
 80069a0:	1b33      	subs	r3, r6, r4
 80069a2:	3b15      	subs	r3, #21
 80069a4:	f023 0303 	bic.w	r3, r3, #3
 80069a8:	3415      	adds	r4, #21
 80069aa:	3304      	adds	r3, #4
 80069ac:	42a6      	cmp	r6, r4
 80069ae:	bf38      	it	cc
 80069b0:	2304      	movcc	r3, #4
 80069b2:	441d      	add	r5, r3
 80069b4:	445b      	add	r3, fp
 80069b6:	461e      	mov	r6, r3
 80069b8:	462c      	mov	r4, r5
 80069ba:	4544      	cmp	r4, r8
 80069bc:	d30e      	bcc.n	80069dc <__mdiff+0xf8>
 80069be:	f108 0103 	add.w	r1, r8, #3
 80069c2:	1b49      	subs	r1, r1, r5
 80069c4:	f021 0103 	bic.w	r1, r1, #3
 80069c8:	3d03      	subs	r5, #3
 80069ca:	45a8      	cmp	r8, r5
 80069cc:	bf38      	it	cc
 80069ce:	2100      	movcc	r1, #0
 80069d0:	440b      	add	r3, r1
 80069d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80069d6:	b191      	cbz	r1, 80069fe <__mdiff+0x11a>
 80069d8:	6117      	str	r7, [r2, #16]
 80069da:	e79d      	b.n	8006918 <__mdiff+0x34>
 80069dc:	f854 1b04 	ldr.w	r1, [r4], #4
 80069e0:	46e6      	mov	lr, ip
 80069e2:	0c08      	lsrs	r0, r1, #16
 80069e4:	fa1c fc81 	uxtah	ip, ip, r1
 80069e8:	4471      	add	r1, lr
 80069ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80069ee:	b289      	uxth	r1, r1
 80069f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80069f4:	f846 1b04 	str.w	r1, [r6], #4
 80069f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80069fc:	e7dd      	b.n	80069ba <__mdiff+0xd6>
 80069fe:	3f01      	subs	r7, #1
 8006a00:	e7e7      	b.n	80069d2 <__mdiff+0xee>
 8006a02:	bf00      	nop
 8006a04:	080072d8 	.word	0x080072d8
 8006a08:	080072e9 	.word	0x080072e9

08006a0c <__d2b>:
 8006a0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a10:	460f      	mov	r7, r1
 8006a12:	2101      	movs	r1, #1
 8006a14:	ec59 8b10 	vmov	r8, r9, d0
 8006a18:	4616      	mov	r6, r2
 8006a1a:	f7ff fccd 	bl	80063b8 <_Balloc>
 8006a1e:	4604      	mov	r4, r0
 8006a20:	b930      	cbnz	r0, 8006a30 <__d2b+0x24>
 8006a22:	4602      	mov	r2, r0
 8006a24:	4b23      	ldr	r3, [pc, #140]	@ (8006ab4 <__d2b+0xa8>)
 8006a26:	4824      	ldr	r0, [pc, #144]	@ (8006ab8 <__d2b+0xac>)
 8006a28:	f240 310f 	movw	r1, #783	@ 0x30f
 8006a2c:	f000 fb0a 	bl	8007044 <__assert_func>
 8006a30:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006a34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a38:	b10d      	cbz	r5, 8006a3e <__d2b+0x32>
 8006a3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a3e:	9301      	str	r3, [sp, #4]
 8006a40:	f1b8 0300 	subs.w	r3, r8, #0
 8006a44:	d023      	beq.n	8006a8e <__d2b+0x82>
 8006a46:	4668      	mov	r0, sp
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	f7ff fd7c 	bl	8006546 <__lo0bits>
 8006a4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006a52:	b1d0      	cbz	r0, 8006a8a <__d2b+0x7e>
 8006a54:	f1c0 0320 	rsb	r3, r0, #32
 8006a58:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5c:	430b      	orrs	r3, r1
 8006a5e:	40c2      	lsrs	r2, r0
 8006a60:	6163      	str	r3, [r4, #20]
 8006a62:	9201      	str	r2, [sp, #4]
 8006a64:	9b01      	ldr	r3, [sp, #4]
 8006a66:	61a3      	str	r3, [r4, #24]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	bf0c      	ite	eq
 8006a6c:	2201      	moveq	r2, #1
 8006a6e:	2202      	movne	r2, #2
 8006a70:	6122      	str	r2, [r4, #16]
 8006a72:	b1a5      	cbz	r5, 8006a9e <__d2b+0x92>
 8006a74:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006a78:	4405      	add	r5, r0
 8006a7a:	603d      	str	r5, [r7, #0]
 8006a7c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006a80:	6030      	str	r0, [r6, #0]
 8006a82:	4620      	mov	r0, r4
 8006a84:	b003      	add	sp, #12
 8006a86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a8a:	6161      	str	r1, [r4, #20]
 8006a8c:	e7ea      	b.n	8006a64 <__d2b+0x58>
 8006a8e:	a801      	add	r0, sp, #4
 8006a90:	f7ff fd59 	bl	8006546 <__lo0bits>
 8006a94:	9b01      	ldr	r3, [sp, #4]
 8006a96:	6163      	str	r3, [r4, #20]
 8006a98:	3020      	adds	r0, #32
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	e7e8      	b.n	8006a70 <__d2b+0x64>
 8006a9e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006aa2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006aa6:	6038      	str	r0, [r7, #0]
 8006aa8:	6918      	ldr	r0, [r3, #16]
 8006aaa:	f7ff fd2d 	bl	8006508 <__hi0bits>
 8006aae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006ab2:	e7e5      	b.n	8006a80 <__d2b+0x74>
 8006ab4:	080072d8 	.word	0x080072d8
 8006ab8:	080072e9 	.word	0x080072e9

08006abc <__sfputc_r>:
 8006abc:	6893      	ldr	r3, [r2, #8]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	b410      	push	{r4}
 8006ac4:	6093      	str	r3, [r2, #8]
 8006ac6:	da08      	bge.n	8006ada <__sfputc_r+0x1e>
 8006ac8:	6994      	ldr	r4, [r2, #24]
 8006aca:	42a3      	cmp	r3, r4
 8006acc:	db01      	blt.n	8006ad2 <__sfputc_r+0x16>
 8006ace:	290a      	cmp	r1, #10
 8006ad0:	d103      	bne.n	8006ada <__sfputc_r+0x1e>
 8006ad2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ad6:	f7fe bc0e 	b.w	80052f6 <__swbuf_r>
 8006ada:	6813      	ldr	r3, [r2, #0]
 8006adc:	1c58      	adds	r0, r3, #1
 8006ade:	6010      	str	r0, [r2, #0]
 8006ae0:	7019      	strb	r1, [r3, #0]
 8006ae2:	4608      	mov	r0, r1
 8006ae4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <__sfputs_r>:
 8006aea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aec:	4606      	mov	r6, r0
 8006aee:	460f      	mov	r7, r1
 8006af0:	4614      	mov	r4, r2
 8006af2:	18d5      	adds	r5, r2, r3
 8006af4:	42ac      	cmp	r4, r5
 8006af6:	d101      	bne.n	8006afc <__sfputs_r+0x12>
 8006af8:	2000      	movs	r0, #0
 8006afa:	e007      	b.n	8006b0c <__sfputs_r+0x22>
 8006afc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b00:	463a      	mov	r2, r7
 8006b02:	4630      	mov	r0, r6
 8006b04:	f7ff ffda 	bl	8006abc <__sfputc_r>
 8006b08:	1c43      	adds	r3, r0, #1
 8006b0a:	d1f3      	bne.n	8006af4 <__sfputs_r+0xa>
 8006b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b10 <_vfiprintf_r>:
 8006b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b14:	460d      	mov	r5, r1
 8006b16:	b09d      	sub	sp, #116	@ 0x74
 8006b18:	4614      	mov	r4, r2
 8006b1a:	4698      	mov	r8, r3
 8006b1c:	4606      	mov	r6, r0
 8006b1e:	b118      	cbz	r0, 8006b28 <_vfiprintf_r+0x18>
 8006b20:	6a03      	ldr	r3, [r0, #32]
 8006b22:	b90b      	cbnz	r3, 8006b28 <_vfiprintf_r+0x18>
 8006b24:	f7fe faf6 	bl	8005114 <__sinit>
 8006b28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b2a:	07d9      	lsls	r1, r3, #31
 8006b2c:	d405      	bmi.n	8006b3a <_vfiprintf_r+0x2a>
 8006b2e:	89ab      	ldrh	r3, [r5, #12]
 8006b30:	059a      	lsls	r2, r3, #22
 8006b32:	d402      	bmi.n	8006b3a <_vfiprintf_r+0x2a>
 8006b34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b36:	f7fe fcf0 	bl	800551a <__retarget_lock_acquire_recursive>
 8006b3a:	89ab      	ldrh	r3, [r5, #12]
 8006b3c:	071b      	lsls	r3, r3, #28
 8006b3e:	d501      	bpl.n	8006b44 <_vfiprintf_r+0x34>
 8006b40:	692b      	ldr	r3, [r5, #16]
 8006b42:	b99b      	cbnz	r3, 8006b6c <_vfiprintf_r+0x5c>
 8006b44:	4629      	mov	r1, r5
 8006b46:	4630      	mov	r0, r6
 8006b48:	f7fe fc14 	bl	8005374 <__swsetup_r>
 8006b4c:	b170      	cbz	r0, 8006b6c <_vfiprintf_r+0x5c>
 8006b4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b50:	07dc      	lsls	r4, r3, #31
 8006b52:	d504      	bpl.n	8006b5e <_vfiprintf_r+0x4e>
 8006b54:	f04f 30ff 	mov.w	r0, #4294967295
 8006b58:	b01d      	add	sp, #116	@ 0x74
 8006b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b5e:	89ab      	ldrh	r3, [r5, #12]
 8006b60:	0598      	lsls	r0, r3, #22
 8006b62:	d4f7      	bmi.n	8006b54 <_vfiprintf_r+0x44>
 8006b64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b66:	f7fe fcd9 	bl	800551c <__retarget_lock_release_recursive>
 8006b6a:	e7f3      	b.n	8006b54 <_vfiprintf_r+0x44>
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b70:	2320      	movs	r3, #32
 8006b72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b76:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b7a:	2330      	movs	r3, #48	@ 0x30
 8006b7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006d2c <_vfiprintf_r+0x21c>
 8006b80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b84:	f04f 0901 	mov.w	r9, #1
 8006b88:	4623      	mov	r3, r4
 8006b8a:	469a      	mov	sl, r3
 8006b8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b90:	b10a      	cbz	r2, 8006b96 <_vfiprintf_r+0x86>
 8006b92:	2a25      	cmp	r2, #37	@ 0x25
 8006b94:	d1f9      	bne.n	8006b8a <_vfiprintf_r+0x7a>
 8006b96:	ebba 0b04 	subs.w	fp, sl, r4
 8006b9a:	d00b      	beq.n	8006bb4 <_vfiprintf_r+0xa4>
 8006b9c:	465b      	mov	r3, fp
 8006b9e:	4622      	mov	r2, r4
 8006ba0:	4629      	mov	r1, r5
 8006ba2:	4630      	mov	r0, r6
 8006ba4:	f7ff ffa1 	bl	8006aea <__sfputs_r>
 8006ba8:	3001      	adds	r0, #1
 8006baa:	f000 80a7 	beq.w	8006cfc <_vfiprintf_r+0x1ec>
 8006bae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bb0:	445a      	add	r2, fp
 8006bb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8006bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f000 809f 	beq.w	8006cfc <_vfiprintf_r+0x1ec>
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8006bc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bc8:	f10a 0a01 	add.w	sl, sl, #1
 8006bcc:	9304      	str	r3, [sp, #16]
 8006bce:	9307      	str	r3, [sp, #28]
 8006bd0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006bd4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006bd6:	4654      	mov	r4, sl
 8006bd8:	2205      	movs	r2, #5
 8006bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bde:	4853      	ldr	r0, [pc, #332]	@ (8006d2c <_vfiprintf_r+0x21c>)
 8006be0:	f7f9 fafe 	bl	80001e0 <memchr>
 8006be4:	9a04      	ldr	r2, [sp, #16]
 8006be6:	b9d8      	cbnz	r0, 8006c20 <_vfiprintf_r+0x110>
 8006be8:	06d1      	lsls	r1, r2, #27
 8006bea:	bf44      	itt	mi
 8006bec:	2320      	movmi	r3, #32
 8006bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bf2:	0713      	lsls	r3, r2, #28
 8006bf4:	bf44      	itt	mi
 8006bf6:	232b      	movmi	r3, #43	@ 0x2b
 8006bf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8006c00:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c02:	d015      	beq.n	8006c30 <_vfiprintf_r+0x120>
 8006c04:	9a07      	ldr	r2, [sp, #28]
 8006c06:	4654      	mov	r4, sl
 8006c08:	2000      	movs	r0, #0
 8006c0a:	f04f 0c0a 	mov.w	ip, #10
 8006c0e:	4621      	mov	r1, r4
 8006c10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c14:	3b30      	subs	r3, #48	@ 0x30
 8006c16:	2b09      	cmp	r3, #9
 8006c18:	d94b      	bls.n	8006cb2 <_vfiprintf_r+0x1a2>
 8006c1a:	b1b0      	cbz	r0, 8006c4a <_vfiprintf_r+0x13a>
 8006c1c:	9207      	str	r2, [sp, #28]
 8006c1e:	e014      	b.n	8006c4a <_vfiprintf_r+0x13a>
 8006c20:	eba0 0308 	sub.w	r3, r0, r8
 8006c24:	fa09 f303 	lsl.w	r3, r9, r3
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	9304      	str	r3, [sp, #16]
 8006c2c:	46a2      	mov	sl, r4
 8006c2e:	e7d2      	b.n	8006bd6 <_vfiprintf_r+0xc6>
 8006c30:	9b03      	ldr	r3, [sp, #12]
 8006c32:	1d19      	adds	r1, r3, #4
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	9103      	str	r1, [sp, #12]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	bfbb      	ittet	lt
 8006c3c:	425b      	neglt	r3, r3
 8006c3e:	f042 0202 	orrlt.w	r2, r2, #2
 8006c42:	9307      	strge	r3, [sp, #28]
 8006c44:	9307      	strlt	r3, [sp, #28]
 8006c46:	bfb8      	it	lt
 8006c48:	9204      	strlt	r2, [sp, #16]
 8006c4a:	7823      	ldrb	r3, [r4, #0]
 8006c4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c4e:	d10a      	bne.n	8006c66 <_vfiprintf_r+0x156>
 8006c50:	7863      	ldrb	r3, [r4, #1]
 8006c52:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c54:	d132      	bne.n	8006cbc <_vfiprintf_r+0x1ac>
 8006c56:	9b03      	ldr	r3, [sp, #12]
 8006c58:	1d1a      	adds	r2, r3, #4
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	9203      	str	r2, [sp, #12]
 8006c5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c62:	3402      	adds	r4, #2
 8006c64:	9305      	str	r3, [sp, #20]
 8006c66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006d3c <_vfiprintf_r+0x22c>
 8006c6a:	7821      	ldrb	r1, [r4, #0]
 8006c6c:	2203      	movs	r2, #3
 8006c6e:	4650      	mov	r0, sl
 8006c70:	f7f9 fab6 	bl	80001e0 <memchr>
 8006c74:	b138      	cbz	r0, 8006c86 <_vfiprintf_r+0x176>
 8006c76:	9b04      	ldr	r3, [sp, #16]
 8006c78:	eba0 000a 	sub.w	r0, r0, sl
 8006c7c:	2240      	movs	r2, #64	@ 0x40
 8006c7e:	4082      	lsls	r2, r0
 8006c80:	4313      	orrs	r3, r2
 8006c82:	3401      	adds	r4, #1
 8006c84:	9304      	str	r3, [sp, #16]
 8006c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c8a:	4829      	ldr	r0, [pc, #164]	@ (8006d30 <_vfiprintf_r+0x220>)
 8006c8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c90:	2206      	movs	r2, #6
 8006c92:	f7f9 faa5 	bl	80001e0 <memchr>
 8006c96:	2800      	cmp	r0, #0
 8006c98:	d03f      	beq.n	8006d1a <_vfiprintf_r+0x20a>
 8006c9a:	4b26      	ldr	r3, [pc, #152]	@ (8006d34 <_vfiprintf_r+0x224>)
 8006c9c:	bb1b      	cbnz	r3, 8006ce6 <_vfiprintf_r+0x1d6>
 8006c9e:	9b03      	ldr	r3, [sp, #12]
 8006ca0:	3307      	adds	r3, #7
 8006ca2:	f023 0307 	bic.w	r3, r3, #7
 8006ca6:	3308      	adds	r3, #8
 8006ca8:	9303      	str	r3, [sp, #12]
 8006caa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cac:	443b      	add	r3, r7
 8006cae:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cb0:	e76a      	b.n	8006b88 <_vfiprintf_r+0x78>
 8006cb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cb6:	460c      	mov	r4, r1
 8006cb8:	2001      	movs	r0, #1
 8006cba:	e7a8      	b.n	8006c0e <_vfiprintf_r+0xfe>
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	3401      	adds	r4, #1
 8006cc0:	9305      	str	r3, [sp, #20]
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	f04f 0c0a 	mov.w	ip, #10
 8006cc8:	4620      	mov	r0, r4
 8006cca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cce:	3a30      	subs	r2, #48	@ 0x30
 8006cd0:	2a09      	cmp	r2, #9
 8006cd2:	d903      	bls.n	8006cdc <_vfiprintf_r+0x1cc>
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d0c6      	beq.n	8006c66 <_vfiprintf_r+0x156>
 8006cd8:	9105      	str	r1, [sp, #20]
 8006cda:	e7c4      	b.n	8006c66 <_vfiprintf_r+0x156>
 8006cdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ce0:	4604      	mov	r4, r0
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e7f0      	b.n	8006cc8 <_vfiprintf_r+0x1b8>
 8006ce6:	ab03      	add	r3, sp, #12
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	462a      	mov	r2, r5
 8006cec:	4b12      	ldr	r3, [pc, #72]	@ (8006d38 <_vfiprintf_r+0x228>)
 8006cee:	a904      	add	r1, sp, #16
 8006cf0:	4630      	mov	r0, r6
 8006cf2:	f7fd fdcb 	bl	800488c <_printf_float>
 8006cf6:	4607      	mov	r7, r0
 8006cf8:	1c78      	adds	r0, r7, #1
 8006cfa:	d1d6      	bne.n	8006caa <_vfiprintf_r+0x19a>
 8006cfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cfe:	07d9      	lsls	r1, r3, #31
 8006d00:	d405      	bmi.n	8006d0e <_vfiprintf_r+0x1fe>
 8006d02:	89ab      	ldrh	r3, [r5, #12]
 8006d04:	059a      	lsls	r2, r3, #22
 8006d06:	d402      	bmi.n	8006d0e <_vfiprintf_r+0x1fe>
 8006d08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d0a:	f7fe fc07 	bl	800551c <__retarget_lock_release_recursive>
 8006d0e:	89ab      	ldrh	r3, [r5, #12]
 8006d10:	065b      	lsls	r3, r3, #25
 8006d12:	f53f af1f 	bmi.w	8006b54 <_vfiprintf_r+0x44>
 8006d16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d18:	e71e      	b.n	8006b58 <_vfiprintf_r+0x48>
 8006d1a:	ab03      	add	r3, sp, #12
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	462a      	mov	r2, r5
 8006d20:	4b05      	ldr	r3, [pc, #20]	@ (8006d38 <_vfiprintf_r+0x228>)
 8006d22:	a904      	add	r1, sp, #16
 8006d24:	4630      	mov	r0, r6
 8006d26:	f7fe f849 	bl	8004dbc <_printf_i>
 8006d2a:	e7e4      	b.n	8006cf6 <_vfiprintf_r+0x1e6>
 8006d2c:	08007440 	.word	0x08007440
 8006d30:	0800744a 	.word	0x0800744a
 8006d34:	0800488d 	.word	0x0800488d
 8006d38:	08006aeb 	.word	0x08006aeb
 8006d3c:	08007446 	.word	0x08007446

08006d40 <__sflush_r>:
 8006d40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d48:	0716      	lsls	r6, r2, #28
 8006d4a:	4605      	mov	r5, r0
 8006d4c:	460c      	mov	r4, r1
 8006d4e:	d454      	bmi.n	8006dfa <__sflush_r+0xba>
 8006d50:	684b      	ldr	r3, [r1, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	dc02      	bgt.n	8006d5c <__sflush_r+0x1c>
 8006d56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	dd48      	ble.n	8006dee <__sflush_r+0xae>
 8006d5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d5e:	2e00      	cmp	r6, #0
 8006d60:	d045      	beq.n	8006dee <__sflush_r+0xae>
 8006d62:	2300      	movs	r3, #0
 8006d64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006d68:	682f      	ldr	r7, [r5, #0]
 8006d6a:	6a21      	ldr	r1, [r4, #32]
 8006d6c:	602b      	str	r3, [r5, #0]
 8006d6e:	d030      	beq.n	8006dd2 <__sflush_r+0x92>
 8006d70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006d72:	89a3      	ldrh	r3, [r4, #12]
 8006d74:	0759      	lsls	r1, r3, #29
 8006d76:	d505      	bpl.n	8006d84 <__sflush_r+0x44>
 8006d78:	6863      	ldr	r3, [r4, #4]
 8006d7a:	1ad2      	subs	r2, r2, r3
 8006d7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006d7e:	b10b      	cbz	r3, 8006d84 <__sflush_r+0x44>
 8006d80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006d82:	1ad2      	subs	r2, r2, r3
 8006d84:	2300      	movs	r3, #0
 8006d86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d88:	6a21      	ldr	r1, [r4, #32]
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	47b0      	blx	r6
 8006d8e:	1c43      	adds	r3, r0, #1
 8006d90:	89a3      	ldrh	r3, [r4, #12]
 8006d92:	d106      	bne.n	8006da2 <__sflush_r+0x62>
 8006d94:	6829      	ldr	r1, [r5, #0]
 8006d96:	291d      	cmp	r1, #29
 8006d98:	d82b      	bhi.n	8006df2 <__sflush_r+0xb2>
 8006d9a:	4a2a      	ldr	r2, [pc, #168]	@ (8006e44 <__sflush_r+0x104>)
 8006d9c:	410a      	asrs	r2, r1
 8006d9e:	07d6      	lsls	r6, r2, #31
 8006da0:	d427      	bmi.n	8006df2 <__sflush_r+0xb2>
 8006da2:	2200      	movs	r2, #0
 8006da4:	6062      	str	r2, [r4, #4]
 8006da6:	04d9      	lsls	r1, r3, #19
 8006da8:	6922      	ldr	r2, [r4, #16]
 8006daa:	6022      	str	r2, [r4, #0]
 8006dac:	d504      	bpl.n	8006db8 <__sflush_r+0x78>
 8006dae:	1c42      	adds	r2, r0, #1
 8006db0:	d101      	bne.n	8006db6 <__sflush_r+0x76>
 8006db2:	682b      	ldr	r3, [r5, #0]
 8006db4:	b903      	cbnz	r3, 8006db8 <__sflush_r+0x78>
 8006db6:	6560      	str	r0, [r4, #84]	@ 0x54
 8006db8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006dba:	602f      	str	r7, [r5, #0]
 8006dbc:	b1b9      	cbz	r1, 8006dee <__sflush_r+0xae>
 8006dbe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006dc2:	4299      	cmp	r1, r3
 8006dc4:	d002      	beq.n	8006dcc <__sflush_r+0x8c>
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	f7ff f9f6 	bl	80061b8 <_free_r>
 8006dcc:	2300      	movs	r3, #0
 8006dce:	6363      	str	r3, [r4, #52]	@ 0x34
 8006dd0:	e00d      	b.n	8006dee <__sflush_r+0xae>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	4628      	mov	r0, r5
 8006dd6:	47b0      	blx	r6
 8006dd8:	4602      	mov	r2, r0
 8006dda:	1c50      	adds	r0, r2, #1
 8006ddc:	d1c9      	bne.n	8006d72 <__sflush_r+0x32>
 8006dde:	682b      	ldr	r3, [r5, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d0c6      	beq.n	8006d72 <__sflush_r+0x32>
 8006de4:	2b1d      	cmp	r3, #29
 8006de6:	d001      	beq.n	8006dec <__sflush_r+0xac>
 8006de8:	2b16      	cmp	r3, #22
 8006dea:	d11e      	bne.n	8006e2a <__sflush_r+0xea>
 8006dec:	602f      	str	r7, [r5, #0]
 8006dee:	2000      	movs	r0, #0
 8006df0:	e022      	b.n	8006e38 <__sflush_r+0xf8>
 8006df2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006df6:	b21b      	sxth	r3, r3
 8006df8:	e01b      	b.n	8006e32 <__sflush_r+0xf2>
 8006dfa:	690f      	ldr	r7, [r1, #16]
 8006dfc:	2f00      	cmp	r7, #0
 8006dfe:	d0f6      	beq.n	8006dee <__sflush_r+0xae>
 8006e00:	0793      	lsls	r3, r2, #30
 8006e02:	680e      	ldr	r6, [r1, #0]
 8006e04:	bf08      	it	eq
 8006e06:	694b      	ldreq	r3, [r1, #20]
 8006e08:	600f      	str	r7, [r1, #0]
 8006e0a:	bf18      	it	ne
 8006e0c:	2300      	movne	r3, #0
 8006e0e:	eba6 0807 	sub.w	r8, r6, r7
 8006e12:	608b      	str	r3, [r1, #8]
 8006e14:	f1b8 0f00 	cmp.w	r8, #0
 8006e18:	dde9      	ble.n	8006dee <__sflush_r+0xae>
 8006e1a:	6a21      	ldr	r1, [r4, #32]
 8006e1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006e1e:	4643      	mov	r3, r8
 8006e20:	463a      	mov	r2, r7
 8006e22:	4628      	mov	r0, r5
 8006e24:	47b0      	blx	r6
 8006e26:	2800      	cmp	r0, #0
 8006e28:	dc08      	bgt.n	8006e3c <__sflush_r+0xfc>
 8006e2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e32:	81a3      	strh	r3, [r4, #12]
 8006e34:	f04f 30ff 	mov.w	r0, #4294967295
 8006e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e3c:	4407      	add	r7, r0
 8006e3e:	eba8 0800 	sub.w	r8, r8, r0
 8006e42:	e7e7      	b.n	8006e14 <__sflush_r+0xd4>
 8006e44:	dfbffffe 	.word	0xdfbffffe

08006e48 <_fflush_r>:
 8006e48:	b538      	push	{r3, r4, r5, lr}
 8006e4a:	690b      	ldr	r3, [r1, #16]
 8006e4c:	4605      	mov	r5, r0
 8006e4e:	460c      	mov	r4, r1
 8006e50:	b913      	cbnz	r3, 8006e58 <_fflush_r+0x10>
 8006e52:	2500      	movs	r5, #0
 8006e54:	4628      	mov	r0, r5
 8006e56:	bd38      	pop	{r3, r4, r5, pc}
 8006e58:	b118      	cbz	r0, 8006e62 <_fflush_r+0x1a>
 8006e5a:	6a03      	ldr	r3, [r0, #32]
 8006e5c:	b90b      	cbnz	r3, 8006e62 <_fflush_r+0x1a>
 8006e5e:	f7fe f959 	bl	8005114 <__sinit>
 8006e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d0f3      	beq.n	8006e52 <_fflush_r+0xa>
 8006e6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006e6c:	07d0      	lsls	r0, r2, #31
 8006e6e:	d404      	bmi.n	8006e7a <_fflush_r+0x32>
 8006e70:	0599      	lsls	r1, r3, #22
 8006e72:	d402      	bmi.n	8006e7a <_fflush_r+0x32>
 8006e74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e76:	f7fe fb50 	bl	800551a <__retarget_lock_acquire_recursive>
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	4621      	mov	r1, r4
 8006e7e:	f7ff ff5f 	bl	8006d40 <__sflush_r>
 8006e82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e84:	07da      	lsls	r2, r3, #31
 8006e86:	4605      	mov	r5, r0
 8006e88:	d4e4      	bmi.n	8006e54 <_fflush_r+0xc>
 8006e8a:	89a3      	ldrh	r3, [r4, #12]
 8006e8c:	059b      	lsls	r3, r3, #22
 8006e8e:	d4e1      	bmi.n	8006e54 <_fflush_r+0xc>
 8006e90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e92:	f7fe fb43 	bl	800551c <__retarget_lock_release_recursive>
 8006e96:	e7dd      	b.n	8006e54 <_fflush_r+0xc>

08006e98 <__swhatbuf_r>:
 8006e98:	b570      	push	{r4, r5, r6, lr}
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ea0:	2900      	cmp	r1, #0
 8006ea2:	b096      	sub	sp, #88	@ 0x58
 8006ea4:	4615      	mov	r5, r2
 8006ea6:	461e      	mov	r6, r3
 8006ea8:	da0d      	bge.n	8006ec6 <__swhatbuf_r+0x2e>
 8006eaa:	89a3      	ldrh	r3, [r4, #12]
 8006eac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006eb0:	f04f 0100 	mov.w	r1, #0
 8006eb4:	bf14      	ite	ne
 8006eb6:	2340      	movne	r3, #64	@ 0x40
 8006eb8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006ebc:	2000      	movs	r0, #0
 8006ebe:	6031      	str	r1, [r6, #0]
 8006ec0:	602b      	str	r3, [r5, #0]
 8006ec2:	b016      	add	sp, #88	@ 0x58
 8006ec4:	bd70      	pop	{r4, r5, r6, pc}
 8006ec6:	466a      	mov	r2, sp
 8006ec8:	f000 f87c 	bl	8006fc4 <_fstat_r>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	dbec      	blt.n	8006eaa <__swhatbuf_r+0x12>
 8006ed0:	9901      	ldr	r1, [sp, #4]
 8006ed2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006ed6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006eda:	4259      	negs	r1, r3
 8006edc:	4159      	adcs	r1, r3
 8006ede:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ee2:	e7eb      	b.n	8006ebc <__swhatbuf_r+0x24>

08006ee4 <__smakebuf_r>:
 8006ee4:	898b      	ldrh	r3, [r1, #12]
 8006ee6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ee8:	079d      	lsls	r5, r3, #30
 8006eea:	4606      	mov	r6, r0
 8006eec:	460c      	mov	r4, r1
 8006eee:	d507      	bpl.n	8006f00 <__smakebuf_r+0x1c>
 8006ef0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006ef4:	6023      	str	r3, [r4, #0]
 8006ef6:	6123      	str	r3, [r4, #16]
 8006ef8:	2301      	movs	r3, #1
 8006efa:	6163      	str	r3, [r4, #20]
 8006efc:	b003      	add	sp, #12
 8006efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f00:	ab01      	add	r3, sp, #4
 8006f02:	466a      	mov	r2, sp
 8006f04:	f7ff ffc8 	bl	8006e98 <__swhatbuf_r>
 8006f08:	9f00      	ldr	r7, [sp, #0]
 8006f0a:	4605      	mov	r5, r0
 8006f0c:	4639      	mov	r1, r7
 8006f0e:	4630      	mov	r0, r6
 8006f10:	f7ff f9c6 	bl	80062a0 <_malloc_r>
 8006f14:	b948      	cbnz	r0, 8006f2a <__smakebuf_r+0x46>
 8006f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f1a:	059a      	lsls	r2, r3, #22
 8006f1c:	d4ee      	bmi.n	8006efc <__smakebuf_r+0x18>
 8006f1e:	f023 0303 	bic.w	r3, r3, #3
 8006f22:	f043 0302 	orr.w	r3, r3, #2
 8006f26:	81a3      	strh	r3, [r4, #12]
 8006f28:	e7e2      	b.n	8006ef0 <__smakebuf_r+0xc>
 8006f2a:	89a3      	ldrh	r3, [r4, #12]
 8006f2c:	6020      	str	r0, [r4, #0]
 8006f2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f32:	81a3      	strh	r3, [r4, #12]
 8006f34:	9b01      	ldr	r3, [sp, #4]
 8006f36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006f3a:	b15b      	cbz	r3, 8006f54 <__smakebuf_r+0x70>
 8006f3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f40:	4630      	mov	r0, r6
 8006f42:	f000 f851 	bl	8006fe8 <_isatty_r>
 8006f46:	b128      	cbz	r0, 8006f54 <__smakebuf_r+0x70>
 8006f48:	89a3      	ldrh	r3, [r4, #12]
 8006f4a:	f023 0303 	bic.w	r3, r3, #3
 8006f4e:	f043 0301 	orr.w	r3, r3, #1
 8006f52:	81a3      	strh	r3, [r4, #12]
 8006f54:	89a3      	ldrh	r3, [r4, #12]
 8006f56:	431d      	orrs	r5, r3
 8006f58:	81a5      	strh	r5, [r4, #12]
 8006f5a:	e7cf      	b.n	8006efc <__smakebuf_r+0x18>

08006f5c <_putc_r>:
 8006f5c:	b570      	push	{r4, r5, r6, lr}
 8006f5e:	460d      	mov	r5, r1
 8006f60:	4614      	mov	r4, r2
 8006f62:	4606      	mov	r6, r0
 8006f64:	b118      	cbz	r0, 8006f6e <_putc_r+0x12>
 8006f66:	6a03      	ldr	r3, [r0, #32]
 8006f68:	b90b      	cbnz	r3, 8006f6e <_putc_r+0x12>
 8006f6a:	f7fe f8d3 	bl	8005114 <__sinit>
 8006f6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f70:	07d8      	lsls	r0, r3, #31
 8006f72:	d405      	bmi.n	8006f80 <_putc_r+0x24>
 8006f74:	89a3      	ldrh	r3, [r4, #12]
 8006f76:	0599      	lsls	r1, r3, #22
 8006f78:	d402      	bmi.n	8006f80 <_putc_r+0x24>
 8006f7a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f7c:	f7fe facd 	bl	800551a <__retarget_lock_acquire_recursive>
 8006f80:	68a3      	ldr	r3, [r4, #8]
 8006f82:	3b01      	subs	r3, #1
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	60a3      	str	r3, [r4, #8]
 8006f88:	da05      	bge.n	8006f96 <_putc_r+0x3a>
 8006f8a:	69a2      	ldr	r2, [r4, #24]
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	db12      	blt.n	8006fb6 <_putc_r+0x5a>
 8006f90:	b2eb      	uxtb	r3, r5
 8006f92:	2b0a      	cmp	r3, #10
 8006f94:	d00f      	beq.n	8006fb6 <_putc_r+0x5a>
 8006f96:	6823      	ldr	r3, [r4, #0]
 8006f98:	1c5a      	adds	r2, r3, #1
 8006f9a:	6022      	str	r2, [r4, #0]
 8006f9c:	701d      	strb	r5, [r3, #0]
 8006f9e:	b2ed      	uxtb	r5, r5
 8006fa0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006fa2:	07da      	lsls	r2, r3, #31
 8006fa4:	d405      	bmi.n	8006fb2 <_putc_r+0x56>
 8006fa6:	89a3      	ldrh	r3, [r4, #12]
 8006fa8:	059b      	lsls	r3, r3, #22
 8006faa:	d402      	bmi.n	8006fb2 <_putc_r+0x56>
 8006fac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fae:	f7fe fab5 	bl	800551c <__retarget_lock_release_recursive>
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	bd70      	pop	{r4, r5, r6, pc}
 8006fb6:	4629      	mov	r1, r5
 8006fb8:	4622      	mov	r2, r4
 8006fba:	4630      	mov	r0, r6
 8006fbc:	f7fe f99b 	bl	80052f6 <__swbuf_r>
 8006fc0:	4605      	mov	r5, r0
 8006fc2:	e7ed      	b.n	8006fa0 <_putc_r+0x44>

08006fc4 <_fstat_r>:
 8006fc4:	b538      	push	{r3, r4, r5, lr}
 8006fc6:	4d07      	ldr	r5, [pc, #28]	@ (8006fe4 <_fstat_r+0x20>)
 8006fc8:	2300      	movs	r3, #0
 8006fca:	4604      	mov	r4, r0
 8006fcc:	4608      	mov	r0, r1
 8006fce:	4611      	mov	r1, r2
 8006fd0:	602b      	str	r3, [r5, #0]
 8006fd2:	f7fa fe70 	bl	8001cb6 <_fstat>
 8006fd6:	1c43      	adds	r3, r0, #1
 8006fd8:	d102      	bne.n	8006fe0 <_fstat_r+0x1c>
 8006fda:	682b      	ldr	r3, [r5, #0]
 8006fdc:	b103      	cbz	r3, 8006fe0 <_fstat_r+0x1c>
 8006fde:	6023      	str	r3, [r4, #0]
 8006fe0:	bd38      	pop	{r3, r4, r5, pc}
 8006fe2:	bf00      	nop
 8006fe4:	200004c8 	.word	0x200004c8

08006fe8 <_isatty_r>:
 8006fe8:	b538      	push	{r3, r4, r5, lr}
 8006fea:	4d06      	ldr	r5, [pc, #24]	@ (8007004 <_isatty_r+0x1c>)
 8006fec:	2300      	movs	r3, #0
 8006fee:	4604      	mov	r4, r0
 8006ff0:	4608      	mov	r0, r1
 8006ff2:	602b      	str	r3, [r5, #0]
 8006ff4:	f7fa fe6f 	bl	8001cd6 <_isatty>
 8006ff8:	1c43      	adds	r3, r0, #1
 8006ffa:	d102      	bne.n	8007002 <_isatty_r+0x1a>
 8006ffc:	682b      	ldr	r3, [r5, #0]
 8006ffe:	b103      	cbz	r3, 8007002 <_isatty_r+0x1a>
 8007000:	6023      	str	r3, [r4, #0]
 8007002:	bd38      	pop	{r3, r4, r5, pc}
 8007004:	200004c8 	.word	0x200004c8

08007008 <_sbrk_r>:
 8007008:	b538      	push	{r3, r4, r5, lr}
 800700a:	4d06      	ldr	r5, [pc, #24]	@ (8007024 <_sbrk_r+0x1c>)
 800700c:	2300      	movs	r3, #0
 800700e:	4604      	mov	r4, r0
 8007010:	4608      	mov	r0, r1
 8007012:	602b      	str	r3, [r5, #0]
 8007014:	f7fa fe78 	bl	8001d08 <_sbrk>
 8007018:	1c43      	adds	r3, r0, #1
 800701a:	d102      	bne.n	8007022 <_sbrk_r+0x1a>
 800701c:	682b      	ldr	r3, [r5, #0]
 800701e:	b103      	cbz	r3, 8007022 <_sbrk_r+0x1a>
 8007020:	6023      	str	r3, [r4, #0]
 8007022:	bd38      	pop	{r3, r4, r5, pc}
 8007024:	200004c8 	.word	0x200004c8

08007028 <memcpy>:
 8007028:	440a      	add	r2, r1
 800702a:	4291      	cmp	r1, r2
 800702c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007030:	d100      	bne.n	8007034 <memcpy+0xc>
 8007032:	4770      	bx	lr
 8007034:	b510      	push	{r4, lr}
 8007036:	f811 4b01 	ldrb.w	r4, [r1], #1
 800703a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800703e:	4291      	cmp	r1, r2
 8007040:	d1f9      	bne.n	8007036 <memcpy+0xe>
 8007042:	bd10      	pop	{r4, pc}

08007044 <__assert_func>:
 8007044:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007046:	4614      	mov	r4, r2
 8007048:	461a      	mov	r2, r3
 800704a:	4b09      	ldr	r3, [pc, #36]	@ (8007070 <__assert_func+0x2c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4605      	mov	r5, r0
 8007050:	68d8      	ldr	r0, [r3, #12]
 8007052:	b954      	cbnz	r4, 800706a <__assert_func+0x26>
 8007054:	4b07      	ldr	r3, [pc, #28]	@ (8007074 <__assert_func+0x30>)
 8007056:	461c      	mov	r4, r3
 8007058:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800705c:	9100      	str	r1, [sp, #0]
 800705e:	462b      	mov	r3, r5
 8007060:	4905      	ldr	r1, [pc, #20]	@ (8007078 <__assert_func+0x34>)
 8007062:	f000 f841 	bl	80070e8 <fiprintf>
 8007066:	f000 f851 	bl	800710c <abort>
 800706a:	4b04      	ldr	r3, [pc, #16]	@ (800707c <__assert_func+0x38>)
 800706c:	e7f4      	b.n	8007058 <__assert_func+0x14>
 800706e:	bf00      	nop
 8007070:	20000034 	.word	0x20000034
 8007074:	08007496 	.word	0x08007496
 8007078:	08007468 	.word	0x08007468
 800707c:	0800745b 	.word	0x0800745b

08007080 <_calloc_r>:
 8007080:	b570      	push	{r4, r5, r6, lr}
 8007082:	fba1 5402 	umull	r5, r4, r1, r2
 8007086:	b93c      	cbnz	r4, 8007098 <_calloc_r+0x18>
 8007088:	4629      	mov	r1, r5
 800708a:	f7ff f909 	bl	80062a0 <_malloc_r>
 800708e:	4606      	mov	r6, r0
 8007090:	b928      	cbnz	r0, 800709e <_calloc_r+0x1e>
 8007092:	2600      	movs	r6, #0
 8007094:	4630      	mov	r0, r6
 8007096:	bd70      	pop	{r4, r5, r6, pc}
 8007098:	220c      	movs	r2, #12
 800709a:	6002      	str	r2, [r0, #0]
 800709c:	e7f9      	b.n	8007092 <_calloc_r+0x12>
 800709e:	462a      	mov	r2, r5
 80070a0:	4621      	mov	r1, r4
 80070a2:	f7fe f9bd 	bl	8005420 <memset>
 80070a6:	e7f5      	b.n	8007094 <_calloc_r+0x14>

080070a8 <__ascii_mbtowc>:
 80070a8:	b082      	sub	sp, #8
 80070aa:	b901      	cbnz	r1, 80070ae <__ascii_mbtowc+0x6>
 80070ac:	a901      	add	r1, sp, #4
 80070ae:	b142      	cbz	r2, 80070c2 <__ascii_mbtowc+0x1a>
 80070b0:	b14b      	cbz	r3, 80070c6 <__ascii_mbtowc+0x1e>
 80070b2:	7813      	ldrb	r3, [r2, #0]
 80070b4:	600b      	str	r3, [r1, #0]
 80070b6:	7812      	ldrb	r2, [r2, #0]
 80070b8:	1e10      	subs	r0, r2, #0
 80070ba:	bf18      	it	ne
 80070bc:	2001      	movne	r0, #1
 80070be:	b002      	add	sp, #8
 80070c0:	4770      	bx	lr
 80070c2:	4610      	mov	r0, r2
 80070c4:	e7fb      	b.n	80070be <__ascii_mbtowc+0x16>
 80070c6:	f06f 0001 	mvn.w	r0, #1
 80070ca:	e7f8      	b.n	80070be <__ascii_mbtowc+0x16>

080070cc <__ascii_wctomb>:
 80070cc:	4603      	mov	r3, r0
 80070ce:	4608      	mov	r0, r1
 80070d0:	b141      	cbz	r1, 80070e4 <__ascii_wctomb+0x18>
 80070d2:	2aff      	cmp	r2, #255	@ 0xff
 80070d4:	d904      	bls.n	80070e0 <__ascii_wctomb+0x14>
 80070d6:	228a      	movs	r2, #138	@ 0x8a
 80070d8:	601a      	str	r2, [r3, #0]
 80070da:	f04f 30ff 	mov.w	r0, #4294967295
 80070de:	4770      	bx	lr
 80070e0:	700a      	strb	r2, [r1, #0]
 80070e2:	2001      	movs	r0, #1
 80070e4:	4770      	bx	lr
	...

080070e8 <fiprintf>:
 80070e8:	b40e      	push	{r1, r2, r3}
 80070ea:	b503      	push	{r0, r1, lr}
 80070ec:	4601      	mov	r1, r0
 80070ee:	ab03      	add	r3, sp, #12
 80070f0:	4805      	ldr	r0, [pc, #20]	@ (8007108 <fiprintf+0x20>)
 80070f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80070f6:	6800      	ldr	r0, [r0, #0]
 80070f8:	9301      	str	r3, [sp, #4]
 80070fa:	f7ff fd09 	bl	8006b10 <_vfiprintf_r>
 80070fe:	b002      	add	sp, #8
 8007100:	f85d eb04 	ldr.w	lr, [sp], #4
 8007104:	b003      	add	sp, #12
 8007106:	4770      	bx	lr
 8007108:	20000034 	.word	0x20000034

0800710c <abort>:
 800710c:	b508      	push	{r3, lr}
 800710e:	2006      	movs	r0, #6
 8007110:	f000 f82c 	bl	800716c <raise>
 8007114:	2001      	movs	r0, #1
 8007116:	f7fa fd9a 	bl	8001c4e <_exit>

0800711a <_raise_r>:
 800711a:	291f      	cmp	r1, #31
 800711c:	b538      	push	{r3, r4, r5, lr}
 800711e:	4605      	mov	r5, r0
 8007120:	460c      	mov	r4, r1
 8007122:	d904      	bls.n	800712e <_raise_r+0x14>
 8007124:	2316      	movs	r3, #22
 8007126:	6003      	str	r3, [r0, #0]
 8007128:	f04f 30ff 	mov.w	r0, #4294967295
 800712c:	bd38      	pop	{r3, r4, r5, pc}
 800712e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007130:	b112      	cbz	r2, 8007138 <_raise_r+0x1e>
 8007132:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007136:	b94b      	cbnz	r3, 800714c <_raise_r+0x32>
 8007138:	4628      	mov	r0, r5
 800713a:	f000 f831 	bl	80071a0 <_getpid_r>
 800713e:	4622      	mov	r2, r4
 8007140:	4601      	mov	r1, r0
 8007142:	4628      	mov	r0, r5
 8007144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007148:	f000 b818 	b.w	800717c <_kill_r>
 800714c:	2b01      	cmp	r3, #1
 800714e:	d00a      	beq.n	8007166 <_raise_r+0x4c>
 8007150:	1c59      	adds	r1, r3, #1
 8007152:	d103      	bne.n	800715c <_raise_r+0x42>
 8007154:	2316      	movs	r3, #22
 8007156:	6003      	str	r3, [r0, #0]
 8007158:	2001      	movs	r0, #1
 800715a:	e7e7      	b.n	800712c <_raise_r+0x12>
 800715c:	2100      	movs	r1, #0
 800715e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007162:	4620      	mov	r0, r4
 8007164:	4798      	blx	r3
 8007166:	2000      	movs	r0, #0
 8007168:	e7e0      	b.n	800712c <_raise_r+0x12>
	...

0800716c <raise>:
 800716c:	4b02      	ldr	r3, [pc, #8]	@ (8007178 <raise+0xc>)
 800716e:	4601      	mov	r1, r0
 8007170:	6818      	ldr	r0, [r3, #0]
 8007172:	f7ff bfd2 	b.w	800711a <_raise_r>
 8007176:	bf00      	nop
 8007178:	20000034 	.word	0x20000034

0800717c <_kill_r>:
 800717c:	b538      	push	{r3, r4, r5, lr}
 800717e:	4d07      	ldr	r5, [pc, #28]	@ (800719c <_kill_r+0x20>)
 8007180:	2300      	movs	r3, #0
 8007182:	4604      	mov	r4, r0
 8007184:	4608      	mov	r0, r1
 8007186:	4611      	mov	r1, r2
 8007188:	602b      	str	r3, [r5, #0]
 800718a:	f7fa fd50 	bl	8001c2e <_kill>
 800718e:	1c43      	adds	r3, r0, #1
 8007190:	d102      	bne.n	8007198 <_kill_r+0x1c>
 8007192:	682b      	ldr	r3, [r5, #0]
 8007194:	b103      	cbz	r3, 8007198 <_kill_r+0x1c>
 8007196:	6023      	str	r3, [r4, #0]
 8007198:	bd38      	pop	{r3, r4, r5, pc}
 800719a:	bf00      	nop
 800719c:	200004c8 	.word	0x200004c8

080071a0 <_getpid_r>:
 80071a0:	f7fa bd3d 	b.w	8001c1e <_getpid>

080071a4 <_init>:
 80071a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071a6:	bf00      	nop
 80071a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071aa:	bc08      	pop	{r3}
 80071ac:	469e      	mov	lr, r3
 80071ae:	4770      	bx	lr

080071b0 <_fini>:
 80071b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071b2:	bf00      	nop
 80071b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071b6:	bc08      	pop	{r3}
 80071b8:	469e      	mov	lr, r3
 80071ba:	4770      	bx	lr
